
-- =============================================
-- AUTHOR:		<GADRIWALA MUSLIM>
-- CREATE DATE: <04/12/2015>
-- DESCRIPTION:	<CUSTOMER AUDIT SYNC SP>
---01/2/2021 (EDIT BY MEHUL ) (SP WITH NOLOCK)---
-- =============================================
CREATE PROCEDURE [dbo].[Sync_Customer_Audit_IN_OUT]
@CMP_ID	 NUMERIC(18,0),
@BRANCH_ID NUMERIC(18,0),
@YEAR_TYPE_ID TINYINT,
@YEAR NUMERIC(18,0),
@Salary_Month Numeric(18,0),
@Salary_Year Numeric(18,0),
@USER_ID NUMERIC(18,0),
@IP_ADDRESS VARCHAR(25)
AS
BEGIN
	
SET NOCOUNT ON 
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
SET ARITHABORT ON
	
	
	DECLARE @FOR_DATE DATETIME	
	IF @YEAR_TYPE_ID = 1  -- CALENDAR YEAR WISE
		SET @FOR_DATE = '31/DEC/' + CAST(@YEAR AS VARCHAR(15))	 
	ELSE -- FINANCIAL YEAR WISE
		SET @FOR_DATE = '31/MAR/' + CAST(@YEAR + 1 AS VARCHAR(15))
	
	CREATE TABLE #EMP_OT_SETTING_TABLE
	(
	   CMP_ID NUMERIC(18,0)
	  ,BRANCH_ID NUMERIC(18,0)
	  ,EMP_ID NUMERIC(18,0)
	  ,VALIDITY_PERIOD_TYPE TINYINT
      ,AUDIT_DAILY_FINAL_OT_LIMIT NUMERIC(18,2)
      ,AUDIT_WEEKLY_FINAL_OT_LIMIT NUMERIC(18,2)
      ,AUDIT_MONTHLY_FINAL_OT_LIMIT NUMERIC(18,2)
      ,AUDIT_QUARTERLY_FINAL_OT_LIMIT NUMERIC(18,2)
      ,YEAR_START_DATE	DATETIME
      ,YEAR_END_DATE	DATETIME
      ,OT_ROUNDINGOFF_TO NUMERIC(18,2)	
      ,OT_ROUNDINGOFF_LOWER TINYINT
      ,OT_APP_LIMIT VARCHAR(10)
	)
	
	
	--DECLARE COMPANYCURSOR CURSOR 
	--	FOR SELECT CMP_ID FROM T0010_COMPANY_MASTER   ORDER BY CMP_ID 
	--OPEN COMPANYCURSOR
	--	FETCH NEXT FROM COMPANYCURSOR INTO @CMP_ID 
	--	WHILE @@FETCH_STATUS = 0
	--		BEGIN
			
			INSERT INTO #EMP_OT_SETTING_TABLE
				SELECT @CMP_ID AS CMP_ID,IE.BRANCH_ID,IE.EMP_ID,GS.VALIDITY_PERIOD_TYPE,
				AUDIT_DAILY_FINAL_OT_LIMIT,AUDIT_WEEKLY_FINAL_OT_LIMIT,
				AUDIT_MONTHLY_FINAL_OT_LIMIT,AUDIT_QUARTERLY_FINAL_OT_LIMIT,
				DBO.GET_YEAR_START_DATE(YEAR(@FOR_DATE),MONTH(@FOR_DATE),GS.VALIDITY_PERIOD_TYPE),
				DBO.GET_YEAR_END_DATE(YEAR(@FOR_DATE),MONTH(@FOR_DATE),GS.VALIDITY_PERIOD_TYPE),
				GS.OT_ROUNDINGOFF_TO,GS.OT_ROUNDINGOFF_LOWER,GS.OT_APP_LIMIT
				FROM T0080_EMP_MASTER EM WITH (NOLOCK)
				INNER JOIN T0095_INCREMENT IE WITH (NOLOCK) ON EM.EMP_ID = IE.EMP_ID INNER JOIN
						(	
							SELECT MAX(IEQ.INCREMENT_EFFECTIVE_DATE) AS INCREMENT_EFFECTIVE_DATE,IEQ.EMP_ID 
							FROM T0095_INCREMENT IEQ WITH (NOLOCK)
							INNER JOIN
								( SELECT MAX(INCREMENT_ID) AS INCREMENT_ID,IE_QRY.EMP_ID FROM T0095_INCREMENT IE_QRY WITH (NOLOCK)
									WHERE CMP_ID = @CMP_ID AND IE_QRY.BRANCH_ID = @BRANCH_ID GROUP BY EMP_ID,INCREMENT_ID
								)SUB_QRY ON SUB_QRY.INCREMENT_ID =IEQ.INCREMENT_ID AND SUB_QRY.EMP_ID = IEQ.EMP_ID
							WHERE CMP_ID = @CMP_ID AND  INCREMENT_EFFECTIVE_DATE <= @FOR_DATE  GROUP BY IEQ.EMP_ID									
						)QRY ON QRY.INCREMENT_EFFECTIVE_DATE = IE.INCREMENT_EFFECTIVE_DATE AND QRY.EMP_ID = IE.EMP_ID
				INNER JOIN T0040_GENERAL_SETTING GS WITH (NOLOCK) ON GS.BRANCH_ID = IE.BRANCH_ID INNER JOIN 
						(
							SELECT MAX(FOR_DATE) AS FOR_DATE,BRANCH_ID FROM T0040_GENERAL_SETTING GS WITH (NOLOCK)
							WHERE CMP_ID = @CMP_ID AND GS.BRANCH_ID = @BRANCH_ID AND FOR_DATE <= @FOR_DATE GROUP BY  BRANCH_ID
						)QRY_1 ON QRY_1.BRANCH_ID = IE.BRANCH_ID AND QRY_1.FOR_DATE = GS.FOR_DATE	
			left OUTER JOIN T0200_MONTHLY_SALARY MS WITH (NOLOCK) ON MS.Emp_ID = 	EM.Emp_ID and MONTH(MS.Month_End_Date) =  @salary_Month and YEAR(MS.Month_End_Date) = @salary_Year
				WHERE IE.CUSTOMER_AUDIT = 1 AND IE.CMP_ID =@CMP_ID  AND IE.BRANCH_ID = @BRANCH_ID	AND ISNULL(MS.Sal_Tran_ID,0)= 0
				
		

	--			FETCH NEXT FROM COMPANYCURSOR INTO @CMP_ID 
	--		END
	--CLOSE COMPANYCURSOR
	--DEALLOCATE COMPANYCURSOR	
		
 CREATE TABLE #DATA      
      (         
       
	   EMP_ID   NUMERIC ,         
	   FOR_DATE DATETIME,        
	   DURATION_IN_SEC NUMERIC,        
	   SHIFT_ID NUMERIC ,        
	   SHIFT_TYPE NUMERIC ,        
	   EMP_OT  NUMERIC ,        
	   EMP_OT_MIN_LIMIT NUMERIC,     
	   EMP_OT_MAX_LIMIT NUMERIC,        
	   P_DAYS  NUMERIC(12,3) DEFAULT 0,        
	   OT_SEC  NUMERIC DEFAULT 0  ,
	   IN_TIME DATETIME,
	   SHIFT_START_TIME DATETIME,
	   OT_START_TIME NUMERIC DEFAULT 0,
	  SHIFT_CHANGE TINYINT DEFAULT 0,
	   FLAG INT DEFAULT 0,
	   WEEKOFF_OT_SEC  NUMERIC DEFAULT 0,
	   HOLIDAY_OT_SEC  NUMERIC DEFAULT 0,
	   CHK_BY_SUPERIOR NUMERIC DEFAULT 0,
	   IO_TRAN_ID	   NUMERIC DEFAULT 0, -- IO_TRAN_ID IS USED FOR IS_CMP_PURPOSE (T0150_EMP_INOUT)
	   OUT_TIME DATETIME,
	   SHIFT_END_TIME DATETIME,			--ANKIT 16112013
	   OT_END_TIME NUMERIC DEFAULT 0,	--ANKIT 16112013
	   WORKING_HRS_ST_TIME TINYINT DEFAULT 0, --HARDIK 14/02/2014
	   WORKING_HRS_END_TIME TINYINT DEFAULT 0, --HARDIK 14/02/2014
	   GATEPASS_DEDUCT_DAYS NUMERIC(18,2) DEFAULT 0 -- ADD BY GADRIWALA MUSLIM 05012014
       )  
       
    CREATE TABLE #DATA_FINAL      
      (         
       
	   EMP_ID   NUMERIC ,         
	   FOR_DATE DATETIME,        
	   DURATION_IN_SEC NUMERIC,        
	   SHIFT_ID NUMERIC ,        
	   SHIFT_TYPE NUMERIC ,        
	   EMP_OT  NUMERIC ,        
	   EMP_OT_MIN_LIMIT NUMERIC,        
	   EMP_OT_MAX_LIMIT NUMERIC,        
	   P_DAYS  NUMERIC(12,3) DEFAULT 0,        
	   OT_SEC  NUMERIC DEFAULT 0  ,
	   IN_TIME DATETIME,
	   SHIFT_START_TIME DATETIME,
	   OT_START_TIME NUMERIC DEFAULT 0,
	   SHIFT_CHANGE TINYINT DEFAULT 0,
	   FLAG INT DEFAULT 0,
	   WEEKOFF_OT_SEC  NUMERIC DEFAULT 0,
	   HOLIDAY_OT_SEC  NUMERIC DEFAULT 0,
	   CHK_BY_SUPERIOR NUMERIC DEFAULT 0,
	   IO_TRAN_ID	   NUMERIC DEFAULT 0, -- IO_TRAN_ID IS USED FOR IS_CMP_PURPOSE (T0150_EMP_INOUT)
	   OUT_TIME DATETIME,
	   SHIFT_END_TIME DATETIME,			--ANKIT 16112013
	   OT_END_TIME NUMERIC DEFAULT 0,	--ANKIT 16112013
	   WORKING_HRS_ST_TIME TINYINT DEFAULT 0, --HARDIK 14/02/2014
	   WORKING_HRS_END_TIME TINYINT DEFAULT 0, --HARDIK 14/02/2014
	   GATEPASS_DEDUCT_DAYS NUMERIC(18,2) DEFAULT 0 -- ADD BY GADRIWALA MUSLIM 05012014
       )  
       
   
       
	DECLARE @CAL_EMP_CONS NVARCHAR(MAX)
	DECLARE @FIN_EMP_CONS NVARCHAR(MAX)
	DECLARE @YEAR_START_DATE AS DATETIME
    DECLARE @YEAR_END_DATE AS DATETIME
	DECLARE @MONTH_START_DATE AS DATETIME
	DECLARE @MONTH_END_DATE AS DATETIME
	
	SET @MONTH_START_DATE = dbo.GET_MONTH_ST_DATE(@Salary_Month,@Salary_YEAR)
	SET @MONTH_END_DATE = dbo.GET_MONTH_END_DATE(@Salary_Month,@Salary_YEAR)
	-- FINANCIAL YEAR EMPLOYEE CONS
	SELECT @FIN_EMP_CONS =  COALESCE(@FIN_EMP_CONS + '#','') + CAST(EMP_ID AS VARCHAR(15)) FROM #EMP_OT_SETTING_TABLE WHERE VALIDITY_PERIOD_TYPE = 0
	-- CALANDER WISE EMPLOYEE CONS
	SELECT @CAL_EMP_CONS =  COALESCE(@CAL_EMP_CONS + '#','') + CAST(EMP_ID AS VARCHAR(15)) FROM #EMP_OT_SETTING_TABLE WHERE VALIDITY_PERIOD_TYPE = 1
		
	IF @FIN_EMP_CONS <> ''
		BEGIN
				SET @YEAR_START_DATE = DBO.GET_YEAR_START_DATE(YEAR(@FOR_DATE),MONTH(@FOR_DATE),0)
				SET @YEAR_END_DATE = DBO.GET_YEAR_END_DATE(YEAR(@FOR_DATE),MONTH(@FOR_DATE),0)
				
				
				
				EXEC SP_CALCULATE_PRESENT_DAYS @CMP_ID = @CMP_ID,@FROM_DATE = @YEAR_START_DATE,@TO_DATE = @YEAR_END_DATE,@BRANCH_ID = @BRANCH_ID,@CAT_ID = 0 ,@GRD_ID = 0,@TYPE_ID = 0,@DEPT_ID = 0,@DESIG_ID = 0,@EMP_ID = 0,@CONSTRAINT = @FIN_EMP_CONS,@RETURN_RECORD_SET = 4,@STRWEEKOFF_DATE = '',@IS_SPLIT_SHIFT_REQ = 0,@PBRANCH_ID = '',@PVERTICAL_ID = '',@PSUBVERTICAL_ID = '',@PDEPT_ID = ''		
				
				
				
				INSERT INTO #DATA_FINAL
					SELECT * FROM #DATA	
					
			      DELETE FROM #DATA
			    
			   
			   
			      DELETE CD FROM T0010_CUSTOMER_AUDIT_DATA CD INNER JOIN
			      DBO.SPLIT(@FIN_EMP_CONS,'#') SD ON CD.EMP_ID = SD.DATA
			      WHERE FOR_DATE BETWEEN @MONTH_START_DATE AND @MONTH_END_DATE
			    
		END
	
	IF @CAL_EMP_CONS <> ''
		BEGIN
				SET @YEAR_START_DATE = DBO.GET_YEAR_START_DATE(YEAR(@FOR_DATE),MONTH(@FOR_DATE),1)
				SET @YEAR_END_DATE = DBO.GET_YEAR_END_DATE(YEAR(@FOR_DATE),MONTH(@FOR_DATE),1)			
			
				EXEC SP_CALCULATE_PRESENT_DAYS @CMP_ID = @CMP_ID,@FROM_DATE = @YEAR_START_DATE,@TO_DATE = @YEAR_END_DATE,@BRANCH_ID = 0,@CAT_ID = 0 ,@GRD_ID = 0,@TYPE_ID = 0,@DEPT_ID = 0,@DESIG_ID = 0,@EMP_ID = 0,@CONSTRAINT = @CAL_EMP_CONS,@RETURN_RECORD_SET = 4,@STRWEEKOFF_DATE = '',@IS_SPLIT_SHIFT_REQ = 0,@PBRANCH_ID = '',@PVERTICAL_ID = '',@PSUBVERTICAL_ID = '',@PDEPT_ID = ''		
	
				INSERT INTO #DATA_FINAL
					SELECT * FROM #DATA	
				
				DELETE CD FROM T0010_CUSTOMER_AUDIT_DATA CD INNER JOIN
			      DBO.SPLIT(@CAL_EMP_CONS,'#') SD ON CD.EMP_ID = SD.DATA
			      WHERE FOR_DATE BETWEEN @MONTH_START_DATE AND @MONTH_END_DATE
			    
				
		END	
		
	IF OBJECT_ID('tempdb..#DATE_VALIDITY') IS NOT NULL
		DROP TABLE #WeekOff_Holiday
       
  CREATE TABLE #DATE_VALIDITY
	(
		ST_DATE	 DATETIME,
		END_DATE DATETIME,
		DURATION VARCHAR(10),
		OT_HOURS NUMERIC(18,2)	DEFAULT 0
	)    
	 
	 

 --  IF OBJECT_ID('tempdb..#WeekOff_Holiday') IS NOT NULL
 --   DROP TABLE #WeekOff_Holiday
    
	--Create Table #WeekOff_Holiday
	--(
		
	--	Weekoff_days            tinyint,
	--	Holidays                tinyint,
	--	Weekoff_Dates           nvarchar(max),
	--	Holiday_Dates           nvarchar(max),
	--)

	CREATE TABLE #EMP_WEEKOFF
	(
		Row_ID			NUMERIC,
		Emp_ID			NUMERIC,
		For_Date		DATETIME,
		Weekoff_day		VARCHAR(10),
		W_Day			numeric(4,1),
		Is_Cancel		BIT
	)
	CREATE CLUSTERED INDEX IX_Emp_WeekOff_EmpID_ForDate ON #EMP_WEEKOFF(Emp_ID, For_Date)		

	DECLARE @FROM_DATE DATETIME
	DECLARE @TO_DATE DATETIME

	SELECT	@FROM_DATE=MIN(YEAR_START_DATE), @TO_DATE=MAX(YEAR_END_DATE) 
	FROM	#EMP_OT_SETTING_TABLE

	DECLARE @CONSTRAINT VARCHAR(MAX)
	SELECT	@CONSTRAINT = COALESCE(@CONSTRAINT + '#','') + CAST(EMP_ID AS VARCHAR(10))
	FROM	(SELECT DISTINCT EMP_ID FROM #EMP_OT_SETTING_TABLE)  T
	
	EXEC SP_GET_HW_ALL @CONSTRAINT=@CONSTRAINT,@CMP_ID=@Cmp_ID, @FROM_DATE=@FROM_DATE, @TO_DATE=@TO_DATE, @All_Weekoff = 0, @Exec_Mode=1		

	
	
	DECLARE @CUR_CMP_ID NUMERIC(18,0)
	DECLARE @CUR_BRANCH_ID NUMERIC(18,0)
	DECLARE @CUR_EMP_ID NUMERIC(18,0)
	DECLARE @CUR_VALIDITY_PERIOD_TYPE TINYINT
    DECLARE @CUR_AUDIT_DAILY_FINAL_OT_LIMIT NUMERIC(18,2)
    DECLARE @CUR_AUDIT_WEEKLY_FINAL_OT_LIMIT NUMERIC(18,2)
    DECLARE @CUR_AUDIT_MONTHLY_FINAL_OT_LIMIT NUMERIC(18,2)
    DECLARE @CUR_AUDIT_QUARTERLY_FINAL_OT_LIMIT NUMERIC(18,2)

    DECLARE @CUR_IO_TRAN_ID NUMERIC(18,0)
    DECLARE @CUR_IN_TIME DATETIME 
    DECLARE @CUR_OUT_TIME DATETIME
    DECLARE @CUR_DURATION VARCHAR(10)
    DECLARE @CUR_IN_DATE_TIME DATETIME
    DECLARE @CUR_OUT_DATE_TIME DATETIME
    DECLARE @CUR_SHIFT_ST_TIME DATETIME
    DECLARE @CUR_SHIFT_END_TIME DATETIME
    DECLARE @CUR_OT_HOURS NUMERIC(18,2)
    DECLARE @CUR_FOR_DATE DATETIME
    DECLARE @CUR_IS_WEEKOFF TINYINT
    DECLARE @CUR_IS_HOLIDAY TINYINT
    DECLARE @TOTAL_WEEKLY_OT_HOURS NUMERIC(18,2)
    DECLARE @TOTAL_MONTHLY_OT_HOURS NUMERIC(18,2)
    DECLARE @TOTAL_QUATERLY_OT_HOURS NUMERIC(18,2)
    DECLARE @DEFAULT_OT_HOURS NUMERIC(18,2)
	--DECLARE @PREVIOUS_START_DATE DATETIME
	--SET @PREVIOUS_START_DATE = NULL
	
	DECLARE @RANDOM_NUM NUMERIC(18,0)
	SET @RANDOM_NUM = 0
    DECLARE @RANDON_TYPE TINYINT
    SET @RANDON_TYPE = 0 
    
    DECLARE @CUR_OT_ROUNDINGOFF_TO AS NUMERIC(18,2)
    DECLARE @CUR_OT_ROUNDINGOFF_LOWER AS  TINYINT
    DECLARE @CUR_OT_APP_TIME AS VARCHAR(10)
    DECLARE @STR_WEEKOFF NVARCHAR(MAX)
    SET @STR_WEEKOFF = ''
    
   			   
	DECLARE AUDIT_CURSOR CURSOR FOR
		SELECT CMP_ID,BRANCH_ID,EMP_ID,VALIDITY_PERIOD_TYPE,AUDIT_DAILY_FINAL_OT_LIMIT,AUDIT_WEEKLY_FINAL_OT_LIMIT,
			   AUDIT_MONTHLY_FINAL_OT_LIMIT,AUDIT_QUARTERLY_FINAL_OT_LIMIT,YEAR_START_DATE,YEAR_END_DATE,OT_ROUNDINGOFF_TO,OT_ROUNDINGOFF_LOWER,OT_APP_LIMIT 
		FROM	#EMP_OT_SETTING_TABLE
	OPEN AUDIT_CURSOR
		FETCH NEXT FROM AUDIT_CURSOR INTO @CUR_CMP_ID ,@CUR_BRANCH_ID,@CUR_EMP_ID,@CUR_VALIDITY_PERIOD_TYPE,@CUR_AUDIT_DAILY_FINAL_OT_LIMIT,@CUR_AUDIT_WEEKLY_FINAL_OT_LIMIT,@CUR_AUDIT_MONTHLY_FINAL_OT_LIMIT,@CUR_AUDIT_QUARTERLY_FINAL_OT_LIMIT,@YEAR_START_DATE,@YEAR_END_DATE,@CUR_OT_ROUNDINGOFF_TO,@CUR_OT_ROUNDINGOFF_LOWER,@CUR_OT_APP_TIME
		WHILE @@FETCH_STATUS = 0
			BEGIN
			
			
				--DELETE FROM #WEEKOFF_HOLIDAY								
				DELETE FROM #DATE_VALIDITY
				
				--EXEC SP_GET_HOLIDAY_WEEKOFF @CUR_CMP_ID,@YEAR_START_DATE,@YEAR_END_DATE,@CUR_EMP_ID
				SET @STR_WEEKOFF = NULL;
				SELECT @STR_WEEKOFF = COALESCE(@STR_WEEKOFF + ';', '') + CAST(FOR_DATE AS VARCHAR(11)) FROM #EMP_WEEKOFF WHERE Emp_ID=@CUR_EMP_ID AND For_Date BETWEEN @YEAR_START_DATE AND @YEAR_END_DATE
							
				
				INSERT INTO #DATE_VALIDITY(ST_DATE,END_DATE,DURATION)
				EXEC GET_DURATION_DATES  @YEAR_START_DATE,@YEAR_END_DATE,@STR_WEEKOFF
				
				--SELECT * FROM #DATE_VALIDITY
				--IF ISNULL(@PREVIOUS_START_DATE,'') <>  @YEAR_START_DATE
				--	BEGIN
				--			DELETE FROM #DATE_VALIDITY
							
				--			INSERT INTO #DATE_VALIDITY(ST_DATE,END_DATE,DURATION)
				--			EXEC GET_DURATION_DATES  @YEAR_START_DATE,@YEAR_END_DATE,@STR_WEEKOFF
				--	END
				--ELSE
				--	BEGIN
				--			UPDATE #DATE_VALIDITY SET OT_HOURS = 0 
				--	END
				
				
				
				DELETE FROM T0150_AUDIT_EMP_INOUT_RECORD WHERE	
						EMP_ID = @CUR_EMP_ID AND CMP_ID = @CUR_CMP_ID AND
						(FOR_DATE bETWEEN @MONTH_START_DATE AND @MONTH_END_DATE)	
				
				--	CODE COMMENTED BY RAMIZ ON 06/12/2017
				--	INSERT INTO T0150_AUDIT_EMP_INOUT_RECORD 
				--	SELECT * FROM T0150_EMP_INOUT_RECORD WHERE
				--		EMP_ID = @CUR_EMP_ID AND CMP_ID = @CUR_CMP_ID AND
				--		(FOR_DATE bETWEEN @MONTH_START_DATE AND @MONTH_END_DATE)	
				
				--New Code Added By Ramiz on 06/12/2017

				INSERT INTO T0150_AUDIT_EMP_INOUT_RECORD 
					(IO_Tran_Id,Emp_ID,Cmp_ID,For_Date,In_Time,Out_Time,Duration,Reason,Ip_Address,In_Date_Time,Out_Date_Time,Skip_Count,Late_Calc_Not_App,Chk_By_Superior,Sup_Comment,Half_Full_day,Is_Cancel_Late_In,Is_Cancel_Early_Out,Is_Default_In,Is_Default_Out,Cmp_prp_in_flag,Cmp_prp_out_flag,is_Cmp_purpose,App_Date,Apr_Date,System_date,Other_Reason,ManualEntryFlag)
				SELECT 
					IO_Tran_Id,Emp_ID,Cmp_ID,For_Date,In_Time,Out_Time,Duration,Reason,Ip_Address,In_Date_Time,Out_Date_Time,Skip_Count,Late_Calc_Not_App,Chk_By_Superior,Sup_Comment,Half_Full_day,Is_Cancel_Late_In,Is_Cancel_Early_Out,Is_Default_In,Is_Default_Out,Cmp_prp_in_flag,Cmp_prp_out_flag,is_Cmp_purpose,App_Date,Apr_Date,System_date,Other_Reason,ManualEntryFlag 
				FROM T0150_EMP_INOUT_RECORD w WITH (NOLOCK)
				WHERE EMP_ID = @CUR_EMP_ID AND CMP_ID = @CUR_CMP_ID AND
					(FOR_DATE bETWEEN @MONTH_START_DATE AND @MONTH_END_DATE)
				
				
				DECLARE CUR_INOUT CURSOR FOR
							SELECT OT.FOR_DATE,EM.IO_TRAN_ID,EM.IN_TIME,OT.OUT_TIME,DURATION,
							SHIFT_START_TIME,SHIFT_END_TIME, 
							CONVERT(NUMERIC(18,2),ROUND(DATEDIFF(MS,0,DBO.F_RETURN_HOURS(ISNULL(OT_SEC,0) + ISNULL(HOLIDAY_OT_SEC,0) + ISNULL(WEEKOFF_OT_SEC,0)))/3600000.000000,4)) AS OT_HOURS_DECIMAL 
							,CASE WHEN ISNULL(OT.WEEKOFF_OT_SEC,0) > 0 THEN 1 ELSE 0 END AS IS_WEEKOFF
							,CASE WHEN ISNULL(OT.HOLIDAY_OT_SEC,0) > 0 THEN 1 ELSE 0 END AS IS_HOLIDAY
							FROM T0150_AUDIT_EMP_INOUT_RECORD EM WITH (NOLOCK)
							INNER JOIN #DATA_FINAL  OT  ON EM.EMP_ID = OT.EMP_ID AND EM.FOR_DATE = OT.FOR_DATE --AND EM.IN_TIME = OT.IN_TIME
							 WHERE 	EM.EMP_ID = @CUR_EMP_ID AND CMP_ID = @CUR_CMP_ID AND
							 (EM.FOR_DATE BETWEEN @YEAR_START_DATE AND  @YEAR_END_DATE) 
							AND (ISNULL(OT_SEC,0) + ISNULL(HOLIDAY_OT_SEC,0) + ISNULL(WEEKOFF_OT_SEC,0)) > 0 AND OT.FLAG = 0
							ORDER BY EM.EMP_ID,EM.FOR_DATE
				
				OPEN CUR_INOUT		
					FETCH NEXT FROM CUR_INOUT INTO @CUR_FOR_DATE,@CUR_IO_TRAN_ID,@CUR_IN_TIME,@CUR_OUT_TIME,@CUR_DURATION,@CUR_SHIFT_ST_TIME,@CUR_SHIFT_END_TIME,@CUR_OT_HOURS,@CUR_IS_WEEKOFF,@CUR_IS_HOLIDAY
					WHILE @@FETCH_STATUS = 0
						BEGIN
								
								
								IF @CUR_IS_WEEKOFF  = 1
									BEGIN
										IF NOT EXISTS (SELECT  1 FROM T0120_COMPOFF_APPROVAL WITH (NOLOCK) WHERE APPROVE_DATE = @CUR_FOR_DATE AND EMP_ID = @CUR_EMP_ID AND CMP_ID = @CMP_ID)
											BEGIN
											
													DELETE FROM T0150_AUDIT_EMP_INOUT_RECORD 
													WHERE EMP_ID =@CUR_EMP_ID AND FOR_DATE = @CUR_FOR_DATE AND ( FOR_DATE bETWEEN @MONTH_START_DATE AND @MONTH_END_DATE)	
													
													DELETE FROM #DATA_FINAL WHERE EMP_ID = @CUR_EMP_ID AND FOR_DATE = @CUR_FOR_DATE 
												
													GOTO END1
											END
									END	
								SET @DEFAULT_OT_HOURS = @CUR_OT_HOURS
								
								-- RANDOM NUMBER 1 TO UPTO 3
									SET @RANDOM_NUM =  CAST(1 + (4-1)*RAND() AS INT)
								--PRINT @CUR_AUDIT_DAILY_FINAL_OT_LIMIT
									SET @RANDON_TYPE = CAST(2 * RAND() AS TINYINT)
								IF @RANDON_TYPE = 1
									SET @RANDOM_NUM = @RANDOM_NUM * -1
									
									

								IF @CUR_AUDIT_DAILY_FINAL_OT_LIMIT < @CUR_OT_HOURS AND @CUR_AUDIT_DAILY_FINAL_OT_LIMIT > 0
									BEGIN
										SET  @CUR_OT_HOURS = @CUR_AUDIT_DAILY_FINAL_OT_LIMIT
									END
								
						
								 UPDATE #DATE_VALIDITY SET OT_HOURS = OT_HOURS +  ISNULL(@CUR_OT_HOURS,0)
										WHERE @CUR_FOR_DATE BETWEEN ST_DATE AND END_DATE AND DURATION = 'WEEKLY'
								
								
								 SELECT @TOTAL_WEEKLY_OT_HOURS = ISNULL(SUM(OT_HOURS),0) FROM  #DATE_VALIDITY WHERE 
										@CUR_FOR_DATE BETWEEN ST_DATE AND END_DATE AND DURATION = 'WEEKLY'
								
									
								IF @CUR_AUDIT_WEEKLY_FINAL_OT_LIMIT < @TOTAL_WEEKLY_OT_HOURS	AND @CUR_AUDIT_WEEKLY_FINAL_OT_LIMIT > 0	
									BEGIN
										SET @CUR_OT_HOURS = 0
									END			
							
								
								UPDATE #DATE_VALIDITY SET OT_HOURS = OT_HOURS +  ISNULL(@CUR_OT_HOURS,0)
										WHERE @CUR_FOR_DATE BETWEEN ST_DATE AND END_DATE AND DURATION = 'MONTHLY'
										
								
								 SELECT @TOTAL_MONTHLY_OT_HOURS = ISNULL(SUM(OT_HOURS),0) FROM  #DATE_VALIDITY WHERE 
										@CUR_FOR_DATE BETWEEN ST_DATE AND END_DATE AND DURATION = 'MONTHLY'
								
								
								 IF	@CUR_AUDIT_MONTHLY_FINAL_OT_LIMIT < @TOTAL_MONTHLY_OT_HOURS AND @CUR_AUDIT_MONTHLY_FINAL_OT_LIMIT > 0
									BEGIN
										SET @CUR_OT_HOURS = 0
									END		
								
								UPDATE #DATE_VALIDITY SET OT_HOURS = OT_HOURS +  ISNULL(@CUR_OT_HOURS,0)
										WHERE @CUR_FOR_DATE BETWEEN ST_DATE AND END_DATE AND DURATION = 'QUARTERLY'
										
																		
								SELECT @TOTAL_QUATERLY_OT_HOURS = ISNULL(SUM(OT_HOURS),0) FROM  #DATE_VALIDITY WHERE 
										@CUR_FOR_DATE BETWEEN ST_DATE AND END_DATE AND DURATION = 'QUARTERLY'
									
								
								 IF @CUR_AUDIT_QUARTERLY_FINAL_OT_LIMIT < @TOTAL_QUATERLY_OT_HOURS AND @CUR_AUDIT_QUARTERLY_FINAL_OT_LIMIT > 0
									BEGIN
										SET @CUR_OT_HOURS = 0
									END
										
								 --IF @DEFAULT_OT_HOURS <> @CUR_OT_HOURS 
									--BEGIN
												
									--PRINT '-------------'		
									--PRINT 'FOR_DATE : ' + CAST(@CUR_FOR_DATE AS VARCHAR(15))
									--PRINT 'EMP_ID : ' + CAST(@CUR_EMP_ID AS VARCHAR(18))
									--PRINT 'SHIFT START TIME : ' + CAST(@CUR_SHIFT_ST_TIME AS VARCHAR(35))
									--PRINT 'SHIFT END TIME : ' + CAST(@CUR_SHIFT_END_TIME AS VARCHAR(35))
									--PRINT 'IN-TIME :' + CAST(@CUR_IN_TIME AS VARCHAR(35))
									--PRINT 'OUT-TIME :' + CAST(@CUR_OUT_TIME AS VARCHAR(35))
									--PRINT 'OT HOURS : ' + CAST(@CUR_OT_HOURS AS VARCHAR(18))
									--PRINT 'DEFAULT OT HOURS : ' + CAST(@DEFAULT_OT_HOURS AS VARCHAR(18))
								
									--PRINT 'OUT-TIME :' + CAST(@CUR_OUT_TIME AS VARCHAR(15))
									--PRINT 'TOTAL WEEKLY OT : ' + CAST(@TOTAL_WEEKLY_OT_HOURS AS VARCHAR(10))
									--PRINT 'TOTAL MONTHLY OT : ' + CAST(@TOTAL_MONTHLY_OT_HOURS AS VARCHAR(10))
									--PRINT 'TOTAL QUATERLY OT : ' + CAST(@TOTAL_QUATERLY_OT_HOURS AS VARCHAR(10))	
									
									--PRINT '-------------'
									--END
								
								DECLARE @MINUTES AS NUMERIC(18,2)
								SET @MINUTES = 0	
								
								IF  (@DEFAULT_OT_HOURS - @CUR_OT_HOURS) > 0
									BEGIN
											--select @DEFAULT_OT_HOURS,@CUR_OT_HOURS,@CUR_SHIFT_ST_TIME,@CUR_IN_TIME,@CUR_SHIFT_END_TIME,@CUR_OUT_TIME,@DEFAULT_OT_HOURS,@MINUTES
											IF @CUR_SHIFT_ST_TIME > @CUR_IN_TIME	
												BEGIN
															
														IF DATEDIFF(HH,@CUR_SHIFT_ST_TIME,@CUR_IN_TIME)  >= (@DEFAULT_OT_HOURS- @CUR_OT_HOURS)
															BEGIN
																SET @MINUTES = (-(@DEFAULT_OT_HOURS- @CUR_OT_HOURS) * 60) - @RANDOM_NUM
																if isdate(DATEADD(MINUTE,@MINUTES, @CUR_IN_TIME)) = 1
																	SET @CUR_IN_TIME = DATEADD(MINUTE,@MINUTES, @CUR_IN_TIME)
																else
																	set @CUR_IN_TIME = null
															END
														ELSE
															BEGIN
																SET @MINUTES = -(DATEDIFF(MINUTE,@CUR_SHIFT_ST_TIME,@CUR_IN_TIME))- @RANDOM_NUM
																if isdate(DATEADD(MINUTE,@MINUTES, @CUR_IN_TIME)) = 1
																	SET @CUR_IN_TIME = DATEADD(MINUTE,@MINUTES, @CUR_IN_TIME)
																else
																	set @CUR_IN_TIME = null
															END		
												END
											
											IF @CUR_SHIFT_END_TIME < @CUR_OUT_TIME	AND ((@DEFAULT_OT_HOURS) * 60) - @MINUTES > 0 
												BEGIN
												
														IF DATEDIFF(HH,@CUR_SHIFT_END_TIME,@CUR_OUT_TIME)  >= (@DEFAULT_OT_HOURS- @CUR_OT_HOURS)
															BEGIN
															
																SET @MINUTES = (-((@DEFAULT_OT_HOURS- @CUR_OT_HOURS ) * 60)+ @RANDOM_NUM) + @MINUTES
																if isdate(DATEADD(MINUTE,@MINUTES, @CUR_OUT_TIME)) = 1
																SET @CUR_OUT_TIME = DATEADD(MINUTE,@MINUTES, @CUR_OUT_TIME)
																else
																set @CUR_OUT_TIME = null
															
															END
														ELSE
															BEGIN

																SET @MINUTES = (-(DATEDIFF(MINUTE,@CUR_SHIFT_END_TIME,@CUR_OUT_TIME)) + @RANDOM_NUM) + @MINUTES																
																if isdate(DATEADD(MINUTE,@MINUTES, @CUR_OUT_TIME)) = 1
																SET @CUR_OUT_TIME = DATEADD(MINUTE,@MINUTES, @CUR_OUT_TIME)
																else
																set @CUR_OUT_TIME = null	

															END		
												END	
												
												--IF @CUR_OT_HOURS <> @DEFAULT_OT_HOURS
												--	BEGIN
												--		PRINT 'DEDUCT OT TIME FROM IN-OUT'
												--		PRINT 'IN-TIME :' + CAST(@CUR_IN_TIME AS VARCHAR(35))
												--		PRINT 'OUT-TIME :' + CAST(@CUR_OUT_TIME AS VARCHAR(35))
												--		--PRINT 'RANDOM NUMBER : ' + CAST(@RANDOM_NUM AS VARCHAR(1))
												--	END
												
										if @CUR_IN_TIME is not null and @CUR_OUT_TIME is not null
											UPDATE T0150_AUDIT_EMP_INOUT_RECORD
											SET IN_TIME = @CUR_IN_TIME,
												OUT_TIME = @CUR_OUT_TIME, 
												DURATION = DBO.F_RETURN_HOURS(DATEDIFF(S,@CUR_IN_TIME,@CUR_OUT_TIME))
											WHERE IO_TRAN_ID = @CUR_IO_TRAN_ID	AND ( FOR_DATE bETWEEN @MONTH_START_DATE AND @MONTH_END_DATE)		
											
											--select * From T0150_AUDIT_EMP_INOUT_RECORD WHERE IO_TRAN_ID = @CUR_IO_TRAN_ID	AND ( FOR_DATE bETWEEN @MONTH_START_DATE AND @MONTH_END_DATE)	 

											DECLARE @OT_SEC AS NUMERIC
											SET @OT_SEC = 0
											SET @OT_SEC = (@CUR_OT_HOURS * 3600) + (@RANDOM_NUM * 60)
											
										IF @CUR_OT_ROUNDINGOFF_TO > 0
											BEGIN
												IF @CUR_OT_ROUNDINGOFF_LOWER = 0
												BEGIN
													
													SET @OT_SEC = (FLOOR((CAST(@OT_SEC AS FLOAT)/CAST(3600 AS FLOAT))*(1/@CUR_OT_ROUNDINGOFF_TO))/(1/@CUR_OT_ROUNDINGOFF_TO))*3600
													
												END
												ELSE IF @CUR_OT_ROUNDINGOFF_LOWER = 1
												BEGIN
													SET @OT_SEC = (CEILING((CAST(@OT_SEC AS FLOAT)/CAST(3600 AS FLOAT))*(1/@CUR_OT_ROUNDINGOFF_TO))/(1/@CUR_OT_ROUNDINGOFF_TO))*3600
												END
												ELSE
												BEGIN
													BEGIN
												
													SET @OT_SEC = (ROUND((CAST(@OT_SEC AS FLOAT)/CAST(3600 AS FLOAT))*(1/@CUR_OT_ROUNDINGOFF_TO),0)/(1/@CUR_OT_ROUNDINGOFF_TO))*3600
													
													END
												END
											END
											
											
											IF  @OT_SEC < 0 OR ( @OT_SEC < DBO.F_RETURN_SEC(@CUR_OT_APP_TIME))
												SET @OT_SEC = 0
												
												 IF @CUR_IS_WEEKOFF  = 1
													BEGIN
															UPDATE #DATA_FINAL SET
																	IN_TIME = @CUR_IN_TIME,
																	OUT_TIME = @CUR_OUT_TIME,
																	DURATION_IN_SEC = DATEDIFF(S,@CUR_IN_TIME,@CUR_OUT_TIME),
																	WEEKOFF_OT_SEC =  @OT_SEC
															WHERE EMP_ID = @CUR_EMP_ID AND FOR_DATE = @CUR_FOR_DATE 
													END
												ELSE IF @CUR_IS_HOLIDAY = 1
													BEGIN
														UPDATE #DATA_FINAL SET
																	IN_TIME = @CUR_IN_TIME,
																	OUT_TIME = @CUR_OUT_TIME,
																	DURATION_IN_SEC = DATEDIFF(S,@CUR_IN_TIME,@CUR_OUT_TIME),
																	HOLIDAY_OT_SEC =  @OT_SEC
															WHERE EMP_ID = @CUR_EMP_ID AND FOR_DATE = @CUR_FOR_DATE 
													END
												ELSE
													BEGIN
														UPDATE #DATA_FINAL SET
																	IN_TIME = @CUR_IN_TIME,
																	OUT_TIME = @CUR_OUT_TIME,
																	DURATION_IN_SEC = DATEDIFF(S,@CUR_IN_TIME,@CUR_OUT_TIME),
																	OT_SEC =  @OT_SEC
															WHERE EMP_ID = @CUR_EMP_ID AND FOR_DATE = @CUR_FOR_DATE 
													END										
											
		END1: 									
									END 	
										 
						
						 FETCH NEXT FROM CUR_INOUT INTO  @CUR_FOR_DATE,@CUR_IO_TRAN_ID,@CUR_IN_TIME,@CUR_OUT_TIME,@CUR_DURATION,@CUR_SHIFT_ST_TIME,@CUR_SHIFT_END_TIME,@CUR_OT_HOURS,@CUR_IS_WEEKOFF,@CUR_IS_HOLIDAY
						END
				CLOSE CUR_INOUT
				DEALLOCATE CUR_INOUT
				--	SET @PREVIOUS_START_DATE = @YEAR_START_DATE
				FETCH NEXT FROM AUDIT_CURSOR INTO @CUR_CMP_ID,@CUR_BRANCH_ID ,@CUR_EMP_ID,@CUR_VALIDITY_PERIOD_TYPE,@CUR_AUDIT_DAILY_FINAL_OT_LIMIT,@CUR_AUDIT_WEEKLY_FINAL_OT_LIMIT,@CUR_AUDIT_MONTHLY_FINAL_OT_LIMIT,@CUR_AUDIT_QUARTERLY_FINAL_OT_LIMIT,@YEAR_START_DATE,@YEAR_END_DATE,@CUR_OT_ROUNDINGOFF_TO,@CUR_OT_ROUNDINGOFF_LOWER,@CUR_OT_APP_TIME
			END
	CLOSE AUDIT_CURSOR
	DEALLOCATE AUDIT_CURSOR


	INSERT INTO T0010_CUSTOMER_AUDIT_DATA 
		SELECT * FROM #DATA_FINAL WHERE FLAG = 0 AND FOR_DATE bETWEEN @MONTH_START_DATE AND @MONTH_END_DATE					

   
    DECLARE @BRANCH_NAME AS VARCHAR(25)
    SELECT @BRANCH_NAME = BRANCH_NAME FROM T0030_BRANCH_MASTER WITH (NOLOCK) WHERE BRANCH_ID = @BRANCH_ID	
	
	DECLARE @FINANCIAL_YEAR AS VARCHAR(50)
	
	--If YEAR(@YEAR_START_DATE) = YEAR(@YEAR_END_DATE)
	--	SET @FINANCIAL_YEAR	 =  ' ( ' + CAST(YEAR(@YEAR_START_DATE) AS VARCHAR(15))+ ' ) '
	--else
	--	SET @FINANCIAL_YEAR	 =  ' ( ' + CAST(YEAR(@YEAR_START_DATE)AS VARCHAR(15)) +  '-' + CAST(YEAR(@YEAR_END_DATE) AS VARCHAR(15)) + ' ) '
		
    SET @FINANCIAL_YEAR	 =  ' ( ' + CAST(@MONTH_START_DATE AS VARCHAR(12)) +  '-' + CAST(@MONTH_END_DATE AS VARCHAR(12)) + ' ) '
    DECLARE @AUDIT_DESCRIPTION AS VARCHAR(MAX)
    SET @AUDIT_DESCRIPTION = 'Last Run Customer Audit ' + CAST(GETDATE() AS VARCHAR(25)) + ' For ' + ISNULL(@BRANCH_NAME,'') + ' ' + @FINANCIAL_YEAR

    
	EXEC P9999_AUDIT_TRAIL @CMP_ID,'INSERT','Customer Audit',@AUDIT_DESCRIPTION,@BRANCH_ID,@USER_ID,@IP_ADDRESS
END



