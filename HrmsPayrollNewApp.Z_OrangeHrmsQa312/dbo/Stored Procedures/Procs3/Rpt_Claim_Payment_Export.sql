


---01/2/2021 (EDIT BY MEHUL ) (SP WITH NOLOCK)---
CREATE PROCEDURE [dbo].[Rpt_Claim_Payment_Export]  
	 @Cmp_ID		numeric  
	,@From_Date		datetime
	,@To_Date 		datetime
	,@Branch_ID		numeric	
	,@Grade_ID 		numeric
	,@Type_ID 		numeric
	,@Dept_ID 		numeric
	,@Desig_ID 		numeric
	,@Emp_ID 		numeric
	,@Constraint	varchar(max)
	,@Cat_ID        numeric = 0
	,@is_column		tinyint = 0
	,@Salary_Cycle_id  NUMERIC  = 0
	,@Type varchar(100) = '0'
	,@Status   TINYINT
	
	--,@PDept_ID varchar(max)=''
	--,@Segment_ID Numeric = 0 
	--,@Vertical Numeric = 0 
	--,@SubVertical Numeric = 0 
	--,@subBranch Numeric = 0 
	--,@PBranch_ID	varchar(max)= ''
	--,@PVertical_ID	varchar(max)= ''
	--,@PSubVertical_ID	varchar(max)= ''
	
	
AS  

SET NOCOUNT ON 
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
SET ARITHABORT ON
	
   
		IF @BRANCH_ID = 0  
			SET @BRANCH_ID = NULL
			
		IF @GRADE_ID = 0  
			 SET @GRADE_ID = NULL  
			 
		IF @EMP_ID = 0  
			SET @EMP_ID = NULL  
			
		IF @DESIG_ID = 0  
			SET @DESIG_ID = NULL  
			
		IF @DEPT_ID = 0  
			SET @DEPT_ID = NULL 
			
		IF @TYPE_ID = 0  
			SET @TYPE_ID = NULL 	
			
		IF @CAT_ID = 0
			SET @CAT_ID = NULL
	        
		IF @SALARY_CYCLE_ID = 0
			SET @SALARY_CYCLE_ID = NULL
			
			
	   
		--IF @SEGMENT_ID = 0
		--	SET @SEGMENT_ID = NULL
	        
		--IF @PBRANCH_ID = '0' OR @PBRANCH_ID='' 
		--	SET @PBRANCH_ID = NULL   	
			
		--IF @PVERTICAL_ID ='0' OR @PVERTICAL_ID = ''
		--	SET @PVERTICAL_ID = NULL

		--IF @PSUBVERTICAL_ID ='0' OR @PSUBVERTICAL_ID = ''
		--	SET @PSUBVERTICAL_ID = NULL
			
		--IF @PDEPT_ID = '0' OR @PDEPT_ID=''
		--	SET @PDEPT_ID = NULL	 
			
		
	--IF @PBRANCH_ID IS NULL
	--BEGIN	
	--	SELECT   @PBRANCH_ID = COALESCE(@PBRANCH_ID + ',', '') + CAST(BRANCH_ID AS NVARCHAR(5))  FROM T0030_BRANCH_MASTER WHERE CMP_ID=@CMP_ID 
	--	SET @PBRANCH_ID = @PBRANCH_ID + ',0'
	--END
	
	--IF @PVERTICAL_ID IS NULL
	--BEGIN	
	--	SELECT   @PVERTICAL_ID = COALESCE(@PVERTICAL_ID + ',', '') + CAST(VERTICAL_ID AS NVARCHAR(5))  FROM T0040_VERTICAL_SEGMENT WHERE CMP_ID=@CMP_ID 
		
	--	IF @PVERTICAL_ID IS NULL
	--		SET @PVERTICAL_ID = '0';
	--	ELSE
	--		SET @PVERTICAL_ID = @PVERTICAL_ID + ',0'
			
	--END
	--IF @PSUBVERTICAL_ID IS NULL
	--BEGIN	
	--	SELECT   @PSUBVERTICAL_ID = COALESCE(@PSUBVERTICAL_ID + ',', '') + CAST(SUBVERTICAL_ID AS NVARCHAR(5))  FROM T0050_SUBVERTICAL WHERE CMP_ID=@CMP_ID 
	--	IF @PSUBVERTICAL_ID IS NULL
	--		SET @PSUBVERTICAL_ID = '0';
	--	ELSE
	--		SET @PSUBVERTICAL_ID = @PSUBVERTICAL_ID + ',0'
	--END
	--IF @PDEPT_ID IS NULL
	--BEGIN
	--	SELECT   @PDEPT_ID = COALESCE(@PDEPT_ID + ',', '') + CAST(DEPT_ID AS NVARCHAR(5))  FROM T0040_DEPARTMENT_MASTER WHERE CMP_ID=@CMP_ID 		
	--	SET @PDEPT_ID = @PDEPT_ID + ',0'
	--	IF @PDEPT_ID IS NULL
	--		SET @PDEPT_ID = '0';
	--	ELSE
	--		SET @PDEPT_ID = @PDEPT_ID + ',0'
	--END
	
	
	
	CREATE TABLE #EMP_CONS 
	 (      
		EMP_ID NUMERIC ,     
		BRANCH_ID NUMERIC,
		INCREMENT_ID NUMERIC
	 )          

	IF @CONSTRAINT <> ''        
	 BEGIN	 
	   INSERT INTO #EMP_CONS(EMP_ID)        
	   SELECT  CAST(DATA  AS NUMERIC) FROM DBO.SPLIT (@CONSTRAINT,'#')         
	  END      
	ELSE        
	 BEGIN
			Insert Into #Emp_Cons      
		    select distinct emp_id,ve.branch_id,Increment_ID from V_Emp_Cons As VE
		    left OUTER JOIN  (SELECT DISTINCT ESC.SalDate_id,ESC.emp_id as eid FROM T0095_Emp_Salary_Cycle ESC WITH (NOLOCK)
			inner join 
							(SELECT max(Effective_date) as Effective_date,emp_id FROM T0095_Emp_Salary_Cycle WITH (NOLOCK) where Effective_date <= @To_Date
							GROUP BY emp_id) Qry
							on Qry.Effective_date = ESC.Effective_date AND Qry.Emp_id = ESC.Emp_id) as QrySC
		       ON QrySC.eid = VE.Emp_ID
			where 
		    cmp_id=@Cmp_ID 
		   and Isnull(Cat_ID,0) = Isnull(@Cat_ID ,Isnull(Cat_ID,0))      
		   --and Branch_ID = isnull(@Branch_ID ,Branch_ID)      
		   and Grd_ID = isnull(@Grade_ID ,Grd_ID)      
		   --and isnull(Dept_ID,0) = isnull(@Dept_ID ,isnull(Dept_ID,0))    
		   and Isnull(Type_ID,0) = isnull(@Type_ID ,Isnull(Type_ID,0))      
		   and Isnull(Desig_ID,0) = isnull(@Desig_ID ,Isnull(Desig_ID,0)) 
		   and isnull(QrySC.SalDate_id,0) = isnull(@Salary_Cycle_id ,isnull(QrySC.SalDate_id,0))  
		  -- and ISNULL(Segment_ID,0) = ISNULL(@Segment_Id,Isnull(Segment_ID,0))       
		  --Added By Jaina 3-10-2015 Start   
		   --and EXISTS (select Data from dbo.Split(@PBranch_ID, ',') B Where cast(B.data as numeric)=Isnull(VE.Branch_ID,0))
		   --and EXISTS (select Data from dbo.Split(@PVertical_ID, ',') V Where cast(v.data as numeric)=Isnull(VE.Vertical_ID,0))
		   --and EXISTS (select Data from dbo.Split(@PsubVertical_ID, ',') S Where cast(S.data as numeric)=Isnull(VE.SubVertical_ID,0))
		   --and EXISTS (select Data from dbo.Split(@PDept_ID, ',') D Where cast(D.data as numeric)=Isnull(VE.Dept_ID,0))
		   
		   --Added By Jaina 3-10-2015 End
		   and Emp_ID = isnull(@Emp_ID ,Emp_ID)   
		      and Increment_Effective_Date <= @To_Date 
		      and 
                      ( (@From_Date  >= join_Date  and  @From_Date <= left_date )      
						or ( @To_Date  >= join_Date  and @To_Date <= left_date )      
						or (Left_date is null and @To_Date >= Join_Date)      
						or (@To_Date >= left_date  and  @From_Date <= left_date )						
						) 
						order by Emp_ID
						
			Delete From #Emp_Cons Where Increment_ID Not In
				(select TI.Increment_ID from t0095_increment TI WITH (NOLOCK) inner join
				(Select Max(Increment_Effective_Date) as Effective_Date,Emp_ID from T0095_Increment WITH (NOLOCK)
				Where Increment_effective_Date <= @to_date Group by emp_ID) new_inc
				on TI.Emp_ID = new_inc.Emp_ID and Ti.Increment_Effective_Date=new_inc.Effective_Date
				Where Increment_effective_Date <= @to_date)
  END
	
	IF OBJECT_ID('tempdb..#Claim') IS NOT NULL
	BEGIN
		DROP TABLE #Claim
	END
	IF OBJECT_ID('tempdb..#CLAIM_PAYMENT_PENDING') IS NOT NULL
	BEGIN
		DROP TABLE #CLAIM_PAYMENT_PENDING
	END
	
	
		
	CREATE TABLE #CLAIM_PAYMENT_PAID -- TABLE FOR PAYMENT PAID 
	(
		EMP_ID			NUMERIC(18,0),
		CLAIM_APR_ID	NUMERIC(18,0),
		CLAIM_PAY_ID    NUMERIC(18,0),
		CLAIM_PAYMENT_DATE        VARCHAR(MAX),
		FOR_DATE        VARCHAR(MAX),
		CLAIM_TYPE      VARCHAR(255),
		AMOUNT			VARCHAR(255),
		CLAIM_APPLICATION_AMOUNT NUMERIC(18,2),
		CLAIM_APR_DTL_ID NUMERIC(18,0),
		CLAIM_STATUS	VARCHAR(10),
		APPLICATION_CODE NVARCHAR(128),
		APPLICATION_DATE VARCHAR(128),
		APPROVAL_CODE NVARCHAR(128),
		APPROVAL_DATE VARCHAR(128),
					
	)
	CREATE table #CLAIM_PAYMENT_PENDING  -- TABLE FOR PAYMENT PENDING
	(
		EMP_ID			NUMERIC(18,0),
		CLAIM_APR_ID	NUMERIC(18,0),
		CLAIM_APP_ID    NUMERIC(18,0),
		APPLICATION_DATE        VARCHAR(MAX),
		FOR_DATE        VARCHAR(MAX),
		CLAIM_TYPE      VARCHAR(255),
		AMOUNT			VARCHAR(255),
		TOTALAMOUNT_ONE NUMERIC(18,2),
		CLAIM_APR_DTL_ID NUMERIC(18,0),
		CLAIM_STATUS	VARCHAR(10),
		
		APPLICATION_CODE NVARCHAR(128),
		APPROVAL_CODE NVARCHAR(128),
		APPROVAL_DATE VARCHAR(128)
	)
	
	IF OBJECT_ID('TEMPDB..#TOTAL_CLAIM') IS NOT NULL
	BEGIN
		DROP TABLE #TOTAL_CLAIM
	END
	IF OBJECT_ID('TEMPDB..#TOTAL_CLAIM_PAYMENT_PENDING') IS NOT NULL
	BEGIN
		DROP TABLE #TOTAL_CLAIM_PAYMENT_PENDING
	END
	
	CREATE TABLE #CLAIM_STATUS_DETAILS
	(
	 
	  EMP_CODE VARCHAR(50),
	  EMP_FULL_NAME VARCHAR(250),
	  FOR_DATE DATETIME,
	  BRANCH_NAME    VARCHAR(50)
	
	)
	CREATE TABLE #TOTAL_CLAIM_PAYMENT
	(
		CLAM_APR_ID_1   NUMERIC(18,0),
		EMP_ID			NUMERIC(18,0),
		CLAIM_APR_ID	NUMERIC(18,0),
		PAYMENT_DATE DATETIME,
		FOR_DATE		DATETIME,
		CLAIM_APR_DTL_ID NUMERIC(18,0),
		CLAIM_STATUS	VARCHAR(10),
		APPLICATION_CODE NVARCHAR(128),
		APPLICATION_DATE VARCHAR(128),
		APPROVAL_CODE NVARCHAR(128),
		APPROVAL_DATE VARCHAR(128)
	)
	
	CREATE TABLE #TOTAL_CLAIM_PAYMENT_PENDING
	(
		CLAM_APR_ID_1   NUMERIC(18,0),
		EMP_ID			NUMERIC(18,0),
		CLAIM_APR_ID	NUMERIC(18,0),
		APPLICATION_DATE		DATETIME,
		FOR_DATE		DATETIME,
		CLAIM_APR_DTL_ID NUMERIC(18,0),
		CLAIM_STATUS	VARCHAR(10),
		
		APPLICATION_CODE NVARCHAR(128),
		APPROVAL_CODE NVARCHAR(128),
		APPROVAL_DATE VARCHAR(128)
	)
	DECLARE @QUERYCLAIM NVARCHAR(MAX)
		
	IF (ISNULL(@STATUS,0) = 0)
		BEGIN

		    ---CA.CLAIM_APR_DATE,
			SELECT	EM.EMP_ID,EM.ALPHA_EMP_CODE,EM.EMP_FULL_NAME,EM.DEPT_ID,
			EM.EMP_LEFT,EM.BRANCH_ID,CM.CLAIM_APR_ID,CM.CMP_ID,CM.CLAIM_PAY_CODE,CM.CLAIM_PAY_AMOUNT,CM.CLAIM_PAY_COMMENTS,CM.CLAIM_PAYMENT_DATE,CM.CLAIM_PAYMENT_TYPE,CM.BANK_NAME,CM.CLAIM_CHEQUE_NO,CM.VOUCHER_DATE,CM.VOUCHER_NO,
			B.VERTICAL_ID,CPD.CLAIM_STATUS,CPD.CLAIM_ID,CPD.CLAIM_APR_DATE,CPD.CLAIM_PETROLKM,CPD.CLAIM_APR_AMNT,CPD.CLAIM_PURPOSE,CPD.CLAIM_APP_AMOUNT,CLMST.CLAIM_NAME,CM.CLAIM_PAY_ID,CPD.CLAIM_APR_DTL_ID,CAT.CLAIM_APP_CODE AS APPLICATION_CODE,CAT.CLAIM_APP_DATE AS APPLICATION_DATE,CA.CLAIM_APR_CODE AS APPROVAL_CODE,CA.CLAIM_APR_DATE AS APPROVAL_DATE
			INTO #TBL_PAYMENT_PAID_DATA
			FROM T0210_MONTHLY_CLAIM_PAYMENT CM WITH (NOLOCK) INNER JOIN
				 T0230_MONTHLY_CLAIM_PAYMENT_DETAIL CPD WITH (NOLOCK) ON CM.CLAIM_PAY_ID=CPD.CLAIM_PAY_ID AND CM.CMP_ID=CPD.CMP_ID INNER JOIN
				 T0080_EMP_MASTER EM WITH (NOLOCK) ON CPD.EMP_ID=EM.EMP_ID LEFT JOIN
				 T0120_CLAIM_APPROVAL CA WITH (NOLOCK) ON CA.CLAIM_APR_ID=CPD.CLAIM_APR_ID AND CA.EMP_ID=CPD.EMP_ID --AND CA.CLAIM_ID=CPD.CLAIM_ID
				 LEFT OUTER JOIN
				(
					SELECT	EMP_ID, BRANCH_ID, I.CMP_ID,I.VERTICAL_ID,I.SUBVERTICAL_ID
									FROM	T0095_INCREMENT I WITH (NOLOCK)
									WHERE	I.INCREMENT_ID =(
																SELECT	TOP 1 INCREMENT_ID
																FROM	T0095_INCREMENT I1 WITH (NOLOCK)
																WHERE	I1.EMP_ID=I.EMP_ID AND I1.CMP_ID=I.CMP_ID
																ORDER BY	INCREMENT_EFFECTIVE_DATE DESC, INCREMENT_ID DESC
															)
				) AS B ON B.EMP_ID = EM.EMP_ID AND B.CMP_ID=EM.CMP_ID
				INNER JOIN T0040_CLAIM_MASTER CLMST WITH (NOLOCK) ON CLMST.CLAIM_ID=CPD.CLAIM_ID
				LEFT OUTER JOIN T0100_CLAIM_APPLICATION CAT WITH (NOLOCK) ON CAT.CLAIM_APP_ID=CA.CLAIM_APP_ID AND CAT.EMP_ID=CA.EMP_ID --AND CAT.CLAIM_ID=CA.CLAIM_ID -- FOR TAKE CLAIM APPCODE 
				WHERE CM.CMP_ID=@CMP_ID AND CM.CLAIM_PAYMENT_DATE BETWEEN @FROM_DATE AND @TO_DATE
				AND EM.EMP_ID IN (SELECT EMP_ID FROM #EMP_CONS) AND CPD.CLAIM_STATUS=1
	
			
			
			-- CLAIM STATUS OF APPROVED AND REJECTED	
			--select clm.Claim_App_ID,clmpr.Claim_Apr_ID,clm.Claim_Apr_Date as for_date,clmpr.Claim_Apr_Comments,clm.Claim_Apr_Code,clm.Emp_ID,clmpr.Claim_Apr_By,
			--clmpr.Claim_Apr_Deduct_From_Sal,clm.Claim_Apr_Amount as TotalAmount,clm.Claim_Status,clm.Claim_ID,clm.Curr_ID,clm.Claim_Apr_Date,clmst.Claim_Name as Claim_type
			--,clm.Claim_Apr_Amount as Claim_apr_Amount,clm.Curr_Rate as Curr_Rate,clmpr.Claim_App_Date,
			--case when (cast(clmst.Desig_Wise_Limit AS varchar(5)) ='1' OR cast(clmst.Grade_Wise_Limit AS varchar(5)) ='1' OR cast(clmst.Branch_Wise_Limit AS varchar(5)) ='1') AND (cast(clmst.Claim_Type AS varchar(5)) ='1') then cast(cast(Clm.Claim_App_Amount as numeric(18,2)) as varchar(255)) + ' For ' + cast(cast(clm.Petrol_KM as numeric(18,2)) as varchar(255)) + ' KM' Else cast(cast(Clm.Claim_App_Amount as numeric(18,2)) as varchar(255)) End AS Claim_Amount,
			--clm.Claim_Apr_Amount as Application_Amount_one,	clm.Claim_App_Amount as Application_Amount,clm.Purpose AS Purpose ,cur.Curr_Name as Currency,clm.Claim_Apr_Dtl_ID,
			--clm.Petrol_KM
			--INTO #TBL_APPROVAL_STATUS
			--from 
			--T0120_CLAIM_APPROVAL clmpr 
			--inner join T0130_CLAIM_APPROVAL_DETAIL clm on clm.Cmp_ID=clmpr.Cmp_ID and clm.Claim_Apr_ID=clmpr.Claim_Apr_ID and clm.Emp_ID=clmpr.Emp_ID
			--inner join T0040_CLAIM_MASTER clmst on clmst.Claim_ID=clm.Claim_ID
			--left outer join T0040_CURRENCY_MASTER cur on clm.Curr_ID= cur.Curr_ID
			--where clm.Cmp_ID=@Cmp_ID and clmpr.Claim_Apr_Date between @From_Date and @To_Date
			--and clm.Emp_ID in (select Emp_ID from #Emp_Cons) and clm.Claim_Status IN (CASE WHEN @STATUS = 0 THEN 'A' WHEN @STATUS = 1 THEN 'R' ELSE 'P' END)
		END
	ELSE
		BEGIN 
			-- CLAIM STATUS FOR APPROVAL BUT PAYMENT IS PENDING
			
			
			
			SELECT CLM.CLAIM_APP_ID,CLMPR.CLAIM_APR_ID,CLM.CLAIM_APR_DATE AS FOR_DATE,CLMPR.CLAIM_APR_COMMENTS,CLMPR.CLAIM_APR_CODE,CLM.EMP_ID,CLMPR.CLAIM_APR_BY,
			CLMPR.CLAIM_APR_DEDUCT_FROM_SAL,CLM.CLAIM_APR_AMOUNT AS TOTALAMOUNT,CLM.CLAIM_STATUS,CLM.CLAIM_ID,CLM.CURR_ID,CLMST.CLAIM_NAME AS CLAIM_TYPE
			,CLM.CLAIM_APR_AMOUNT AS CLAIM_APR_AMOUNT,CLM.CURR_RATE AS CURR_RATE,CLMPR.CLAIM_APP_DATE,
			CASE WHEN (CAST(CLMST.DESIG_WISE_LIMIT AS VARCHAR(5)) ='1' OR CAST(CLMST.GRADE_WISE_LIMIT AS VARCHAR(5)) ='1' OR CAST(CLMST.BRANCH_WISE_LIMIT AS VARCHAR(5)) ='1') AND (CAST(CLMST.CLAIM_TYPE AS VARCHAR(5)) ='1') THEN CAST(CAST(CLM.CLAIM_APP_AMOUNT AS NUMERIC(18,2)) AS VARCHAR(255)) + ' FOR ' + CAST(CAST(CLM.PETROL_KM AS NUMERIC(18,2)) AS VARCHAR(255)) + ' KM' ELSE CAST(CAST(CLM.CLAIM_APP_AMOUNT AS NUMERIC(18,2)) AS VARCHAR(255)) END AS CLAIM_AMOUNT,
			CLM.CLAIM_APR_AMOUNT AS APPLICATION_AMOUNT_ONE,	CLM.CLAIM_APP_AMOUNT AS APPLICATION_AMOUNT,CLM.PURPOSE AS PURPOSE ,CUR.CURR_NAME AS CURRENCY,CLM.CLAIM_APR_DTL_ID,
			CLM.PETROL_KM,CLMPR.CLAIM_APR_DATE
			INTO #TBL_PAYMENT_PENDING_DATA
			FROM 
			T0120_CLAIM_APPROVAL CLMPR WITH (NOLOCK)
			INNER JOIN T0130_CLAIM_APPROVAL_DETAIL CLM WITH (NOLOCK) ON CLM.CMP_ID=CLMPR.CMP_ID AND CLM.CLAIM_APR_ID=CLMPR.CLAIM_APR_ID AND CLM.EMP_ID=CLMPR.EMP_ID
			INNER JOIN T0040_CLAIM_MASTER CLMST WITH (NOLOCK) ON CLMST.CLAIM_ID=CLM.CLAIM_ID
			LEFT OUTER JOIN T0040_CURRENCY_MASTER CUR WITH (NOLOCK) ON CLM.CURR_ID= CUR.CURR_ID
			--LEFT OUTER JOIN T0100_CLAIM_APPLICATION CAT ON CAT.CLAIM_APP_ID=CLMPR.CLAIM_APP_ID AND CAT.EMP_ID=CLMPR.EMP_ID --AND CAT.CLAIM_ID=CA.CLAIM_ID -- FOR TAKE CLAIM APPCODE 
			WHERE CLM.CMP_ID=@CMP_ID AND CLMPR.CLAIM_APR_DATE BETWEEN @FROM_DATE AND @TO_DATE
			AND CLM.EMP_ID IN (SELECT EMP_ID FROM #EMP_CONS) AND CLM.CLAIM_STATUS = 'A' 
			AND NOT EXISTS(SELECT 1 FROM T0210_MONTHLY_CLAIM_PAYMENT WITH (NOLOCK) WHERE CMP_ID=@CMP_ID AND CLAIM_APR_ID=CLMPR.CLAIM_APR_ID)
			 --SELECT	CLAIM_APP.CMP_ID,CLAIM_APP.EMP_ID,CLAIM_APP.CLAIM_APP_ID,CLAIM_APPDETAIL.FOR_DATE,CLMST.CLAIM_NAME,CLAIM_APPDETAIL.Claim_Amount AS CLAIM_APP_AMOUNT,'' AS APPLICATION_AMOUNT_ONE,
			 --CLAIM_APP_DETAIL_ID,CLAIM_APP.CLAIM_APP_STATUS,CLAIM_APPDETAIL.CURR_ID,CLAIM_APP.CLAIM_APP_DATE
			 --INTO #TBL_APPROVAL_STATUS_PEDNING
			 --FROM V0100_CLAIM_APPLICATION_NEW CLAIM_APP INNER JOIN T0110_CLAIM_APPLICATION_DETAIL CLAIM_APPDETAIL
			 --ON CLAIM_APP.CLAIM_APP_ID=CLAIM_APPDETAIL.CLAIM_APP_ID 
			 --INNER JOIN T0040_CLAIM_MASTER CLMST ON CLMST.CLAIM_ID=CLAIM_APPDETAIL.CLAIM_ID
			 --LEFT OUTER JOIN T0040_CURRENCY_MASTER CUR ON ISNULL(CLAIM_APPDETAIL.CURR_ID,0)= ISNULL(CUR.CURR_ID,0)
			 --WHERE CLAIM_APP.CMP_ID=@CMP_ID AND CLAIM_APPDETAIL.FOR_DATE BETWEEN @FROM_DATE AND @TO_DATE
			 --AND CLAIM_APP.EMP_ID IN (SELECT EMP_ID FROM #EMP_CONS) AND CLAIM_APP.CLAIM_APP_STATUS='P'
			
			
		END
	
	IF OBJECT_ID('TEMPDB..#TBL_PAYMENT_PENDING_DATA') IS NOT NULL
		BEGIN
			
			
			INSERT INTO #CLAIM_PAYMENT_PENDING
			SELECT EMP_ID,CLAIM_APR_ID,CLAIM_APP_ID,CLAIM_APP_DATE AS APPLICATION_DATE,FOR_DATE,CLAIM_TYPE,CLAIM_AMOUNT,APPLICATION_AMOUNT_ONE,CLAIM_APR_DTL_ID,CLAIM_STATUS
			,CLAIM_APR_CODE,CLAIM_APR_CODE,CLAIM_APR_DATE FROM #TBL_PAYMENT_PENDING_DATA --CTE WHERE  RANK = 1
			ORDER BY FOR_DATE, CLAIM_TYPE
			
			INSERT INTO #TOTAL_CLAIM_PAYMENT_PENDING
			SELECT ROW_NUMBER() OVER( ORDER BY EMP_ID,CLAIM_APP_ID), EMP_ID,CLAIM_APP_ID,APPLICATION_DATE,FOR_DATE,CLAIM_APR_DTL_ID,CLAIM_STATUS,APPLICATION_CODE,APPROVAL_CODE,APPROVAL_DATE FROM #CLAIM_PAYMENT_PENDING 			
			ORDER BY FOR_DATE, CLAIM_TYPE
			
			
		END
	ELSE
		BEGIN
			
			INSERT INTO #CLAIM_PAYMENT_PAID
			SELECT EMP_ID,CLAIM_APR_ID,CLAIM_PAY_ID,CLAIM_PAYMENT_DATE,CLAIM_APR_DATE AS FOR_DATE,CLAIM_NAME AS CLAIM_TYPE,CLAIM_APR_AMNT,CLAIM_APP_AMOUNT
			,CLAIM_APR_DTL_ID,CLAIM_STATUS,APPLICATION_CODE,APPLICATION_DATE,APPROVAL_CODE,APPROVAL_DATE FROM #TBL_PAYMENT_PAID_DATA
			ORDER BY CLAIM_PAYMENT_DATE, CLAIM_TYPE
			
			INSERT INTO #TOTAL_CLAIM_PAYMENT
			SELECT ROW_NUMBER() OVER( ORDER BY EMP_ID,CLAIM_APR_ID), EMP_ID,CLAIM_APR_ID,CLAIM_PAYMENT_DATE AS PAYMENT_DATE,FOR_DATE,CLAIM_APR_DTL_ID,CLAIM_STATUS,APPLICATION_CODE,APPLICATION_DATE,APPROVAL_CODE,APPROVAL_DATE FROM #CLAIM_PAYMENT_PAID 			
			ORDER BY FOR_DATE, CLAIM_TYPE
		END		
		
		DECLARE @CLAIM_NAME VARCHAR(255)
		DECLARE @VAL NVARCHAR(MAX)
		DECLARE @AD_NAME_DYN NVARCHAR(MAX)
		DECLARE @COLUMN NVARCHAR(MAX)
		SET @COLUMN =''
	
	
		IF (ISNULL(@STATUS,0)=0)
			BEGIN
					
					CREATE TABLE #NEW_TEMP
						(		
							FOR_DATE  DATETIME,
							EMP_ID  NUMERIC(18,0),
							LABEL_NAME  NVARCHAR(MAX),
							LABEL_AMOUNT  NUMERIC(18,2)
						)
						
					DECLARE CLAIM_CURSOR CURSOR FOR
					SELECT DISTINCT CLAIM_TYPE FROM #CLAIM_PAYMENT_PAID
					OPEN CLAIM_CURSOR		
					FETCH NEXT FROM CLAIM_CURSOR INTO @CLAIM_NAME
					WHILE @@FETCH_STATUS = 0
						BEGIN
							
							SET @CLAIM_NAME = REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(LTRIM(RTRIM(@CLAIM_NAME)),'+','_'),'''','_'),',','_'),'.','_'),'  ',' '),'%',''),'-',' '),'@',''),'(',''),')',''),' ','_'),'__','_'),'__','_'),'/','')
							SET @VAL = 'ALTER TABLE   #TOTAL_CLAIM_PAYMENT ADD ' + REPLACE(@CLAIM_NAME,' ','_') + ' VARCHAR(255) DEFAULT 0 NOT NULL'
							EXEC (@VAL)	
							SET @VAL = ''
							
							SET @COLUMN = @COLUMN +  REPLACE(RTRIM(LTRIM(@CLAIM_NAME)),' ','_') + '#'
							
							FETCH NEXT FROM CLAIM_CURSOR INTO @CLAIM_NAME
						END
					CLOSE CLAIM_CURSOR	
					DEALLOCATE CLAIM_CURSOR		
					
					
					DECLARE @CTC_COLUMNS NVARCHAR(100)
					DECLARE @CTC_AD_FLAG VARCHAR(1)
					DECLARE @ALLOW_AMOUNT VARCHAR(500)
					DECLARE @CLAIM_APR_AMOUNT NUMERIC(18,2)
					SET @CLAIM_APR_AMOUNT =0
					
					SET @VAL = 'ALTER TABLE   #TOTAL_CLAIM_PAYMENT ADD APPROVED_AMOUNT VARCHAR(255)'
					EXEC (@VAL);
					
					
									
						DECLARE @CLAIM_APR_ID AS NUMERIC(18,0)	
						DECLARE CLAIM_CURSOR CURSOR FOR
						SELECT DISTINCT CLAIM_APR_DTL_ID FROM #CLAIM_PAYMENT_PAID  
						OPEN CLAIM_CURSOR
						FETCH NEXT FROM CLAIM_CURSOR INTO @CLAIM_APR_ID
						WHILE @@FETCH_STATUS = 0
								BEGIN
										DECLARE CRU_COLUMNS CURSOR FOR
										SELECT DATA FROM SPLIT(@COLUMN,'#') WHERE DATA <> ''
											OPEN CRU_COLUMNS
											FETCH NEXT FROM CRU_COLUMNS INTO @CTC_COLUMNS
											WHILE @@FETCH_STATUS = 0
												BEGIN					
														
														BEGIN
																SET @CTC_COLUMNS = REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(LTRIM(RTRIM(@CTC_COLUMNS)),'+','_'),'''','_'),',','_'),'.','_'),'  ',' '),'%',''),'-',' '),'@',''),'(',''),')',''),' ','_'),'__','_'),'__','_')
																BEGIN 
																
																	SELECT @ALLOW_AMOUNT=ISNULL(CLAIM_APPLICATION_AMOUNT,0) FROM #CLAIM_PAYMENT_PAID  
																	WHERE  REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(LTRIM(RTRIM(CLAIM_TYPE)),'+','_'),'''','_'),',','_'),'.','_'),'  ',' '),'%',''),'-',' '),'@',''),'(',''),')',''),' ','_'),'__','_'),'__','_')  = @CTC_COLUMNS 
																	AND CLAIM_APR_DTL_ID= @CLAIM_APR_ID --AND CHARINDEX('FOR', ISNULL(AMOUNT,0)) = 0
																	SET @VAL = 	'UPDATE    #TOTAL_CLAIM_PAYMENT SET ' + @CTC_COLUMNS + ' =  ''' + CONVERT(NVARCHAR,ISNULL(@ALLOW_AMOUNT,0)) + ''' WHERE    #TOTAL_CLAIM_PAYMENT.CLAIM_APR_DTL_ID = ' + CONVERT(NVARCHAR,@CLAIM_APR_ID)
																	EXEC (@VAL)	
																
																END
																SET @ALLOW_AMOUNT = 0
														END
														
													FETCH NEXT FROM CRU_COLUMNS INTO @CTC_COLUMNS
												END
									CLOSE CRU_COLUMNS	
									DEALLOCATE CRU_COLUMNS	
									
										UPDATE  #TOTAL_CLAIM_PAYMENT SET APPROVED_AMOUNT = C.AMOUNT
										FROM  #TOTAL_CLAIM_PAYMENT TC 
										INNER JOIN 
										(
										   SELECT CLAIM_APR_DTL_ID, SUM(CAST(AMOUNT AS NUMERIC(18,0))) AS AMOUNT FROM #CLAIM_PAYMENT_PAID
										   GROUP BY CLAIM_APR_DTL_ID
										) C ON
										TC.CLAIM_APR_DTL_ID =C.CLAIM_APR_DTL_ID
										
										WHERE TC.CLAIM_APR_DTL_ID=@CLAIM_APR_ID	
										
										
																									
									FETCH NEXT FROM CLAIM_CURSOR INTO @CLAIM_APR_ID
								END
						CLOSE CLAIM_CURSOR	
						DEALLOCATE CLAIM_CURSOR			 

						
						SET @COLUMN = ' ' + @COLUMN
						SET  @COLUMN = REPLACE(@COLUMN,'#','# ')
						SET @COLUMN=@COLUMN+'APPROVED_AMOUNT'+'#'--+'PETROLKM'+'#'
						
						
						
						DECLARE @TABLE_NAME SYSNAME
						SELECT @TABLE_NAME = '#TOTAL_CLAIM_PAYMENT'
						DECLARE @QUERY AS NVARCHAR(MAX)
						SET @QUERY =''
						
						DROP TABLE MY_TEMP
						DECLARE @SQL NVARCHAR(MAX)
						SELECT @SQL = '
								SELECT EMP_ID,PAYMENT_DATE,FOR_DATE,CLAM_APR_ID_1 AS CLAIM_APR_ID,REIM_TYPE,AMOUNT,CLAIM_STATUS,APPLICATION_CODE,APPLICATION_DATE,APPROVAL_CODE,APPROVAL_DATE INTO MY_TEMP
								FROM ' + @table_name + ' 
								UNPIVOT (
									Amount FOR Reim_Type IN ( 
										' +  LEFT(replace(@Column,'#',','), LEN(replace(@Column,'#',','))-1)  + '
									) 
							 )  unpiv where Amount <> ''0.00'''
							 
						EXEC(@SQL);
						
						
						UPDATE MY_TEMP SET REIM_TYPE = ' ' + REIM_TYPE WHERE REIM_TYPE <>'APPROVED_AMOUNT'
						CREATE TABLE #TBL_CLAIM_PAYMENT_STATUS --#TBL_CLAIM_STATUS
						(
							SRNO NUMERIC,
							EMP_ID NUMERIC,
							ALPHA_EMP_CODE VARCHAR(128),
							EMP_FULL_NAME VARCHAR(250),
							BRANCH_NAME VARCHAR(128),
							DEPARTMENT VARCHAR(128),
							GRADE_NAME VARCHAR(128),
							DESIGNATION VARCHAR(128),
							CATEGORY VARCHAR(128),
							EMPLOYEE_TYPE VARCHAR(128),
							VERTICAL VARCHAR(128),
							
							APPLICATION_CODE NVARCHAR(128),
							APPLICATION_DATE VARCHAR(128),
							APPROVAL_CODE NVARCHAR(128),
							APPROVAL_DATE VARCHAR(128),
							PAYMENT_DATE VARCHAR(128),
							FOR_DATE VARCHAR(128)
																	
						)
						
						DECLARE @COLUMNNAME VARCHAR(MAX)
						SELECT @COLUMNNAME= ISNULL(@COLUMNNAME + ',','') 
							   + QUOTENAME(LTRIM(REIM_TYPE))
						FROM (SELECT DISTINCT REIM_TYPE FROM MY_TEMP WHERE REIM_TYPE <> 'PURPOSE' AND REIM_TYPE <> 'APPROVED_AMOUNT') AS REIM_TYPE
						  
						
						SELECT @QUERYCLAIM = COALESCE(@QUERYCLAIM + ';', '') + '
								ALTER TABLE #TBL_CLAIM_PAYMENT_STATUS ADD ' + DATA + ' NUMERIC(18,2) '
						FROM	DBO.SPLIT(@COLUMNNAME, ',') T
						
						EXEC(@QUERYCLAIM)
						
						
						ALTER TABLE #TBL_CLAIM_PAYMENT_STATUS ADD TOTAL_AMOUNT NUMERIC(18,2)
						ALTER TABLE #TBL_CLAIM_PAYMENT_STATUS ADD STATUS VARCHAR(16)
						
						SET @QUERYCLAIM ='	
						INSERT INTO #TBL_CLAIM_PAYMENT_STATUS(SRNO,EMP_ID,ALPHA_EMP_CODE,EMP_FULL_NAME,BRANCH_NAME,DEPARTMENT,GRADE_NAME,DESIGNATION,CATEGORY,EMPLOYEE_TYPE,VERTICAL,' + @COLUMNNAME + ',TOTAL_AMOUNT,STATUS,PAYMENT_DATE,FOR_DATE,APPLICATION_CODE,APPLICATION_DATE,APPROVAL_CODE,APPROVAL_DATE)
						SELECT ROW_NUMBER() OVER (PARTITION BY EMP_FULL_NAME ORDER BY FOR_DATE DESC ) AS SRNO,EMP_ID,ALPHA_EMP_CODE,
						 EMP_FULL_NAME,BRANCH_NAME,DEPARTMENT,GRADE_NAME,DESIGNATION,CATEGORY,EMPLOYEE_TYPE,VERTICAL,' + @COLUMNNAME + ',TOTAL_AMOUNT,STATUS,PAYMENT_DATE,FOR_DATE,APPLICATION_CODE,APPLICATION_DATE,APPROVAL_CODE,APPROVAL_DATE
						  FROM
						 (
											
								  SELECT   
								  --ROW_NUMBER() OVER (PARTITION BY E.EMP_FULL_NAME ORDER BY E.EMP_FULL_NAME DESC ) AS RANK,
								  E.EMP_ID,
								  E.ALPHA_EMP_CODE AS ALPHA_EMP_CODE,
								  E.EMP_FULL_NAME,
								  BM.BRANCH_NAME,    
								  DT.DEPT_NAME AS DEPARTMENT,  
								  LTRIM(C.REIM_TYPE)AS REIM_TYPE,
								  CONVERT(VARCHAR(11), C.PAYMENT_DATE,105)AS PAYMENT_DATE,
								  CONVERT(VARCHAR(11), C.FOR_DATE,105)AS FOR_DATE,
								  --C.FOR_DATE,
								  C.AMOUNT,
								  (GM.GRD_NAME)AS GRADE_NAME,
								  (DM.DESIG_NAME) AS DESIGNATION,
								  (CM.CAT_NAME) AS CATEGORY,
								  (TM.TYPE_NAME) AS EMPLOYEE_TYPE,
								  (TVS.VERTICAL_NAME) AS VERTICAL,
								  (CASE WHEN C.CLAIM_STATUS=''1'' THEN ''PAID'' ELSE ''PENDING'' END) AS STATUS,
								  APPLICATION_CODE,CONVERT(VARCHAR(11),CAST(C.APPLICATION_DATE AS DATETIME),105)AS APPLICATION_DATE,APPROVAL_CODE,
								  CONVERT(VARCHAR(11), CAST(C.APPROVAL_DATE AS DATETIME),105)AS APPROVAL_DATE,
								  AMOUNT1 AS TOTAL_AMOUNT
								  FROM MY_TEMP C INNER JOIN 			  
								   (
								   
									SELECT  EMP_ID,FOR_DATE,SUM(CAST(AMOUNT AS NUMERIC(18,2))) AS AMOUNT1 FROM MY_TEMP WHERE REIM_TYPE=''APPROVED_AMOUNT''
									GROUP BY EMP_ID,FOR_DATE) Q ON C.EMP_ID = Q.EMP_ID AND C.FOR_DATE=Q.FOR_DATE INNER JOIN
									DBO.T0080_EMP_MASTER E WITH (NOLOCK) ON C.EMP_ID = E.EMP_ID 
									INNER JOIN #EMP_CONS EC ON E.EMP_ID = EC.EMP_ID 
									INNER JOIN (		SELECT T0095_INCREMENT.EMP_ID, CAT_ID, GRD_ID, DEPT_ID, DESIG_ID, BRANCH_ID, TYPE_ID, BANK_ID, CURR_ID, WAGES_TYPE
														, SALARY_BASIS_ON, BASIC_SALARY, GROSS_SALARY, INC_BANK_AC_NO, EMP_OT, EMP_LATE_MARK, EMP_FULL_PF, EMP_PT, EMP_FIX_SALARY
														, EMP_PART_TIME, LATE_DEDU_TYPE, EMP_CHILDRAN, CENTER_ID
														, SALDATE_ID, SEGMENT_ID, VERTICAL_ID, SUBVERTICAL_ID, SUBBRANCH_ID	
														FROM T0095_INCREMENT WITH (NOLOCK)
														INNER JOIN (
														
																		SELECT MAX(I.INCREMENT_ID) AS INCREMENT_ID, I.EMP_ID 
																		FROM T0095_INCREMENT I WITH (NOLOCK)
																		INNER JOIN 
																		(
																		SELECT MAX(INCREMENT_EFFECTIVE_DATE) AS FOR_DATE, EMP_ID 
																		FROM T0095_INCREMENT  WITH (NOLOCK)
																		WHERE INCREMENT_EFFECTIVE_DATE <= '''+ CAST(@TO_DATE AS VARCHAR(11)) +''' AND CMP_ID = ''' + CAST(@CMP_ID AS VARCHAR(10)) + '''
																		GROUP BY EMP_ID
																		)I3 ON I.INCREMENT_EFFECTIVE_DATE=I3.FOR_DATE AND I.EMP_ID=I3.EMP_ID	
																		GROUP BY I.EMP_ID 
																		
																		
																	) QRY ON T0095_INCREMENT.EMP_ID = QRY.EMP_ID AND T0095_INCREMENT.Increment_ID = QRY.INCREMENT_ID  --INCREMENT_EFFECTIVE_DATE = QRY.FOR_DATE   
													WHERE CMP_ID = ''' + CAST(@CMP_ID AS VARCHAR(10)) + '''
												) INC_QRY ON E.EMP_ID = INC_QRY.EMP_ID 
									INNER JOIN T0010_COMPANY_MASTER COM WITH (NOLOCK) ON COM.CMP_ID = E.CMP_ID
									INNER JOIN T0040_GRADE_MASTER GM WITH (NOLOCK) ON INC_QRY.GRD_ID = GM.GRD_ID
									INNER JOIN T0030_BRANCH_MASTER BM WITH (NOLOCK) ON INC_QRY.BRANCH_ID = BM.BRANCH_ID
									INNER JOIN T0040_DESIGNATION_MASTER DM WITH (NOLOCK) ON INC_QRY.DESIG_ID = DM.DESIG_ID
									LEFT JOIN T0040_TYPE_MASTER TM WITH (NOLOCK) ON INC_QRY.TYPE_ID = TM.TYPE_ID
									LEFT JOIN T0030_CATEGORY_MASTER CM WITH (NOLOCK) ON INC_QRY.CAT_ID = CM.CAT_ID
									LEFT OUTER JOIN T0040_DEPARTMENT_MASTER DT WITH (NOLOCK) ON INC_QRY.DEPT_ID = DT.DEPT_ID
									LEFT OUTER JOIN T0040_VERTICAL_SEGMENT TVS WITH (NOLOCK) ON INC_QRY.VERTICAL_ID = TVS.VERTICAL_ID
									
									
						) QRY 
						
						PIVOT
						(
						  MAX(AMOUNT)
						  FOR REIM_TYPE IN (' + @COLUMNNAME + ')
						) PIV ORDER BY ALPHA_EMP_CODE,FOR_DATE DESC'
						
						EXEC (@QUERYCLAIM)
						
						------- DECLARATION ADDED ON 03052018 ------
						DECLARE @STRING_TOTAL_AMOUNT AS NVARCHAR(MAX)
						DECLARE @SUM_COLS_TOTAL_AMOUNT VARCHAR(MAX)
						DECLARE @QUERY_CLAIM_TOTAL_AMOUNT VARCHAR(MAX)
						CREATE TABLE #TABLE_PAYMENT_HEAD_TOTAL
						(
							SRNO INT,
							EMP_ID NUMERIC(18,0),
							TOTAL_AMOUNT NUMERIC(18,2)
						)
						
						-------- END ----------
						
							
						IF(ISNULL(@TYPE,0) = 1)
							BEGIN
								IF OBJECT_ID('TEMPDB..#TBL_CLAIM_PAYMENT_STATUS') IS NOT NULL
										BEGIN
											UPDATE	T	
											SET		T.EMP_FULL_NAME = (CASE WHEN B.SRNO = 1 THEN B.EMP_FULL_NAME ELSE NULL END),
													T.ALPHA_EMP_CODE = (CASE WHEN B.SRNO = 1 THEN B.ALPHA_EMP_CODE ELSE NULL END),
													T.BRANCH_NAME = (CASE WHEN B.SRNO = 1 THEN B.BRANCH_NAME ELSE NULL END),
													T.DEPARTMENT = (CASE WHEN B.SRNO = 1 THEN B.DEPARTMENT ELSE NULL END),
													T.GRADE_NAME = (CASE WHEN B.SRNO = 1 THEN B.GRADE_NAME ELSE NULL END),
													T.DESIGNATION = (CASE WHEN B.SRNO = 1 THEN B.DESIGNATION ELSE NULL END),
													T.EMPLOYEE_TYPE = (CASE WHEN B.SRNO = 1 THEN B.EMPLOYEE_TYPE ELSE NULL END),
													T.CATEGORY = (CASE WHEN B.SRNO = 1 THEN B.CATEGORY ELSE NULL END),
													T.VERTICAL = (CASE WHEN B.SRNO = 1 THEN B.VERTICAL ELSE NULL END)
											FROM	#TBL_CLAIM_PAYMENT_STATUS T 
													INNER JOIN	(
																	SELECT	B.SRNO,B.EMP_ID,B.ALPHA_EMP_CODE,B.EMP_FULL_NAME,B.BRANCH_NAME,B.DEPARTMENT,B.GRADE_NAME,B.DESIGNATION,B.EMPLOYEE_TYPE,B.VERTICAL,B.CATEGORY,PAYMENT_DATE,FOR_DATE
																	FROM	#TBL_CLAIM_PAYMENT_STATUS B
																	
																) B ON T.EMP_ID=B.EMP_ID AND T.FOR_DATE=B.FOR_DATE	
											
											
											------------ ADDED ON 03052018 ----------------
											
											SET @STRING_TOTAL_AMOUNT = 'INSERT INTO #TABLE_PAYMENT_HEAD_TOTAL SELECT (ISNULL(MAX(SRNO),0)+1),EMP_ID AS EMP_ID,SUM(TOTAL_AMOUNT)AS TOTAL_AMOUNT FROM #TBL_CLAIM_PAYMENT_STATUS GROUP BY EMP_ID'
											EXEC(@STRING_TOTAL_AMOUNT)
											
											SET @STRING_TOTAL_AMOUNT = 'INSERT INTO #TABLE_PAYMENT_HEAD_TOTAL SELECT 999999,(ISNULL(MAX(EMP_ID),0)+1) AS EMP_ID,SUM(TOTAL_AMOUNT)AS TOTAL_AMOUNT FROM #TBL_CLAIM_PAYMENT_STATUS'
											EXEC(@STRING_TOTAL_AMOUNT)
											
																						
											SELECT @SUM_COLS_TOTAL_AMOUNT  = COALESCE(@SUM_COLS_TOTAL_AMOUNT + ',', '') + '0 AS ' +DATA
											FROM	dbo.Split(@COLUMNNAME, ',') T 
											SET @QUERY_CLAIM_TOTAL_AMOUNT ='SELECT SRNO,EMP_ID,'''' AS ALPHA_EMP_CODE,
											(CASE WHEN SRNO=999999 THEN ''TOTAL'' ELSE ''SUBTOTAL'' END) AS EMP_FULL_NAME,'''' AS BRANCH_NAME,'''' AS DEPARTMENT, '''' AS GRADE_NAME,'''' AS DESIGNATION,'''' AS CATEGORY,'''' AS EMPLOYEE_TYPE,'''' AS VERTICAL,
											'''' AS APPLICATION_CODE,'''' AS APPLICATION_DATE,'''' AS APPROVAL_CODE,'''' AS APPROVAL_DATE,'''' AS PAYMENT_DATE,'''' AS DATE
											,' + @SUM_COLS_TOTAL_AMOUNT + ',TOTAL_AMOUNT,(CASE WHEN A.SRNO = 999999 THEN ''#008000,#A9A9A9'' ELSE ''#A9A9A9,#ccc'' END) AS STATUS FROM #TABLE_PAYMENT_HEAD_TOTAL A'
											
											INSERT INTO #TBL_CLAIM_PAYMENT_STATUS
											EXEC (@QUERY_CLAIM_TOTAL_AMOUNT)
											
											
											---------------- END --------------
											SELECT * FROM #TBL_CLAIM_PAYMENT_STATUS ORDER BY EMP_ID,SRNO
											DROP TABLE #TBL_CLAIM_PAYMENT_STATUS
										END
									ELSE
										BEGIN
													RAISERROR('@@RECORDS NOT EXIST !!!@@',16,2)
										END
							END
						ELSE
							BEGIN
										
								--IF OBJECT_ID('TEMPDB..#TBL_CLAIM_STATUS') IS NOT NULL
								--	BEGIN
										
								--		--UPDATE	T	
								--		--SET		T.EMP_FULL_NAME = (CASE WHEN B.SRNO = 1 THEN B.EMP_FULL_NAME ELSE NULL END),
								--		--		T.ALPHA_EMP_CODE = (CASE WHEN B.SRNO = 1 THEN B.ALPHA_EMP_CODE ELSE NULL END),
								--		--		--T.BRANCH_NAME = (CASE WHEN B.SRNO = 1 THEN B.BRANCH_NAME ELSE NULL END),
								--		--		--T.DEPARTMENT = (CASE WHEN B.SRNO = 1 THEN B.DEPARTMENT ELSE NULL END),
								--		--		T.EMP_ID = (CASE WHEN B.SRNO = 1 THEN B.EMP_ID ELSE 0 END)
								--		--FROM	#TBL_CLAIM_STATUS T 
								--		--		INNER JOIN	(
								--		--						SELECT	B.SRNO,B.EMP_ID,B.ALPHA_EMP_CODE,B.EMP_FULL_NAME,B.BRANCH_NAME,B.DEPARTMENT,FOR_DATE
								--		--						FROM	#TBL_CLAIM_STATUS B
																
								--		--					) B ON T.EMP_ID=B.EMP_ID AND T.FOR_DATE=B.FOR_DATE	
										
								--	END
									
								DECLARE @AVG_EMP NUMERIC(18,1)
								SET @AVG_EMP = DATEDIFF(MM,@FROM_DATE,@TO_DATE) + 1
								DECLARE @STRING AS VARCHAR(MAX)
								SET @STRING=''
								
								DECLARE @SUM_COLS VARCHAR(MAX)
								
								SELECT @SUM_COLS  = COALESCE(@SUM_COLS + ',', '') + 'SUM(' + DATA + ') AS ' +DATA
								FROM	dbo.Split(@COLUMNNAME, ',') T 
								
								
								--- ADDED ON 03052018 FOR TOTAL HEAD COUNT COLUMN ---
								DECLARE @SUM_COLS_HEAD VARCHAR(MAX)
								SELECT @SUM_COLS_HEAD  = COALESCE(@SUM_COLS_HEAD + '+', '') +  DATA
								FROM	dbo.Split(@COLUMNNAME, ',') T 
								
								DECLARE @SUM_COLS_SINGLE VARCHAR(MAX)
								SELECT @SUM_COLS_SINGLE  = COALESCE(@SUM_COLS_SINGLE + ',', '') +  DATA
								FROM	dbo.Split(@COLUMNNAME, ',') T 
								--- END ---
								
								SELECT * 
								INTO #TBL_SUMMARY FROM #TBL_CLAIM_PAYMENT_STATUS
								TRUNCATE TABLE #TBL_CLAIM_PAYMENT_STATUS
								
								SET @STRING = '	SELECT ROW_NUMBER() OVER (ORDER BY CM.EMP_FULL_NAME)  AS SRNO,CM.EMP_ID,ALPHA_EMP_CODE,CM.EMP_FULL_NAME AS EMP_FULL_NAME,CM.BRANCH_NAME,CM.DEPARTMENT,CM.GRADE_NAME,
												CM.DESIGNATION,CM.CATEGORY,CM.EMPLOYEE_TYPE,VERTICAL,'''' AS APPLICATION_CODE,'''' AS APPLICATION_DATE,'''' AS APPROVAL_CODE,'''' AS APPROVAL_DATE,'''' AS PAYMENT_DATE,'''' AS FOR_DATE, ' + @SUM_COLS + ',SUM('+ @SUM_COLS_HEAD + ') AS TOTAL_AMOUNT,CM.STATUS
												FROM	(SELECT EMP_ID,ALPHA_EMP_CODE,EMP_FULL_NAME,BRANCH_NAME,DEPARTMENT,GRADE_NAME,DESIGNATION,CATEGORY,EMPLOYEE_TYPE,VERTICAL,'''' AS APPLICATION_CODE,'''' AS APPLICATION_DATE,'''' AS APPROVAL_CODE,'''' AS APPROVAL_DATE,'''' AS PAYMENT_DATE,'''' AS FOR_DATE,STATUS,' + @SUM_COLS + ' FROM #TBL_SUMMARY CM  GROUP BY EMP_ID,ALPHA_EMP_CODE,EMP_FULL_NAME,BRANCH_NAME,DEPARTMENT,GRADE_NAME,DESIGNATION,CATEGORY,EMPLOYEE_TYPE,VERTICAL,APPLICATION_CODE,APPLICATION_DATE,APPROVAL_CODE,APPROVAL_DATE,PAYMENT_DATE,FOR_DATE,STATUS) CM
												GROUP BY CM.EMP_ID,CM.ALPHA_EMP_CODE,CM.EMP_FULL_NAME,CM.BRANCH_NAME,CM.DEPARTMENT,CM.GRADE_NAME,CM.DESIGNATION,CM.CATEGORY,CM.EMPLOYEE_TYPE,CM.VERTICAL,CM.APPLICATION_CODE,CM.APPLICATION_DATE,CM.APPROVAL_CODE,CM.APPROVAL_DATE,CM.PAYMENT_DATE,CM.FOR_DATE,CM.STATUS'
								
								INSERT INTO #TBL_CLAIM_PAYMENT_STATUS
								EXEC(@STRING)
								
								SET @STRING_TOTAL_AMOUNT = 'INSERT INTO #TABLE_PAYMENT_HEAD_TOTAL SELECT 999999,(ISNULL(MAX(EMP_ID),0)+1) AS EMP_ID,SUM(TOTAL_AMOUNT)AS TOTAL_AMOUNT FROM #TBL_CLAIM_PAYMENT_STATUS'
								EXEC(@STRING_TOTAL_AMOUNT)
															
																	
								SELECT @SUM_COLS_TOTAL_AMOUNT  = COALESCE(@SUM_COLS_TOTAL_AMOUNT + ',', '') + '0 AS ' +DATA
								FROM	dbo.Split(@COLUMNNAME, ',') T 
								SET @QUERY_CLAIM_TOTAL_AMOUNT ='SELECT SRNO,EMP_ID,'''' AS ALPHA_EMP_CODE,
								(CASE WHEN SRNO=999999 THEN ''TOTAL'' ELSE ''SUBTOTAL'' END) AS EMP_FULL_NAME,'''' AS BRANCH_NAME,'''' AS DEPARTMENT, '''' AS GRADE_NAME,'''' AS DESIGNATION,'''' AS CATEGORY,'''' AS EMPLOYEE_TYPE,'''' AS VERTICAL,
								'''' AS APPLICATION_CODE,'''' AS APPLICATION_DATE,'''' AS APPROVAL_CODE,'''' AS APPROVAL_DATE,'''' AS PAYMENT_DATE,'''' AS DATE
								,' + @SUM_COLS_TOTAL_AMOUNT + ',TOTAL_AMOUNT,(CASE WHEN A.SRNO = 999999 THEN ''#008000,#A9A9A9'' ELSE ''#A9A9A9,#ccc'' END) AS STATUS FROM #TABLE_PAYMENT_HEAD_TOTAL A'
								
								INSERT INTO #TBL_CLAIM_PAYMENT_STATUS
								EXEC (@QUERY_CLAIM_TOTAL_AMOUNT)
						
								
								SET @STRING = 'SELECT CM.SRNO,CM.ALPHA_EMP_CODE,CM.EMP_FULL_NAME AS EMP_FULL_NAME,CM.BRANCH_NAME,CM.DEPARTMENT,CM.GRADE_NAME,
												CM.DESIGNATION,CM.CATEGORY,CM.EMPLOYEE_TYPE,CM.VERTICAL,' + @SUM_COLS_SINGLE + ',CM.TOTAL_AMOUNT,CM.STATUS
												FROM #TBL_CLAIM_PAYMENT_STATUS CM'
								
								EXEC(@STRING)		
								
								
								--SET @STRING = 'SELECT 0 AS FLAG, ROW_NUMBER() OVER (ORDER BY CM.EMP_FULL_NAME) AS ROW_ID,CM.EMP_FULL_NAME AS EMP_FULL_NAME,CM.BRANCH_NAME,CM.GRADE_NAME,
								--				CM.DESIGNATION,CM.CATEGORY,CM.EMPLOYEE_TYPE,CM.PAYMENT_DATE,' + @SUM_COLS + ',CM.STATUS
								--				FROM	(SELECT EMP_ID,EMP_FULL_NAME,BRANCH_NAME,GRADE_NAME,DESIGNATION,CATEGORY,EMPLOYEE_TYPE,PAYMENT_DATE,STATUS,' + @SUM_COLS + ' FROM #TBL_CLAIM_PAYMENT_STATUS CM  GROUP BY EMP_ID,EMP_FULL_NAME,BRANCH_NAME,GRADE_NAME,DESIGNATION,CATEGORY,EMPLOYEE_TYPE,PAYMENT_DATE,STATUS) CM
								--				GROUP BY CM.EMP_FULL_NAME,CM.BRANCH_NAME,CM.GRADE_NAME,CM.DESIGNATION,CM.CATEGORY,CM.EMPLOYEE_TYPE,CM.PAYMENT_DATE,CM.STATUS'
												
								
								--EXEC(@STRING)
								
								
								--SELECT * FROM #TBL_CLAIM_STATUS
								
								
								
							END
			
			
			
		END
		ELSE
			BEGIN	
					
					
					--CREATE TABLE #NEW_TEMP_PENDING
					--(		
					--	for_date  datetime,
					--	Emp_ID  numeric(18,0),
					--	Label_name  nvarchar(max),
					--	Label_Amount  numeric(18,2)
					--)
					DECLARE CLAIM_CURSOR CURSOR FOR
					SELECT DISTINCT CLAIM_TYPE FROM #CLAIM_PAYMENT_PENDING
					OPEN CLAIM_CURSOR		
					FETCH NEXT FROM CLAIM_CURSOR INTO @CLAIM_NAME
					WHILE @@FETCH_STATUS = 0
						BEGIN
							
							SET @CLAIM_NAME = REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(LTRIM(RTRIM(@CLAIM_NAME)),'+','_'),'''','_'),',','_'),'.','_'),'  ',' '),'%',''),'-',' '),'@',''),'(',''),')',''),' ','_'),'__','_'),'__','_'),'/','')
							SET @VAL = 'ALTER TABLE   #TOTAL_CLAIM_PAYMENT_PENDING ADD ' + REPLACE(@CLAIM_NAME,' ','_') + ' VARCHAR(255) DEFAULT 0 NOT NULL'
							EXEC (@VAL)	
							SET @VAL = ''
							SET @COLUMN = @COLUMN +  REPLACE(RTRIM(LTRIM(@CLAIM_NAME)),' ','_') + '#'
							FETCH NEXT FROM CLAIM_CURSOR INTO @CLAIM_NAME
						END
					CLOSE CLAIM_CURSOR	
					DEALLOCATE CLAIM_CURSOR		
					
					DECLARE @CTC_COLUMNS_PENDING NVARCHAR(100)
					DECLARE @CTC_AD_FLAG_PENDING VARCHAR(1)
					DECLARE @ALLOW_AMOUNT_PENDING VARCHAR(500)--NUMERIC(18,2)
					DECLARE @CLAIM_APR_AMOUNT_PENDING NUMERIC(18,2)
					SET @CLAIM_APR_AMOUNT_PENDING =0
					
						SET @VAL = 'ALTER TABLE   #TOTAL_CLAIM_PAYMENT_PENDING ADD APPROVED_AMOUNT VARCHAR(255)'
						EXEC (@VAL);
					
						
						DECLARE @CLAIM_APR_ID_PENDING AS NUMERIC(18,0)	
						DECLARE CLAIM_CURSOR CURSOR FOR
						SELECT DISTINCT CLAIM_APR_DTL_ID FROM #CLAIM_PAYMENT_PENDING  
						OPEN CLAIM_CURSOR
						FETCH NEXT FROM CLAIM_CURSOR INTO @CLAIM_APR_ID
						WHILE @@FETCH_STATUS = 0
								BEGIN
										DECLARE CRU_COLUMNS CURSOR FOR
										SELECT DATA FROM SPLIT(@COLUMN,'#') WHERE DATA <> ''
											OPEN CRU_COLUMNS
											FETCH NEXT FROM CRU_COLUMNS INTO @CTC_COLUMNS_PENDING
											WHILE @@FETCH_STATUS = 0
												BEGIN					
														BEGIN
															SET @CTC_COLUMNS_PENDING = REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(LTRIM(RTRIM(@CTC_COLUMNS_PENDING)),'+','_'),'''','_'),',','_'),'.','_'),'  ',' '),'%',''),'-',' '),'@',''),'(',''),')',''),' ','_'),'__','_'),'__','_')
															BEGIN 
															
																SELECT @ALLOW_AMOUNT_PENDING=ISNULL(AMOUNT,0) FROM #CLAIM_PAYMENT_PENDING 
																WHERE  REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(LTRIM(RTRIM(CLAIM_TYPE)),'+','_'),'''','_'),',','_'),'.','_'),'  ',' '),'%',''),'-',' '),'@',''),'(',''),')',''),' ','_'),'__','_'),'__','_')  = @CTC_COLUMNS_PENDING 
																AND CLAIM_APR_DTL_ID= @CLAIM_APR_ID 
																
																SET @VAL = 	'UPDATE    #TOTAL_CLAIM_PAYMENT_PENDING SET ' + @CTC_COLUMNS_PENDING + ' =  ''' + CONVERT(NVARCHAR,ISNULL(@ALLOW_AMOUNT_PENDING,0)) + ''' WHERE    #TOTAL_CLAIM_PAYMENT_PENDING.CLAIM_APR_DTL_ID = ' + CONVERT(NVARCHAR,@CLAIM_APR_ID)
																EXEC (@VAL)	
																
															END	
															SET @ALLOW_AMOUNT_PENDING = 0
														END
														
													FETCH NEXT FROM CRU_COLUMNS INTO @CTC_COLUMNS_PENDING
												END
									CLOSE CRU_COLUMNS	
									DEALLOCATE CRU_COLUMNS		
										
										 UPDATE  #TOTAL_CLAIM_PAYMENT_PENDING SET APPROVED_AMOUNT = C.AMOUNT
										 FROM  #TOTAL_CLAIM_PAYMENT_PENDING TC INNER JOIN 
											(	
												SELECT CLAIM_APR_DTL_ID, SUM(TOTALAMOUNT_ONE) AS AMOUNT FROM #CLAIM_PAYMENT_PENDING
												GROUP BY CLAIM_APR_DTL_ID
											) C ON TC.CLAIM_APR_DTL_ID =C.CLAIM_APR_DTL_ID
										
										WHERE TC.CLAIM_APR_DTL_ID=@CLAIM_APR_ID	
																							
									FETCH NEXT FROM CLAIM_CURSOR INTO @CLAIM_APR_ID
								END
						CLOSE CLAIM_CURSOR	
						DEALLOCATE CLAIM_CURSOR			 
					
						
						SET @COLUMN = ' ' + @COLUMN
						SET  @COLUMN = REPLACE(@COLUMN,'#','# ')
						SET @COLUMN=@COLUMN+'APPROVED_AMOUNT'+'#'--+'PETROLKM'+'#'
						
						 
						DECLARE @TABLE_NAME_PENDING SYSNAME
						SELECT @TABLE_NAME_PENDING = '#TOTAL_CLAIM_PAYMENT_PENDING'
						DECLARE @QUERY_PENDING AS NVARCHAR(MAX)
						SET @QUERY_PENDING =''
						
						DROP TABLE MY_TEMP
						DECLARE @SQL_PENDING NVARCHAR(MAX)
						SELECT @SQL_PENDING = '
								SELECT EMP_ID,APPLICATION_DATE,FOR_DATE,CLAM_APR_ID_1 AS CLAIM_APR_ID,REIM_TYPE,AMOUNT,CLAIM_STATUS,APPLICATION_CODE,APPROVAL_CODE,APPROVAL_DATE INTO MY_TEMP
								FROM ' + @TABLE_NAME_PENDING + ' 
								UNPIVOT (
									Amount FOR Reim_Type IN ( 
										' +  LEFT(replace(@Column,'#',','), LEN(replace(@Column,'#',','))-1)  + '
									) 
							 )  unpiv where Amount <> ''0.00'''
						EXEC(@SQL_PENDING);
						
					
						UPDATE MY_TEMP SET REIM_TYPE = ' ' + REIM_TYPE WHERE REIM_TYPE <>'APPROVED_AMOUNT'
						
						
						CREATE TABLE #TBL_CLAIM_STATUS_PENDING
						(
							SRNO NUMERIC,
							EMP_ID NUMERIC,
							ALPHA_EMP_CODE VARCHAR(128),
							EMP_FULL_NAME VARCHAR(250),
							BRANCH_NAME VARCHAR(128),
							DEPARTMENT VARCHAR(128),
							GRADE_NAME VARCHAR(128),
							DESIGNATION VARCHAR(128),
							CATEGORY VARCHAR(128),
							EMPLOYEE_TYPE VARCHAR(128),
							VERTICAL VARCHAR(128),
							APPLICATION_CODE VARCHAR(128),
							APPLICATION_DATE VARCHAR(128),
							APPROVAL_CODE NVARCHAR(128),
							APPROVAL_DATE VARCHAR(128),
							FOR_DATE VARCHAR(128)
													
						)
						
						
						DECLARE @COLUMNNAME_PENDING VARCHAR(MAX)
						SELECT @COLUMNNAME_PENDING= ISNULL(@COLUMNNAME_PENDING + ',','') 
							   + QUOTENAME(LTRIM(REIM_TYPE))
						FROM (SELECT DISTINCT REIM_TYPE FROM MY_TEMP WHERE REIM_TYPE <> 'PURPOSE' AND REIM_TYPE <> 'APPROVED_AMOUNT') AS REIM_TYPE
					  
						 
						SELECT @QUERYCLAIM = COALESCE(@QUERYCLAIM + ';', '') + '
								ALTER TABLE #TBL_CLAIM_STATUS_PENDING ADD ' + DATA + ' NUMERIC(18,2) '
						FROM	dbo.Split(@COLUMNNAME_PENDING, ',') T
						
						EXEC(@QUERYCLAIM)
						
						ALTER TABLE #TBL_CLAIM_STATUS_PENDING ADD TOTAL_AMOUNT NUMERIC(18,2)
						ALTER TABLE #TBL_CLAIM_STATUS_PENDING ADD STATUS VARCHAR(16)
							
						
						
						SET @QUERYCLAIM ='INSERT INTO #TBL_CLAIM_STATUS_PENDING(SRNO,EMP_ID,ALPHA_EMP_CODE,EMP_FULL_NAME,BRANCH_NAME,DEPARTMENT,GRADE_NAME,DESIGNATION,CATEGORY,EMPLOYEE_TYPE,VERTICAL,APPLICATION_CODE,APPLICATION_DATE,APPROVAL_CODE,APPROVAL_DATE,FOR_DATE,' + @COLUMNNAME_PENDING + ',
						TOTAL_AMOUNT,STATUS)
						SELECT ROW_NUMBER() OVER (PARTITION BY EMP_FULL_NAME ORDER BY FOR_DATE DESC ) AS SRNO,EMP_ID,ALPHA_EMP_CODE,
						EMP_FULL_NAME,BRANCH_NAME,DEPARTMENT,GRADE_NAME,DESIGNATION,CATEGORY,EMPLOYEE_TYPE,VERTICAL,APPROVAL_CODE,APPLICATION_DATE,APPROVAL_CODE,APPROVAL_DATE,FOR_DATE,
						 ' + @COLUMNNAME_PENDING + ',TOTAL_AMOUNT,STATUS
						  FROM
						 (
											
								  SELECT   
								  --ROW_NUMBER() OVER (PARTITION BY E.EMP_FULL_NAME ORDER BY E.EMP_FULL_NAME DESC ) AS RANK,
								  E.EMP_ID,
								  E.ALPHA_EMP_CODE AS ALPHA_EMP_CODE,
								  E.EMP_FULL_NAME,
								  BM.BRANCH_NAME,    
								  DT.DEPT_NAME AS DEPARTMENT,  
								  (GM.GRD_NAME)AS GRADE_NAME,
								  (DM.DESIG_NAME) AS DESIGNATION,
								  (CM.CAT_NAME) AS CATEGORY,
								  (TM.TYPE_NAME) AS EMPLOYEE_TYPE,
								  (TVS.VERTICAL_NAME) AS VERTICAL,
								  LTRIM(C.REIM_TYPE)AS REIM_TYPE,
								  CONVERT(VARCHAR(11), C.APPLICATION_DATE,105)AS APPLICATION_DATE,
								  CONVERT(VARCHAR(11), C.FOR_DATE,105)AS FOR_DATE,
								  C.AMOUNT,
								  (CASE WHEN C.CLAIM_STATUS=''P'' THEN ''PENDING'' ELSE ''PENDING'' END) AS STATUS
								  ,AMOUNT1 AS TOTAL_AMOUNT
								  ,C.APPROVAL_CODE
								  ,CONVERT(VARCHAR(11), CAST(C.APPROVAL_DATE AS DATETIME),105)AS APPROVAL_DATE
								  FROM MY_TEMP C INNER JOIN 			  
								   (
								    --CLAIM_APR_ID,
									SELECT  EMP_ID,FOR_DATE,SUM(CAST(AMOUNT AS NUMERIC(18,2))) AS AMOUNT1 FROM MY_TEMP WHERE REIM_TYPE=''APPROVED_AMOUNT''
									GROUP BY EMP_ID,FOR_DATE) Q ON C.EMP_ID = Q.EMP_ID AND C.FOR_DATE=Q.FOR_DATE INNER JOIN
									DBO.T0080_EMP_MASTER E WITH (NOLOCK) ON C.EMP_ID = E.EMP_ID 
									INNER JOIN #EMP_CONS EC ON E.EMP_ID = EC.EMP_ID 
									INNER JOIN (		SELECT T0095_INCREMENT.EMP_ID, CAT_ID, GRD_ID, DEPT_ID, DESIG_ID, BRANCH_ID, TYPE_ID, BANK_ID, CURR_ID, WAGES_TYPE
														, SALARY_BASIS_ON, BASIC_SALARY, GROSS_SALARY, INC_BANK_AC_NO, EMP_OT, EMP_LATE_MARK, EMP_FULL_PF, EMP_PT, EMP_FIX_SALARY
														, EMP_PART_TIME, LATE_DEDU_TYPE, EMP_CHILDRAN, CENTER_ID
														, SALDATE_ID, SEGMENT_ID, VERTICAL_ID, SUBVERTICAL_ID, SUBBRANCH_ID	
														FROM T0095_INCREMENT WITH (NOLOCK)
														INNER JOIN (
														
																		--SELECT MAX(INCREMENT_EFFECTIVE_DATE) AS FOR_DATE, EMP_ID 
																		--FROM T0095_INCREMENT  WITH (NOLOCK)
																		--WHERE INCREMENT_EFFECTIVE_DATE <= '''+ CAST(@TO_DATE AS VARCHAR(11)) +''' AND CMP_ID = ''' + CAST(@CMP_ID AS VARCHAR(10)) + '''
																		--GROUP BY EMP_ID
																		
																		SELECT MAX(I.INCREMENT_ID) AS INCREMENT_ID, I.EMP_ID 
																		FROM T0095_INCREMENT I WITH (NOLOCK)
																		INNER JOIN 
																		(
																		SELECT MAX(INCREMENT_EFFECTIVE_DATE) AS FOR_DATE, EMP_ID 
																		FROM T0095_INCREMENT  WITH (NOLOCK)
																		WHERE INCREMENT_EFFECTIVE_DATE <= '''+ CAST(@TO_DATE AS VARCHAR(11)) +''' AND CMP_ID = ''' + CAST(@CMP_ID AS VARCHAR(10)) + '''
																		GROUP BY EMP_ID
																		)I3 ON I.INCREMENT_EFFECTIVE_DATE=I3.FOR_DATE AND I.EMP_ID=I3.EMP_ID	
																		GROUP BY I.EMP_ID 
																		
																		
																	) QRY ON T0095_INCREMENT.EMP_ID = QRY.EMP_ID AND T0095_INCREMENT.INCREMENT_ID = QRY.INCREMENT_ID --INCREMENT_EFFECTIVE_DATE = QRY.FOR_DATE   
													WHERE CMP_ID = ''' + CAST(@CMP_ID AS VARCHAR(10)) + '''
												) INC_QRY ON E.EMP_ID = INC_QRY.EMP_ID 
									INNER JOIN T0010_COMPANY_MASTER COM WITH (NOLOCK) ON COM.CMP_ID = E.CMP_ID
									INNER JOIN T0040_GRADE_MASTER GM WITH (NOLOCK) ON INC_QRY.GRD_ID = GM.GRD_ID
									INNER JOIN T0030_BRANCH_MASTER BM WITH (NOLOCK) ON INC_QRY.BRANCH_ID = BM.BRANCH_ID
									INNER JOIN T0040_DESIGNATION_MASTER DM WITH (NOLOCK) ON INC_QRY.DESIG_ID = DM.DESIG_ID	
									LEFT JOIN T0040_TYPE_MASTER TM WITH (NOLOCK) ON INC_QRY.TYPE_ID = TM.TYPE_ID			
									LEFT JOIN T0030_CATEGORY_MASTER CM WITH (NOLOCK) ON INC_QRY.CAT_ID = CM.CAT_ID					
									LEFT OUTER JOIN T0040_DEPARTMENT_MASTER DT WITH (NOLOCK) ON INC_QRY.DEPT_ID = DT.DEPT_ID
									LEFT OUTER JOIN T0040_VERTICAL_SEGMENT TVS WITH (NOLOCK) ON INC_QRY.VERTICAL_ID = TVS.VERTICAL_ID	
									
						) QRY 
						
						PIVOT
						(
						  MAX(AMOUNT)
						  FOR REIM_TYPE IN (' + @COLUMNNAME_PENDING + ')
						) PIV ORDER BY ALPHA_EMP_CODE,FOR_DATE DESC'
						
						
						EXEC (@QUERYCLAIM)
						
						
						------- DECLARATION ADDED ON 01052018 ------
						
						DECLARE @STRING_TOTAL_AMOUNT_PENDING AS NVARCHAR(MAX)
						DECLARE @SUM_COLS_TOTAL_AMOUNT_PENDING VARCHAR(MAX)
						DECLARE @QUERY_CLAIM_TOTAL_AMOUNT_PENDING VARCHAR(MAX)
						CREATE TABLE #TABLE_PENDING_GRAND_TOTAL
						(
							SRNO INT,
							EMP_ID NUMERIC(18,0),
							TOTAL_AMOUNT NUMERIC(18,2)
						)
						
						-------- END ----------
						IF(ISNULL(@TYPE,0) = 1)
							BEGIN
										IF OBJECT_ID('TEMPDB..#TBL_CLAIM_STATUS_PENDING') IS NOT NULL
											BEGIN
												UPDATE	T	
												SET		T.EMP_FULL_NAME = (CASE WHEN B.SRNO = 1 THEN B.EMP_FULL_NAME ELSE NULL END),
														T.ALPHA_EMP_CODE = (CASE WHEN B.SRNO = 1 THEN B.ALPHA_EMP_CODE ELSE NULL END),
														T.BRANCH_NAME = (CASE WHEN B.SRNO = 1 THEN B.BRANCH_NAME ELSE NULL END),
														T.DEPARTMENT = (CASE WHEN B.SRNO = 1 THEN B.DEPARTMENT ELSE NULL END),
														T.GRADE_NAME = (CASE WHEN B.SRNO = 1 THEN B.GRADE_NAME ELSE NULL END),
														T.DESIGNATION = (CASE WHEN B.SRNO = 1 THEN B.DESIGNATION ELSE NULL END),
														T.EMPLOYEE_TYPE = (CASE WHEN B.SRNO = 1 THEN B.EMPLOYEE_TYPE ELSE NULL END),
														T.CATEGORY = (CASE WHEN B.SRNO = 1 THEN B.CATEGORY ELSE NULL END),
														T.VERTICAL = (CASE WHEN B.SRNO = 1 THEN B.VERTICAL ELSE NULL END)
												FROM	#TBL_CLAIM_STATUS_PENDING T 
														INNER JOIN	(
																		SELECT	B.SRNO,B.EMP_ID,B.ALPHA_EMP_CODE,B.EMP_FULL_NAME,B.BRANCH_NAME,B.DEPARTMENT,FOR_DATE,GRADE_NAME,DESIGNATION,EMPLOYEE_TYPE,VERTICAL,CATEGORY
																		FROM	#TBL_CLAIM_STATUS_PENDING B
																		
																	) B ON T.EMP_ID=B.EMP_ID AND T.FOR_DATE=B.FOR_DATE	
												
												
												
												---------------------- ADDED ON 01052018 CODE FOR TOTAL HEAD  ----------------
												
												SET @STRING_TOTAL_AMOUNT_PENDING = 'INSERT INTO #TABLE_PENDING_GRAND_TOTAL SELECT (ISNULL(MAX(SRNO),0)+1),EMP_ID AS EMP_ID,SUM(TOTAL_AMOUNT)AS TOTAL_AMOUNT FROM #TBL_CLAIM_STATUS_PENDING GROUP BY EMP_ID'
												EXEC(@STRING_TOTAL_AMOUNT_PENDING)
												
												SET @STRING_TOTAL_AMOUNT_PENDING = 'INSERT INTO #TABLE_PENDING_GRAND_TOTAL SELECT 999999,(ISNULL(MAX(EMP_ID),0)+1) AS EMP_ID,SUM(TOTAL_AMOUNT)AS TOTAL_AMOUNT FROM #TBL_CLAIM_STATUS_PENDING'
												EXEC(@STRING_TOTAL_AMOUNT_PENDING)
																			
																			
												SELECT @SUM_COLS_TOTAL_AMOUNT  = COALESCE(@SUM_COLS_TOTAL_AMOUNT + ',', '') + '0 AS ' +DATA
												FROM	dbo.Split(@COLUMNNAME_PENDING, ',') T 
												
												SET @QUERY_CLAIM_TOTAL_AMOUNT_PENDING ='SELECT SRNO,EMP_ID,'''' AS ALPHA_EMP_CODE,
												(CASE WHEN SRNO=999999 THEN ''TOTAL'' ELSE ''SUBTOTAL'' END) AS EMP_FULL_NAME,'''' AS BRANCH_NAME,'''' AS DEPARTMENT, '''' AS GRADE_NAME,'''' AS DESIGNATION,'''' AS CATEGORY,'''' AS EMPLOYEE_TYPE,'''' AS VERTICAL,'''' AS APPLICATION_CODE,'''' AS APPLICATION_DATE,'''' AS APPROVAL_CODE,
												'''' AS APPROVAL_DATE,'''' AS DATE,' + @SUM_COLS_TOTAL_AMOUNT + ',TOTAL_AMOUNT,(CASE WHEN A.SRNO = 999999 THEN ''#008000,#A9A9A9'' ELSE ''#A9A9A9,#ccc'' END) AS STATUS FROM #TABLE_PENDING_GRAND_TOTAL A'
												
												INSERT INTO #TBL_CLAIM_STATUS_PENDING
												EXEC (@QUERY_CLAIM_TOTAL_AMOUNT_PENDING)
												
												------------------------ END --------------------------------
												
												
												
												SELECT * FROM #TBL_CLAIM_STATUS_PENDING ORDER BY EMP_ID,SRNO
												DROP TABLE #TBL_CLAIM_STATUS_PENDING
											END
										ELSE
											BEGIN
														RAISERROR('@@RECORDS NOT EXIST !!!@@',16,2)
											END
							END
						ELSE
							BEGIN
							
								SELECT @SUM_COLS  = COALESCE(@SUM_COLS + ',', '') + 'SUM(' + DATA + ') AS ' +DATA
								FROM	dbo.Split(@COLUMNNAME_PENDING, ',') T 
								
								
								--- ADDED ON 03052018 FOR TOTAL HEAD COUNT COLUMN ---
								DECLARE @SUM_COLS_PENDING_HEAD VARCHAR(MAX)
								SELECT @SUM_COLS_PENDING_HEAD  = COALESCE(@SUM_COLS_PENDING_HEAD + '+', '') +  DATA
								FROM	dbo.Split(@COLUMNNAME_PENDING, ',') T 
								
								DECLARE @SUM_COLS_PENDING_SINGLE VARCHAR(MAX)
								SELECT @SUM_COLS_PENDING_SINGLE  = COALESCE(@SUM_COLS_PENDING_SINGLE + ',', '') +  DATA
								FROM	dbo.Split(@COLUMNNAME_PENDING, ',') T 
								
								
								SELECT * 
								INTO #TBL_SUMMARY_PENDING FROM #TBL_CLAIM_STATUS_PENDING
								TRUNCATE TABLE #TBL_CLAIM_STATUS_PENDING
								
								SET @STRING = 'SELECT ROW_NUMBER() OVER (ORDER BY CM.EMP_FULL_NAME)  AS SRNO,CM.EMP_ID,ALPHA_EMP_CODE,CM.EMP_FULL_NAME AS EMP_FULL_NAME,CM.BRANCH_NAME,CM.DEPARTMENT,CM.GRADE_NAME,
												CM.DESIGNATION,CM.CATEGORY,CM.EMPLOYEE_TYPE,CM.VERTICAL,'''' AS APPLICATION_CODE,'''' as APPLICATION_DATE,'''' AS APPROVAL_CODE,APPROVAL_DATE,'''' as FOR_DATE, ' + @SUM_COLS + ',SUM('+ @SUM_COLS_PENDING_HEAD + ') AS TOTAL_AMOUNT,CM.STATUS
												FROM	(SELECT EMP_ID,ALPHA_EMP_CODE,EMP_FULL_NAME,BRANCH_NAME,DEPARTMENT,GRADE_NAME,DESIGNATION,CATEGORY,EMPLOYEE_TYPE,VERTICAL,'''' AS APPLICATION_CODE,'''' as APPLICATION_DATE,'''' AS APPROVAL_CODE,'''' AS APPROVAL_DATE,'''' as FOR_DATE,STATUS,' + @SUM_COLS + ' FROM #TBL_SUMMARY_PENDING CM  GROUP BY EMP_ID,ALPHA_EMP_CODE,EMP_FULL_NAME,BRANCH_NAME,DEPARTMENT,GRADE_NAME,DESIGNATION,CATEGORY,EMPLOYEE_TYPE,VERTICAL,APPLICATION_CODE,APPLICATION_DATE,APPROVAL_CODE,APPROVAL_DATE,FOR_DATE,STATUS) CM
												GROUP BY CM.EMP_ID,CM.ALPHA_EMP_CODE,CM.EMP_FULL_NAME,CM.BRANCH_NAME,CM.DEPARTMENT,CM.GRADE_NAME,CM.DESIGNATION,CM.CATEGORY,CM.EMPLOYEE_TYPE,CM.VERTICAL,CM.APPLICATION_CODE,CM.APPLICATION_DATE,CM.APPROVAL_CODE,CM.APPROVAL_DATE,CM.FOR_DATE,CM.STATUS'
								
								INSERT INTO #TBL_CLAIM_STATUS_PENDING
								EXEC(@STRING)
								
								SET @STRING_TOTAL_AMOUNT_PENDING = 'INSERT INTO #TABLE_PENDING_GRAND_TOTAL SELECT 999999,(ISNULL(MAX(EMP_ID),0)+1) AS EMP_ID,SUM(TOTAL_AMOUNT)AS TOTAL_AMOUNT FROM #TBL_CLAIM_STATUS_PENDING'
								EXEC(@STRING_TOTAL_AMOUNT_PENDING)
														
								SELECT @SUM_COLS_TOTAL_AMOUNT_PENDING  = COALESCE(@SUM_COLS_TOTAL_AMOUNT_PENDING + ',', '') + '0 AS ' +DATA
								FROM	dbo.Split(@COLUMNNAME_PENDING, ',') T 
								SET @QUERY_CLAIM_TOTAL_AMOUNT_PENDING ='SELECT SRNO,EMP_ID,'''' AS ALPHA_EMP_CODE,
								(CASE WHEN SRNO=999999 THEN ''TOTAL'' ELSE ''SUBTOTAL'' END) AS EMP_FULL_NAME,'''' AS BRANCH_NAME,'''' AS DEPARTMENT, '''' AS GRADE_NAME,'''' AS DESIGNATION,'''' AS CATEGORY,'''' AS EMPLOYEE_TYPE,'''' AS VERTICAL,
								'''' AS APPLICATION_CODE,'''' AS APPLICATION_DATE,'''' AS APPROVAL_CODE,'''' AS APPROVAL_DATE,'''' AS DATE
								,' + @SUM_COLS_TOTAL_AMOUNT_PENDING + ',TOTAL_AMOUNT,(CASE WHEN A.SRNO = 999999 THEN ''#008000,#A9A9A9'' ELSE ''#A9A9A9,#ccc'' END) AS STATUS FROM #TABLE_PENDING_GRAND_TOTAL A'
								
								INSERT INTO #TBL_CLAIM_STATUS_PENDING
								EXEC (@QUERY_CLAIM_TOTAL_AMOUNT_PENDING)
								
								
							    SET @STRING = 'SELECT CM.SRNO,CM.ALPHA_EMP_CODE,CM.EMP_FULL_NAME AS EMP_FULL_NAME,CM.BRANCH_NAME,CM.DEPARTMENT,CM.GRADE_NAME,
												CM.DESIGNATION,CM.CATEGORY,CM.EMPLOYEE_TYPE,CM.VERTICAL,' + @SUM_COLS_PENDING_SINGLE + ',CM.TOTAL_AMOUNT,CM.STATUS
												FROM #TBL_CLAIM_STATUS_PENDING CM'
								
								EXEC(@STRING)	
								
								
								
								-- APPLICATION DATE WILL ASKED TO HARDIK BHAI NEED TO TAKE HERE COMMENTED ON 07052018
								--SET @STRING = 'SELECT 0 AS FLAG, ROW_NUMBER() OVER (ORDER BY CM.EMP_FULL_NAME) AS ROW_ID,CM.EMP_FULL_NAME AS EMP_FULL_NAME,CM.BRANCH_NAME,CM.GRADE_NAME,
								--				CM.DESIGNATION,CM.CATEGORY,CM.EMPLOYEE_TYPE,' + @SUM_COLS + ',CM.STATUS
								--				FROM	(SELECT EMP_ID,EMP_FULL_NAME,BRANCH_NAME,GRADE_NAME,DESIGNATION,CATEGORY,EMPLOYEE_TYPE,STATUS,' + @SUM_COLS + ' FROM #TBL_CLAIM_STATUS_PENDING CM  GROUP BY EMP_ID,EMP_FULL_NAME,BRANCH_NAME,GRADE_NAME,DESIGNATION,CATEGORY,EMPLOYEE_TYPE,STATUS) CM
								--				GROUP BY CM.EMP_FULL_NAME,CM.BRANCH_NAME,CM.GRADE_NAME,CM.DESIGNATION,CM.CATEGORY,CM.EMPLOYEE_TYPE,CM.STATUS'
												
								
								--EXEC(@STRING)
								
								
								
							END
						
						
			
			END

Return
		



