

---27/1/2021 (EDIT BY MEHUL ) (SP WITH NOLOCK)---
CREATE PROCEDURE [dbo].[Rpt_Claim_Status_Export]  
	 @Cmp_ID		numeric  
	,@From_Date		datetime
	,@To_Date 		datetime
	,@Branch_ID		numeric	
	,@Grade_ID 		numeric
	,@Type_ID 		numeric
	,@Dept_ID 		numeric
	,@Desig_ID 		numeric
	,@Emp_ID 		numeric
	,@Constraint	varchar(max)
	,@Cat_ID        numeric = 0
	,@is_column		tinyint = 0
	,@Salary_Cycle_id  NUMERIC  = 0
	,@Type varchar(100) = ''  --Change by Jaina 29-10-2020
	,@Filter int = 0
	,@Status   TINYINT
	
	
	--,@PDept_ID varchar(max)=''
	--,@Segment_ID Numeric = 0 
	--,@Vertical Numeric = 0 
	--,@SubVertical Numeric = 0 
	--,@subBranch Numeric = 0 
	--,@PBranch_ID	varchar(max)= ''
	--,@PVertical_ID	varchar(max)= ''
	--,@PSubVertical_ID	varchar(max)= ''
	
	
AS  
SET NOCOUNT ON 
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
SET ARITHABORT ON
	
	
		IF @BRANCH_ID = 0  
			SET @BRANCH_ID = NULL
			
		IF @GRADE_ID = 0  
			 SET @GRADE_ID = NULL  
			 
		IF @EMP_ID = 0  
			SET @EMP_ID = NULL  
			
		IF @DESIG_ID = 0  
			SET @DESIG_ID = NULL  
			
		IF @DEPT_ID = 0  
			SET @DEPT_ID = NULL 
			
		IF @TYPE_ID = 0  
			SET @TYPE_ID = NULL 	
			
		IF @CAT_ID = 0
			SET @CAT_ID = NULL
	        
		IF @SALARY_CYCLE_ID = 0
			SET @SALARY_CYCLE_ID = NULL
			
			if @Type ='NaN' or @Type = ''  --Added by Jaina 29-10-2020
				set @Type  = '0'


		--IF @SEGMENT_ID = 0
		--	SET @SEGMENT_ID = NULL
	        
		--IF @PBRANCH_ID = '0' OR @PBRANCH_ID='' 
		--	SET @PBRANCH_ID = NULL   	
			
		--IF @PVERTICAL_ID ='0' OR @PVERTICAL_ID = ''
		--	SET @PVERTICAL_ID = NULL

		--IF @PSUBVERTICAL_ID ='0' OR @PSUBVERTICAL_ID = ''
		--	SET @PSUBVERTICAL_ID = NULL
			
		--IF @PDEPT_ID = '0' OR @PDEPT_ID=''
		--	SET @PDEPT_ID = NULL	 
			
		
	--IF @PBRANCH_ID IS NULL
	--BEGIN	
	--	SELECT   @PBRANCH_ID = COALESCE(@PBRANCH_ID + ',', '') + CAST(BRANCH_ID AS NVARCHAR(5))  FROM T0030_BRANCH_MASTER WHERE CMP_ID=@CMP_ID 
	--	SET @PBRANCH_ID = @PBRANCH_ID + ',0'
	--END
	
	--IF @PVERTICAL_ID IS NULL
	--BEGIN	
	--	SELECT   @PVERTICAL_ID = COALESCE(@PVERTICAL_ID + ',', '') + CAST(VERTICAL_ID AS NVARCHAR(5))  FROM T0040_VERTICAL_SEGMENT WHERE CMP_ID=@CMP_ID 
		
	--	IF @PVERTICAL_ID IS NULL
	--		SET @PVERTICAL_ID = '0';
	--	ELSE
	--		SET @PVERTICAL_ID = @PVERTICAL_ID + ',0'
			
	--END
	--IF @PSUBVERTICAL_ID IS NULL
	--BEGIN	
	--	SELECT   @PSUBVERTICAL_ID = COALESCE(@PSUBVERTICAL_ID + ',', '') + CAST(SUBVERTICAL_ID AS NVARCHAR(5))  FROM T0050_SUBVERTICAL WHERE CMP_ID=@CMP_ID 
	--	IF @PSUBVERTICAL_ID IS NULL
	--		SET @PSUBVERTICAL_ID = '0';
	--	ELSE
	--		SET @PSUBVERTICAL_ID = @PSUBVERTICAL_ID + ',0'
	--END
	--IF @PDEPT_ID IS NULL
	--BEGIN
	--	SELECT   @PDEPT_ID = COALESCE(@PDEPT_ID + ',', '') + CAST(DEPT_ID AS NVARCHAR(5))  FROM T0040_DEPARTMENT_MASTER WHERE CMP_ID=@CMP_ID 		
	--	SET @PDEPT_ID = @PDEPT_ID + ',0'
	--	IF @PDEPT_ID IS NULL
	--		SET @PDEPT_ID = '0';
	--	ELSE
	--		SET @PDEPT_ID = @PDEPT_ID + ',0'
	--END
	
	
	
	CREATE TABLE #EMP_CONS 
	 (      
		EMP_ID NUMERIC ,     
		BRANCH_ID NUMERIC,
		INCREMENT_ID NUMERIC
	 )          

	IF @CONSTRAINT <> ''        
	 BEGIN	 
	   INSERT INTO #EMP_CONS(EMP_ID)        
	   SELECT  CAST(DATA  AS NUMERIC) FROM DBO.SPLIT (@CONSTRAINT,'#')         
	  END      
	ELSE        
	 BEGIN
			Insert Into #Emp_Cons      
		    select distinct emp_id,ve.branch_id,Increment_ID from V_Emp_Cons As VE
		    left OUTER JOIN  (SELECT DISTINCT ESC.SalDate_id,ESC.emp_id as eid FROM T0095_Emp_Salary_Cycle ESC WITH (NOLOCK)
			inner join 
							(SELECT max(Effective_date) as Effective_date,emp_id FROM T0095_Emp_Salary_Cycle WITH (NOLOCK) where Effective_date <= @To_Date
							GROUP BY emp_id) Qry
							on Qry.Effective_date = ESC.Effective_date AND Qry.Emp_id = ESC.Emp_id) as QrySC
		       ON QrySC.eid = VE.Emp_ID
			where 
		    cmp_id=@Cmp_ID 
		   and Isnull(Cat_ID,0) = Isnull(@Cat_ID ,Isnull(Cat_ID,0))      
		   --and Branch_ID = isnull(@Branch_ID ,Branch_ID)      
		   and Grd_ID = isnull(@Grade_ID ,Grd_ID)      
		   --and isnull(Dept_ID,0) = isnull(@Dept_ID ,isnull(Dept_ID,0))      
		   and Isnull(Type_ID,0) = isnull(@Type_ID ,Isnull(Type_ID,0))      
		   and Isnull(Desig_ID,0) = isnull(@Desig_ID ,Isnull(Desig_ID,0)) 
		   and isnull(QrySC.SalDate_id,0) = isnull(@Salary_Cycle_id ,isnull(QrySC.SalDate_id,0))  
		  -- and ISNULL(Segment_ID,0) = ISNULL(@Segment_Id,Isnull(Segment_ID,0))       
		  --Added By Jaina 3-10-2015 Start   
		   --and EXISTS (select Data from dbo.Split(@PBranch_ID, ',') B Where cast(B.data as numeric)=Isnull(VE.Branch_ID,0))
		   --and EXISTS (select Data from dbo.Split(@PVertical_ID, ',') V Where cast(v.data as numeric)=Isnull(VE.Vertical_ID,0))
		   --and EXISTS (select Data from dbo.Split(@PsubVertical_ID, ',') S Where cast(S.data as numeric)=Isnull(VE.SubVertical_ID,0))
		   --and EXISTS (select Data from dbo.Split(@PDept_ID, ',') D Where cast(D.data as numeric)=Isnull(VE.Dept_ID,0))
		   
		   --Added By Jaina 3-10-2015 End
		   and Emp_ID = isnull(@Emp_ID ,Emp_ID)   
		      and Increment_Effective_Date <= @To_Date 
		      and 
                      ( (@From_Date  >= join_Date  and  @From_Date <= left_date )      
						or ( @To_Date  >= join_Date  and @To_Date <= left_date )      
						or (Left_date is null and @To_Date >= Join_Date)      
						or (@To_Date >= left_date  and  @From_Date <= left_date )						
						) 
						order by Emp_ID
						
			Delete From #Emp_Cons Where Increment_ID Not In
				(select TI.Increment_ID from t0095_increment TI WITH (NOLOCK) inner join
				(Select Max(Increment_Effective_Date) as Effective_Date,Emp_ID from T0095_Increment WITH (NOLOCK)
				Where Increment_effective_Date <= @to_date Group by emp_ID) new_inc
				on TI.Emp_ID = new_inc.Emp_ID and Ti.Increment_Effective_Date=new_inc.Effective_Date
				Where Increment_effective_Date <= @to_date)
  END
	
	IF OBJECT_ID('tempdb..#Claim') IS NOT NULL
	BEGIN
		DROP TABLE #Claim
	END
	IF OBJECT_ID('tempdb..#CLAIM_PENDING') IS NOT NULL
	BEGIN
		DROP TABLE #CLAIM_PENDING
	END
	
	
	CREATE TABLE #CLAIM -- TABLE FOR APPROVED / REJECTED STATUS
	(
		EMP_ID			NUMERIC(18,0),
		CLAIM_APR_ID	NUMERIC(18,0),
		CLAIM_APP_ID    NUMERIC(18,0),
		APPLICATION_DATE        VARCHAR(MAX),
		FOR_DATE        VARCHAR(MAX),
		CLAIM_TYPE      VARCHAR(255),
		AMOUNT			VARCHAR(255),
		TOTALAMOUNT_ONE NUMERIC(18,2),
		CLAIM_APR_DTL_ID NUMERIC(18,0),
		BANK_NAME VARCHAR(250),
		IFSC_CODE NVARCHAR(15),
		BANK_ACCOUNT_NUMBER NVARCHAR(30), --NUMERIC(18,0),
		CLAIM_STATUS	VARCHAR(10),
		APPROVAL_CODE NVARCHAR(128),
		APPROVAL_DATE VARCHAR(50),
		
		
	)
	CREATE TABLE #CLAIM_PENDING  -- TABLE FOR PENDING
	(
		EMP_ID			NUMERIC(18,0),
		CLAIM_APP_ID    NUMERIC(18,0),
		APPLICATION_DATE        VARCHAR(MAX),
		FOR_DATE        VARCHAR(MAX),
		CLAIM_TYPE      VARCHAR(255),
		AMOUNT			VARCHAR(255),
		CLAIM_APP_DTL_ID NUMERIC(18,0),
		CLAIM_STATUS	VARCHAR(10)
	)
	
	IF OBJECT_ID('TEMPDB..#TOTAL_CLAIM') IS NOT NULL
	BEGIN
		DROP TABLE #TOTAL_CLAIM
	END
	IF OBJECT_ID('TEMPDB..#TOTAL_CLAIM_PENDING') IS NOT NULL
	BEGIN
		DROP TABLE #TOTAL_CLAIM_PENDING
	END
	
	CREATE TABLE #CLAIM_STATUS_DETAILS
	(
	 
	  Emp_Code varchar(50),
	  EMP_FULL_NAME varchar(250),
	  For_date datetime,
	  BRANCH_NAME    varchar(50)
	
	)
	CREATE TABLE #TOTAL_CLAIM
	(
		CLAM_APR_ID_1   NUMERIC(18,0),
		EMP_ID			NUMERIC(18,0),
		CLAIM_APR_ID	NUMERIC(18,0),
		APPLICATION_DATE		DATETIME,
		FOR_DATE		DATETIME, --VARCHAR(255),		
		--CURRENCY        VARCHAR(255),
		--PURPOSE     VARCHAR(255),
		--CURRENCY_RATE VARCHAR(255),
		CLAIM_APR_DTL_ID NUMERIC(18,0),
		BANK_NAME VARCHAR(250),
		IFSC_CODE NVARCHAR(15),
		BANK_ACCOUNT_NUMBER NVARCHAR(30), --NUMERIC(18,0),
		CLAIM_STATUS	VARCHAR(10),
		APPROVAL_CODE NVARCHAR(128),
		APPROVAL_DATE VARCHAR(50),
	)
	
	CREATE TABLE #TOTAL_CLAIM_PENDING
	(
		CLAM_APR_ID_1   NUMERIC(18,0),
		EMP_ID			NUMERIC(18,0),
		CLAIM_APR_ID	NUMERIC(18,0),
		APPLICATION_DATE		DATETIME,
		FOR_DATE		DATETIME,
		CLAIM_APP_DTL_ID NUMERIC(18,0),
		CLAIM_STATUS	VARCHAR(10)
	)
	DECLARE @QUERYCLAIM NVARCHAR(MAX)
	
		
	IF (ISNULL(@STATUS,0) IN (0,1))
		BEGIN 
			
			
			-- CLAIM STATUS OF APPROVED AND REJECTED	
			SELECT CLM.CLAIM_APP_ID,CLMPR.CLAIM_APR_ID,CLM.CLAIM_APR_DATE AS FOR_DATE,CLMPR.CLAIM_APR_COMMENTS,CLM.CLAIM_APR_CODE,CLM.EMP_ID,CLMPR.CLAIM_APR_BY,
			CLMPR.CLAIM_APR_DEDUCT_FROM_SAL,CLM.CLAIM_APR_AMOUNT AS TOTALAMOUNT,CLM.CLAIM_STATUS,CLM.CLAIM_ID,CLM.CURR_ID,CLMST.CLAIM_NAME AS CLAIM_TYPE
			,CLM.CLAIM_APR_AMOUNT AS CLAIM_APR_AMOUNT,CLM.CURR_RATE AS CURR_RATE,CLMPR.CLAIM_APP_DATE,
			CASE WHEN (CAST(CLMST.DESIG_WISE_LIMIT AS VARCHAR(5)) ='1' OR CAST(CLMST.GRADE_WISE_LIMIT AS VARCHAR(5)) ='1' OR CAST(CLMST.BRANCH_WISE_LIMIT AS VARCHAR(5)) ='1') AND (CAST(CLMST.CLAIM_TYPE AS VARCHAR(5)) ='1') THEN CAST(CAST(CLM.CLAIM_APP_AMOUNT AS NUMERIC(18,2)) AS VARCHAR(255)) + ' FOR ' + CAST(CAST(CLM.PETROL_KM AS NUMERIC(18,2)) AS VARCHAR(255)) + ' KM' ELSE CAST(CAST(CLM.CLAIM_APP_AMOUNT AS NUMERIC(18,2)) AS VARCHAR(255)) END AS CLAIM_AMOUNT,
			CLM.CLAIM_APR_AMOUNT AS APPLICATION_AMOUNT_ONE,	CLM.CLAIM_APP_AMOUNT AS APPLICATION_AMOUNT,CLM.PURPOSE AS PURPOSE ,CUR.CURR_NAME AS CURRENCY,CLM.CLAIM_APR_DTL_ID,
			CLM.PETROL_KM,VM.IFSC_CODE,VM.INC_BANK_AC_NO,BM.BANK_NAME,CLMPR.CLAIM_APR_DATE AS CLAIM_APPROVAL_DATE
			INTO #TBL_APPROVAL_STATUS
			FROM 
			T0120_CLAIM_APPROVAL CLMPR WITH (NOLOCK)
			INNER JOIN T0130_CLAIM_APPROVAL_DETAIL CLM WITH (NOLOCK) ON CLM.CMP_ID=CLMPR.CMP_ID AND CLM.CLAIM_APR_ID=CLMPR.CLAIM_APR_ID AND CLM.EMP_ID=CLMPR.EMP_ID
			INNER JOIN T0040_CLAIM_MASTER CLMST WITH (NOLOCK) ON CLMST.CLAIM_ID=CLM.CLAIM_ID
			LEFT OUTER JOIN T0040_CURRENCY_MASTER CUR WITH (NOLOCK) ON CLM.CURR_ID= CUR.CURR_ID
			LEFT JOIN V0080_EMPLOYEE_MASTER VM ON CLM.Emp_ID=VM.Emp_ID
			LEFT OUTER JOIN T0040_BANK_MASTER BM WITH (NOLOCK) ON VM.BANK_ID=BM.BANK_ID
			WHERE CLM.CMP_ID=@CMP_ID AND 
				CASE 
					WHEN @FILTER = 0  --- @FILTER FLAG FOR APPROVAL DATE / FOR DATE APPROVED CLAIM 
					THEN CAST(CLMPR.CLAIM_APR_DATE AS DATE) 
					ELSE CAST(CLM.CLAIM_APR_DATE AS DATE)
				END BETWEEN @FROM_DATE AND @TO_DATE
			AND CLM.EMP_ID IN (SELECT EMP_ID FROM #EMP_CONS) AND CLM.CLAIM_STATUS IN (CASE WHEN @STATUS = 0 THEN 'A' WHEN @STATUS = 1 THEN 'R' ELSE 'P' END)
			
		END
	ELSE
		BEGIN 
		
			-- CLAIM STATUS FOR PENDING
			 SELECT	CLAIM_APP.CMP_ID,CLAIM_APP.EMP_ID,CLAIM_APP.CLAIM_APP_ID,CLAIM_APPDETAIL.FOR_DATE,CLMST.CLAIM_NAME,
			 CLAIM_APPDETAIL.Claim_Amount AS CLAIM_APP_AMOUNT,'' AS APPLICATION_AMOUNT_ONE,
			 CLAIM_APP_DETAIL_ID,CLAIM_APP.CLAIM_APP_STATUS,CLAIM_APPDETAIL.CURR_ID,CLAIM_APP.CLAIM_APP_DATE
			 INTO #TBL_APPROVAL_STATUS_PENDING
			 FROM V0100_CLAIM_APPLICATION_NEW CLAIM_APP INNER JOIN T0110_CLAIM_APPLICATION_DETAIL CLAIM_APPDETAIL WITH (NOLOCK)
			 ON CLAIM_APP.CLAIM_APP_ID=CLAIM_APPDETAIL.CLAIM_APP_ID 
			 INNER JOIN T0040_CLAIM_MASTER CLMST WITH (NOLOCK) ON CLMST.CLAIM_ID=CLAIM_APPDETAIL.CLAIM_ID
			 LEFT OUTER JOIN T0040_CURRENCY_MASTER CUR WITH (NOLOCK) ON ISNULL(CLAIM_APPDETAIL.CURR_ID,0)= ISNULL(CUR.CURR_ID,0)
			 WHERE CLAIM_APP.CMP_ID=@CMP_ID AND CAST(CLAIM_APPDETAIL.FOR_DATE AS DATE) BETWEEN @FROM_DATE AND @TO_DATE
			 AND CLAIM_APP.EMP_ID IN (SELECT EMP_ID FROM #EMP_CONS) AND CLAIM_APP.CLAIM_APP_STATUS='P'
			
			
			
		END
		
		-- CLAIM_APR_ID,
		IF OBJECT_ID('TEMPDB..#TBL_APPROVAL_STATUS_PENDING') IS NOT NULL
		BEGIN
			
			
			INSERT INTO #CLAIM_PENDING
			SELECT EMP_ID,CLAIM_APP_ID,CLAIM_APP_DATE AS APPLICATION_DATE,FOR_DATE,CLAIM_NAME AS CLAIM_TYPE,CLAIM_APP_AMOUNT AS AMOUNT,CLAIM_APP_DETAIL_ID,CLAIM_APP_STATUS AS CLAIM_STATUS FROM #TBL_APPROVAL_STATUS_PENDING --CTE WHERE  RANK = 1
			ORDER BY FOR_DATE, CLAIM_TYPE
			
			
			INSERT INTO #TOTAL_CLAIM_PENDING
			SELECT ROW_NUMBER() OVER( ORDER BY EMP_ID,CLAIM_APP_ID), EMP_ID,CLAIM_APP_ID,APPLICATION_DATE,FOR_DATE,CLAIM_APP_DTL_ID,CLAIM_STATUS FROM #CLAIM_PENDING 			
			ORDER BY FOR_DATE, CLAIM_TYPE
			
		END
	ELSE
		BEGIN
		
			INSERT INTO #CLAIM
			SELECT EMP_ID,CLAIM_APR_ID,CLAIM_APP_ID,CLAIM_APP_DATE AS APPLICATION_DATE,FOR_DATE,CLAIM_TYPE,CLAIM_APR_AMOUNT,APPLICATION_AMOUNT_ONE,CLAIM_APR_DTL_ID,BANK_NAME,IFSC_CODE,INC_BANK_AC_NO,CLAIM_STATUS,CLAIM_APR_CODE,CLAIM_APPROVAL_DATE FROM #TBL_APPROVAL_STATUS --CTE WHERE  RANK = 1
			ORDER BY FOR_DATE, CLAIM_TYPE
			
			INSERT INTO #TOTAL_CLAIM
			SELECT ROW_NUMBER() OVER( ORDER BY EMP_ID,CLAIM_APR_ID), EMP_ID,CLAIM_APR_ID,APPLICATION_DATE,FOR_DATE,CLAIM_APR_DTL_ID,BANK_NAME,IFSC_CODE,BANK_ACCOUNT_NUMBER,CLAIM_STATUS,APPROVAL_CODE,APPROVAL_DATE FROM #CLAIM 			
			ORDER BY FOR_DATE, CLAIM_TYPE
		END		
		
		Declare @Claim_Name varchar(255)
		Declare @val nvarchar(max)
		declare @AD_NAME_DYN nvarchar(max)
		declare @Column nvarchar(max)
		set @Column =''
	
		IF (ISNULL(@STATUS,0) IN (0,1))
			BEGIN

					
					
					CREATE table #new_temp
						(		
						for_date  datetime,
						Emp_ID  numeric(18,0),
						Label_name  nvarchar(max),
						Label_Amount  numeric(18,2)
						)
					DECLARE Claim_Cursor CURSOR FOR
					SELECT distinct Claim_type from #Claim
					
					
				 
					OPEN Claim_Cursor		
					fetch next from Claim_Cursor into @Claim_Name
					while @@fetch_status = 0
						Begin
							
							Set @Claim_Name = Replace(Replace(Replace(Replace(REPLACE(Replace(REPLACE(Replace(REPLACE(replace(Replace(Replace(Replace(Replace(ltrim(rtrim(@Claim_Name)),'+','_'),'''','_'),',','_'),'.','_'),'  ',' '),'%',''),'-',' '),'@',''),'(',''),')',''),' ','_'),'__','_'),'__','_'),'/','')
							
							
							Set @val = 'Alter table   #Total_Claim Add ' + REPLACE(@Claim_Name,' ','_') + ' varchar(255) default 0 not null'
							
							exec (@val)	
							Set @val = ''
							
							Set @Column = @Column +  REPLACE(rtrim(ltrim(@Claim_Name)),' ','_') + '#'
							
							fetch next from Claim_Cursor into @Claim_Name
						End
					close Claim_Cursor	
					deallocate Claim_Cursor		
					Declare @CTC_COLUMNS nvarchar(100)
					Declare @CTC_AD_FLAG varchar(1)
					Declare @Allow_Amount varchar(500)--numeric(18,2)
					Declare @Claim_Apr_Amount numeric(18,2)
					set @Claim_Apr_Amount =0
					
					Set @val = 'Alter table   #Total_Claim Add Approved_Amount varchar(255)'
					exec (@val);
					
									
						DECLARE @CLAIM_APR_ID AS NUMERIC(18,0)	
							
						DECLARE CLAIM_CURSOR CURSOR FOR
						SELECT DISTINCT CLAIM_APR_DTL_ID FROM #CLAIM  
						 
						OPEN CLAIM_CURSOR
						FETCH NEXT FROM CLAIM_CURSOR INTO @CLAIM_APR_ID
						WHILE @@FETCH_STATUS = 0
								BEGIN
										DECLARE CRU_COLUMNS CURSOR FOR
										SELECT DATA FROM SPLIT(@COLUMN,'#') WHERE DATA <> ''
									OPEN CRU_COLUMNS
											FETCH NEXT FROM CRU_COLUMNS INTO @CTC_COLUMNS
											WHILE @@FETCH_STATUS = 0
												BEGIN					
														BEGIN
																SET @CTC_COLUMNS = REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(LTRIM(RTRIM(@CTC_COLUMNS)),'+','_'),'''','_'),',','_'),'.','_'),'  ',' '),'%',''),'-',' '),'@',''),'(',''),')',''),' ','_'),'__','_'),'__','_')
																										
																BEGIN 
																
																SELECT @ALLOW_AMOUNT=ISNULL(AMOUNT,0) FROM #CLAIM  
																				WHERE  REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(LTRIM(RTRIM(CLAIM_TYPE)),'+','_'),'''','_'),',','_'),'.','_'),'  ',' '),'%',''),'-',' '),'@',''),'(',''),')',''),' ','_'),'__','_'),'__','_')  = @CTC_COLUMNS 
																				  AND CLAIM_APR_DTL_ID= @CLAIM_APR_ID --AND CHARINDEX('FOR', ISNULL(AMOUNT,0)) = 0
																	
																	
																	SET @VAL = 	'UPDATE    #TOTAL_CLAIM SET ' + @CTC_COLUMNS + ' =  ''' + CONVERT(NVARCHAR,ISNULL(@ALLOW_AMOUNT,0)) + ''' WHERE    #TOTAL_CLAIM.CLAIM_APR_DTL_ID = ' + CONVERT(NVARCHAR,@CLAIM_APR_ID)
																	EXEC (@VAL)	
																END
															
																SET @ALLOW_AMOUNT = 0
																
														END
														
													FETCH NEXT FROM CRU_COLUMNS INTO @CTC_COLUMNS
												END
									CLOSE CRU_COLUMNS	
									DEALLOCATE CRU_COLUMNS										
										
										UPDATE  #TOTAL_CLAIM SET APPROVED_AMOUNT = C.AMOUNT
										 FROM  #TOTAL_CLAIM TC INNER JOIN 
										 (SELECT CLAIM_APR_DTL_ID, SUM(TOTALAMOUNT_ONE) AS AMOUNT FROM #CLAIM
										  GROUP BY CLAIM_APR_DTL_ID
										 ) C ON
										 TC.CLAIM_APR_DTL_ID =C.CLAIM_APR_DTL_ID
										
										WHERE TC.CLAIM_APR_DTL_ID=@CLAIM_APR_ID																
									FETCH NEXT FROM CLAIM_CURSOR INTO @CLAIM_APR_ID
								END
						CLOSE CLAIM_CURSOR	
						DEALLOCATE CLAIM_CURSOR			 
					

						
						SET @COLUMN = ' ' + @COLUMN
						SET  @COLUMN = REPLACE(@COLUMN,'#','# ')
						set @Column=@Column+'Approved_Amount'+'#'--+'PetrolKM'+'#'
						
						
						DECLARE @TABLE_NAME SYSNAME
						SELECT @TABLE_NAME = '#TOTAL_CLAIM'
						DECLARE @QUERY AS NVARCHAR(MAX)
						SET @QUERY =''
					
						DROP TABLE MY_TEMP
						DECLARE @SQL NVARCHAR(MAX)
						SELECT @SQL = '
								SELECT EMP_ID,APPROVAL_CODE,APPLICATION_DATE,APPROVAL_DATE,FOR_DATE,CLAM_APR_ID_1 AS CLAIM_APR_ID,REIM_TYPE,AMOUNT,BANK_NAME,IFSC_CODE,BANK_ACCOUNT_NUMBER,CLAIM_STATUS INTO MY_TEMP
								FROM ' + @table_name + ' 
								UNPIVOT (
									Amount FOR Reim_Type IN ( 
										' +  LEFT(replace(@Column,'#',','), LEN(replace(@Column,'#',','))-1)  + '
									) 
							 )  unpiv where Amount <> ''0.00'''
						
						EXEC(@SQL);
						
						UPDATE MY_TEMP SET REIM_TYPE = ' ' + REIM_TYPE WHERE REIM_TYPE <>'APPROVED_AMOUNT'
						--IF EXISTS(SELECT 1 FROM T0040_SETTING WHERE CMP_ID=@CMP_ID AND SETTING_NAME='HIDE CURRENCY IN CLAIM APPLICATION' AND SETTING_VALUE=0) --ADDED BY RAJPUT ON 19032018
						--BEGIN
						--	DELETE FROM MY_TEMP WHERE REIM_TYPE='CURRENCY_RATE'
						--END
						CREATE TABLE #TBL_CLAIM_STATUS
						(	
							SRNO NUMERIC,
							EMP_ID NUMERIC,
							ALPHA_EMP_CODE VARCHAR(128),
							EMP_FULL_NAME VARCHAR(250),
							BRANCH_NAME VARCHAR(128),
							DEPARTMENT VARCHAR(128),
							GRADE_NAME VARCHAR(128),
							DESIGNATION VARCHAR(128),
							CATEGORY VARCHAR(128),
							EMPLOYEE_TYPE VARCHAR(128),
							VERTICAL VARCHAR(128),
							BANK_ACCOUNT_NUMBER NVARCHAR(30), --NUMERIC(18,0),
							BANK_NAME VARCHAR(250),
							IFSC_CODE NVARCHAR(15),
							APPLICATION_CODE NVARCHAR(128),
							APPLICATION_DATE VARCHAR(50),
							APPROVAL_CODE VARCHAR(128),
							APPROVAL_DATE VARCHAR(50),
							FOR_DATE VARCHAR(128)
																	
						)
						
						
						DECLARE @COLUMNNAME VARCHAR(MAX)
						SELECT @COLUMNNAME= ISNULL(@COLUMNNAME + ',','') 
							   + QUOTENAME(LTRIM(REIM_TYPE))
						FROM (SELECT DISTINCT REIM_TYPE FROM MY_TEMP WHERE REIM_TYPE <> 'PURPOSE' AND REIM_TYPE <> 'APPROVED_AMOUNT') AS REIM_TYPE
						  
						 
						SELECT @QUERYCLAIM = COALESCE(@QUERYCLAIM + ';', '') + '
								ALTER TABLE #TBL_CLAIM_STATUS ADD ' + DATA + ' NUMERIC(18,2) '
						FROM	dbo.Split(@COLUMNNAME, ',') T
						
						EXEC(@QUERYCLAIM)
						
						ALTER TABLE #TBL_CLAIM_STATUS ADD TOTAL_AMOUNT NUMERIC(18,2)
						ALTER TABLE #TBL_CLAIM_STATUS ADD STATUS VARCHAR(16)
						
									
						SET @QUERYCLAIM ='	
						 INSERT INTO #TBL_CLAIM_STATUS(SRNO,EMP_ID,ALPHA_EMP_CODE,EMP_FULL_NAME,BRANCH_NAME,DEPARTMENT,GRADE_NAME,DESIGNATION,CATEGORY,EMPLOYEE_TYPE,VERTICAL,BANK_ACCOUNT_NUMBER,BANK_NAME,IFSC_CODE,APPLICATION_CODE,APPLICATION_DATE,APPROVAL_CODE,APPROVAL_DATE,FOR_DATE,' + @COLUMNNAME + ',TOTAL_AMOUNT,STATUS)
						 SELECT ROW_NUMBER() OVER (PARTITION BY EMP_FULL_NAME ORDER BY FOR_DATE DESC ) AS SRNO,EMP_ID,ALPHA_EMP_CODE,
						 EMP_FULL_NAME,BRANCH_NAME,DEPARTMENT,GRADE_NAME,DESIGNATION,CATEGORY,EMPLOYEE_TYPE,VERTICAL,BANK_ACCOUNT_NUMBER,BANK_NAME,IFSC_CODE,APPROVAL_CODE,APPLICATION_DATE,APPROVAL_CODE,APPROVAL_DATE,FOR_DATE AS DATE,' + @COLUMNNAME + ',TOTAL_AMOUNT,STATUS
						  FROM
						 (
											
								  SELECT   
								  --ROW_NUMBER() OVER (PARTITION BY E.EMP_FULL_NAME ORDER BY E.EMP_FULL_NAME DESC ) AS RANK,
								  E.EMP_ID,
								  E.ALPHA_EMP_CODE AS ALPHA_EMP_CODE,
								  E.EMP_FULL_NAME,
								  BM.BRANCH_NAME,    
								  DT.DEPT_NAME AS DEPARTMENT,  
								  LTRIM(C.REIM_TYPE)AS REIM_TYPE,
								  C.APPROVAL_CODE AS APPLICATION_CODE,
								  CONVERT(VARCHAR(11), C.APPLICATION_DATE,105)AS APPLICATION_DATE,
								  C.APPROVAL_CODE,
								  CONVERT(VARCHAR(11), CAST(C.APPROVAL_DATE AS DATETIME),105)AS APPROVAL_DATE,
								  CONVERT(VARCHAR(11), C.FOR_DATE,105)AS FOR_DATE,
								  --C.FOR_DATE,
								  C.AMOUNT,
								  (GM.GRD_NAME)AS GRADE_NAME,
								  (DM.DESIG_NAME) AS DESIGNATION,
								  (CM.CAT_NAME) AS CATEGORY,
								  (TM.TYPE_NAME) AS EMPLOYEE_TYPE,
								  (TVS.VERTICAL_NAME) AS VERTICAL,
								  (CASE WHEN C.CLAIM_STATUS=''R'' THEN ''REJECTED'' ELSE ''APPROVED'' END) AS STATUS
								  ,AMOUNT1 AS TOTAL_AMOUNT
								  ,C.BANK_ACCOUNT_NUMBER
								  ,C.BANK_NAME,C.IFSC_CODE
								  ,C.CLAIM_APR_ID
								  FROM MY_TEMP C INNER JOIN 			  
								   (
								   
									SELECT  CLAIM_APR_ID,EMP_ID,FOR_DATE,SUM(CAST(AMOUNT AS NUMERIC(18,2))) AS AMOUNT1 FROM MY_TEMP WHERE REIM_TYPE=''APPROVED_AMOUNT''
									GROUP BY EMP_ID,FOR_DATE,CLAIM_APR_ID) Q ON C.EMP_ID = Q.EMP_ID AND C.FOR_DATE=Q.FOR_DATE AND C.CLAIM_APR_ID = Q.CLAIM_APR_ID INNER JOIN
									DBO.T0080_EMP_MASTER E WITH (NOLOCK) ON C.EMP_ID = E.EMP_ID 
									INNER JOIN #EMP_CONS EC ON E.EMP_ID = EC.EMP_ID 
									INNER JOIN (		SELECT T0095_INCREMENT.EMP_ID, CAT_ID, GRD_ID, DEPT_ID, DESIG_ID, BRANCH_ID, TYPE_ID, BANK_ID, CURR_ID, WAGES_TYPE
														, SALARY_BASIS_ON, BASIC_SALARY, GROSS_SALARY, INC_BANK_AC_NO, EMP_OT, EMP_LATE_MARK, EMP_FULL_PF, EMP_PT, EMP_FIX_SALARY
														, EMP_PART_TIME, LATE_DEDU_TYPE, EMP_CHILDRAN, CENTER_ID
														, SALDATE_ID, SEGMENT_ID, VERTICAL_ID, SUBVERTICAL_ID, SUBBRANCH_ID	
														FROM T0095_INCREMENT WITH (NOLOCK)
														INNER JOIN (
																		
																		SELECT MAX(I.INCREMENT_ID) AS INCREMENT_ID, I.EMP_ID 
																		FROM T0095_INCREMENT I WITH (NOLOCK)
																		INNER JOIN 
																		(
																		SELECT MAX(INCREMENT_EFFECTIVE_DATE) AS FOR_DATE, EMP_ID 
																		FROM T0095_INCREMENT  WITH (NOLOCK)
																		WHERE INCREMENT_EFFECTIVE_DATE <= '''+ CAST(@TO_DATE AS VARCHAR(11)) +''' AND CMP_ID = ''' + CAST(@CMP_ID AS VARCHAR(10)) + '''
																		GROUP BY EMP_ID
																		)I3 ON I.INCREMENT_EFFECTIVE_DATE=I3.FOR_DATE AND I.EMP_ID=I3.EMP_ID	
																		GROUP BY I.EMP_ID 
																		
																		
																		
																	) QRY ON T0095_INCREMENT.EMP_ID = QRY.EMP_ID AND T0095_INCREMENT.INCREMENT_ID = QRY.INCREMENT_ID  --INCREMENT_EFFECTIVE_DATE = QRY.FOR_DATE   
													WHERE CMP_ID = ''' + CAST(@CMP_ID AS VARCHAR(10)) + '''
												) INC_QRY ON E.EMP_ID = INC_QRY.EMP_ID 
									INNER JOIN T0010_COMPANY_MASTER COM WITH (NOLOCK) ON COM.CMP_ID = E.CMP_ID
									INNER JOIN T0040_GRADE_MASTER GM WITH (NOLOCK) ON INC_QRY.GRD_ID = GM.GRD_ID
									INNER JOIN T0030_BRANCH_MASTER BM WITH (NOLOCK) ON INC_QRY.BRANCH_ID = BM.BRANCH_ID
									INNER JOIN T0040_DESIGNATION_MASTER DM WITH (NOLOCK) ON INC_QRY.DESIG_ID = DM.DESIG_ID
									LEFT JOIN T0040_TYPE_MASTER TM WITH (NOLOCK) ON INC_QRY.TYPE_ID = TM.TYPE_ID
									LEFT JOIN T0030_CATEGORY_MASTER CM WITH (NOLOCK) ON INC_QRY.CAT_ID = CM.CAT_ID
									LEFT OUTER JOIN T0040_DEPARTMENT_MASTER DT WITH (NOLOCK) ON INC_QRY.DEPT_ID = DT.DEPT_ID
									LEFT OUTER JOIN T0040_VERTICAL_SEGMENT TVS WITH (NOLOCK)  ON INC_QRY.VERTICAL_ID = TVS.VERTICAL_ID
									
									
									
						) QRY 
						
						PIVOT
						(
						  MAX(AMOUNT)
						  FOR REIM_TYPE IN (' + @COLUMNNAME + ')
						) PIV ORDER BY ALPHA_EMP_CODE,FOR_DATE DESC'
						
						EXEC (@QUERYCLAIM)
						
						
						
						------- DECLARATION ADDED ON 01052018 ------
						DECLARE @STRING_TOTAL_AMOUNT AS NVARCHAR(MAX)
						DECLARE @SUM_COLS_TOTAL_AMOUNT VARCHAR(MAX)
						DECLARE @QUERY_CLAIM_TOTAL_AMOUNT VARCHAR(MAX)
						CREATE TABLE #TABLE_TEMP_CHECK
						(
							SRNO INT,
							EMP_ID NUMERIC(18,0),
							TOTAL_AMOUNT NUMERIC(18,2)
						)
						
						-------- END ----------
						IF(ISNULL(@TYPE,0) = 1)
							BEGIN
								IF OBJECT_ID('TEMPDB..#TBL_CLAIM_STATUS') IS NOT NULL
										BEGIN
										
											UPDATE	T	
											SET		T.EMP_FULL_NAME = (CASE WHEN B.SRNO = 1 THEN B.EMP_FULL_NAME ELSE NULL END),
													T.ALPHA_EMP_CODE = (CASE WHEN B.SRNO = 1 THEN B.ALPHA_EMP_CODE ELSE NULL END),
													T.BRANCH_NAME = (CASE WHEN B.SRNO = 1 THEN B.BRANCH_NAME ELSE NULL END),
													T.GRADE_NAME = (CASE WHEN B.SRNO = 1 THEN B.GRADE_NAME ELSE NULL END),
													T.DEPARTMENT = (CASE WHEN B.SRNO = 1 THEN B.DEPARTMENT ELSE NULL END),
													T.DESIGNATION = (CASE WHEN B.SRNO = 1 THEN B.DESIGNATION ELSE NULL END),
													T.CATEGORY = (CASE WHEN B.SRNO = 1 THEN B.CATEGORY ELSE NULL END),
													T.EMPLOYEE_TYPE = (CASE WHEN B.SRNO = 1 THEN B.EMPLOYEE_TYPE ELSE NULL END),
													T.VERTICAL = (CASE WHEN B.SRNO = 1 THEN B.VERTICAL ELSE NULL END),
													T.BANK_ACCOUNT_NUMBER = (CASE WHEN B.SRNO = 1 THEN B.BANK_ACCOUNT_NUMBER ELSE NULL END),
													T.BANK_NAME = (CASE WHEN B.SRNO = 1 THEN B.BANK_NAME ELSE NULL END),
													T.IFSC_CODE = (CASE WHEN B.SRNO = 1 THEN B.IFSC_CODE ELSE NULL END)
													
											FROM	#TBL_CLAIM_STATUS T 
													INNER JOIN	(
																	SELECT	B.SRNO,B.EMP_ID,B.ALPHA_EMP_CODE,B.EMP_FULL_NAME,B.BRANCH_NAME,B.DEPARTMENT,B.GRADE_NAME,B.DESIGNATION,B.CATEGORY,B.EMPLOYEE_TYPE,B.VERTICAL,b.BANK_ACCOUNT_NUMBER,B.IFSC_CODE,B.BANK_NAME,APPLICATION_DATE,FOR_DATE
																	FROM	#TBL_CLAIM_STATUS B
																	
																) B ON T.EMP_ID=B.EMP_ID AND T.FOR_DATE=B.FOR_DATE	
											
											---------------------- ADDED ON 01052018 ----------------
											
											SET @STRING_TOTAL_AMOUNT = 'INSERT INTO #TABLE_TEMP_CHECK SELECT (ISNULL(MAX(SRNO),0)+1),EMP_ID AS EMP_ID,SUM(TOTAL_AMOUNT)AS TOTAL_AMOUNT FROM #TBL_CLAIM_STATUS GROUP BY EMP_ID'
											EXEC(@STRING_TOTAL_AMOUNT)
											
											SET @STRING_TOTAL_AMOUNT = 'INSERT INTO #TABLE_TEMP_CHECK SELECT 999999,(ISNULL(MAX(EMP_ID),0)+1) AS EMP_ID,SUM(TOTAL_AMOUNT)AS TOTAL_AMOUNT FROM #TBL_CLAIM_STATUS'
											EXEC(@STRING_TOTAL_AMOUNT)
											
																						
										    SELECT @SUM_COLS_TOTAL_AMOUNT  = COALESCE(@SUM_COLS_TOTAL_AMOUNT + ',', '') + '0 AS ' +DATA
											FROM	dbo.Split(@COLUMNNAME, ',') T 
											 SET @QUERY_CLAIM_TOTAL_AMOUNT ='SELECT SRNO,EMP_ID,'''' AS ALPHA_EMP_CODE,
											 (CASE WHEN SRNO=999999 THEN ''TOTAL'' ELSE ''SUBTOTAL'' END) AS EMP_FULL_NAME,'''' AS BRANCH_NAME,'''' AS DEPARTMENT, '''' AS GRADE_NAME,'''' AS DESIGNATION,'''' AS CATEGORY,'''' AS EMPLOYEE_TYPE,'''' AS VERTICAL,''0'' AS BANK_ACCOUNT_NUMBER,
											 '''' AS BANK_NAME,'''' AS IFSC_CODE,'''' AS APPROVAL_CODE,'''' AS APPLICATION_DATE,'''' AS APPROVAL_CODE,'''' AS APPROVAL_DATE,'''' AS DATE
											 ,' + @SUM_COLS_TOTAL_AMOUNT + ',TOTAL_AMOUNT,(CASE WHEN A.SRNO = 999999 THEN ''#008000,#A9A9A9'' ELSE ''#A9A9A9,#ccc'' END) AS STATUS FROM #TABLE_TEMP_CHECK A'
											
											INSERT INTO #TBL_CLAIM_STATUS
											EXEC (@QUERY_CLAIM_TOTAL_AMOUNT)
											
											
											
											------------------------ END --------------------------------
											SELECT * FROM #TBL_CLAIM_STATUS ORDER BY EMP_ID,SRNO
											DROP TABLE #TBL_CLAIM_STATUS
											
										END
									ELSE
										BEGIN
													RAISERROR('@@RECORDS NOT EXIST !!!@@',16,2)
										END
							END
						ELSE
							BEGIN
								
								
								IF(ISNULL(@TYPE,0) = 2)
									BEGIN
											
											
											DECLARE @SUM_GROSS_SALARY AS NUMERIC(18,2)
												SET @SUM_GROSS_SALARY = 0
											CREATE TABLE #TBL_CLAIMTRAVEL_EXPENSE
											(	
												SRNO NUMERIC,
												EMP_ID NUMERIC,
												ALPHA_EMP_CODE VARCHAR(128),
												EMP_FULL_NAME VARCHAR(250),
												BRANCH_NAME VARCHAR(128),
												DEPARTMENT VARCHAR(128),
												DESIGNATION VARCHAR(128),
												VERTICAL VARCHAR(128),
												CLAIM_TOTAL_EXPENSE NUMERIC(18,2),
												TRAVEL_TOTAL_EXPENSE NUMERIC(18,2),
												STATUS VARCHAR(50)	
											)
											
											CREATE TABLE #TRAVEL_EXPENSE
											(
												EMP_ID INT,
												ALPHA_EMP_CODE VARCHAR(128),
												EMP_FULL_NAME VARCHAR(250),
												BRANCH_NAME VARCHAR(128),
												DEPARTMENT VARCHAR(128),
												DESIGNATION VARCHAR(128),
												VERTICAL VARCHAR(128),
												APPLICATION_AMOUNT NUMERIC(18,2),
												APPROVED_AMOUNT NUMERIC(18,2)
											)
											CREATE TABLE #TABLE_TEMP_CHECK_NEW
											(
												SRNO			INT,
												EMP_ID			NUMERIC(18,0),
												TOTAL_AMOUNT	NUMERIC(18,2),
												TRAVEL_AMOUNT	NUMERIC(18,2)
											)
										    CREATE TABLE #TBL_FINAL_EXPENSE
											(	
												--SRNO NUMERIC,
												EMP_ID NUMERIC,
												ALPHA_EMP_CODE VARCHAR(128),
												EMP_FULL_NAME VARCHAR(250),
												BRANCH_NAME VARCHAR(128),
												DEPARTMENT VARCHAR(128),
												DESIGNATION VARCHAR(128),
												VERTICAL VARCHAR(128),
												--GROSS_SALARY NUMERIC(18,2),
												CLAIM_TOTAL_EXPENSE NUMERIC(18,2),
												TRAVEL_TOTAL_EXPENSE NUMERIC(18,2),
												STATUS VARCHAR(50)	
											)
									
									
											DECLARE @STRING_NEW AS VARCHAR(MAX)
											SET @STRING_NEW=''
											
											DECLARE @SUM_COLS_NEW VARCHAR(MAX)
											SELECT @SUM_COLS_NEW  = COALESCE(@SUM_COLS_NEW + ',', '') + 'SUM(' + DATA + ') AS ' +DATA
											FROM	dbo.Split(@COLUMNNAME, ',') T 
											
											--- ADDED ON 03052018 FOR TOTAL HEAD COUNT COLUMN ---
											DECLARE @SUM_COLS_HEAD_NEW VARCHAR(MAX)
											SELECT @SUM_COLS_HEAD_NEW  = COALESCE(@SUM_COLS_HEAD_NEW + '+', '') +  DATA
											FROM	dbo.Split(@COLUMNNAME, ',') T 
											
											DECLARE @SUM_COLS_SINGLE_NEW VARCHAR(MAX)
											SELECT @SUM_COLS_SINGLE_NEW  = COALESCE(@SUM_COLS_SINGLE_NEW + ',', '') +  DATA
											FROM	dbo.Split(@COLUMNNAME, ',') T 
											--- END ---
											
											
											SELECT * 
											INTO #TBL_SUMMARY_NEW FROM #TBL_CLAIM_STATUS
											TRUNCATE TABLE #TBL_CLAIM_STATUS
											
											
											-- ROW_NUMBER() OVER (ORDER BY CM.EMP_FULL_NAME) AS ROW_ID
											-- CM.APPLICATION_DATE not possible in summary which will multiple application date getting
											SET @STRING_NEW = 'SELECT ROW_NUMBER() OVER (ORDER BY CM.EMP_FULL_NAME)  AS SRNO,CM.EMP_ID,ALPHA_EMP_CODE,CM.EMP_FULL_NAME AS EMP_FULL_NAME,CM.BRANCH_NAME,CM.DEPARTMENT,
															CM.DESIGNATION,CM.VERTICAL,SUM('+ @SUM_COLS_HEAD_NEW + ') AS TOTAL_AMOUNT,0,CM.STATUS
															FROM	(SELECT EMP_ID,ALPHA_EMP_CODE,EMP_FULL_NAME,BRANCH_NAME,DEPARTMENT,DESIGNATION,VERTICAL,' + @SUM_COLS_NEW + ',STATUS FROM #TBL_SUMMARY_NEW CM  GROUP BY EMP_ID,ALPHA_EMP_CODE,EMP_FULL_NAME,BRANCH_NAME,DEPARTMENT,DESIGNATION,VERTICAL,STATUS) CM
															GROUP BY CM.EMP_ID,CM.ALPHA_EMP_CODE,CM.EMP_FULL_NAME,CM.BRANCH_NAME,CM.DEPARTMENT,CM.DESIGNATION,CM.VERTICAL,CM.STATUS'
													
											INSERT INTO #TBL_CLAIMTRAVEL_EXPENSE
											EXEC(@STRING_NEW)
											
											
											------ ADDED ON 29112018 CASE FOR IF EMPLOYEE CLAIM DOES NOT EXIST IN PARTICULAR THAT PERIOD BUT SALARY IS EXIST THEN RECORD SHOULD GET ----
											INSERT INTO #TBL_CLAIMTRAVEL_EXPENSE
											SELECT  ROW_NUMBER() OVER (ORDER BY EM.EMP_FULL_NAME)  AS SRNO,EM.EMP_ID,EM.ALPHA_EMP_CODE,EM.EMP_FULL_NAME AS EMP_FULL_NAME,BMT.BRANCH_NAME,DT.DEPT_NAME AS DEPARTMENT,
											DM.DESIG_NAME AS DESIGNATION,TVS.VERTICAL_NAME AS VERTICAL,0 AS TOTAL_AMOUNT,0 AS TRAVEL_TOTAL_EXPENSE,'APPROVED' AS [STATUS]
											FROM T0080_EMP_MASTER EM WITH (NOLOCK) INNER JOIN #EMP_CONS EC ON EM.EMP_ID = EC.EMP_ID 
											LEFT OUTER JOIN  (SELECT	I.*
																FROM		dbo.T0095_INCREMENT AS i WITH (NOLOCK) 
																INNER JOIN		(SELECT     MAX(I2.Increment_ID) AS Increment_ID, I2.Emp_ID
																			FROM          dbo.T0095_INCREMENT AS I2 WITH (NOLOCK) INNER JOIN
																									   (SELECT     MAX(Increment_Effective_Date) AS INCREMENT_EFFECTIVE_DATE, Emp_ID
																										 FROM          dbo.T0095_INCREMENT AS I3 WITH (NOLOCK)
																										 WHERE      (Increment_Effective_Date <= GETDATE())
																										 GROUP BY Emp_ID) AS I3 ON I2.Increment_Effective_Date = I3.INCREMENT_EFFECTIVE_DATE AND I2.Emp_ID = I3.Emp_ID
																			GROUP BY I2.Emp_ID) AS I2 ON i.Emp_ID = I2.Emp_ID AND i.Increment_ID = I2.Increment_ID 
											) INC_QRY ON EM.EMP_ID = INC_QRY.EMP_ID 
											LEFT OUTER JOIN T0040_BANK_MASTER BM WITH (NOLOCK) ON INC_QRY.BANK_ID=BM.BANK_ID
											LEFT JOIN T0030_BRANCH_MASTER BMT WITH (NOLOCK) ON INC_QRY.BRANCH_ID = BMT.BRANCH_ID
											LEFT JOIN T0040_DESIGNATION_MASTER DM WITH (NOLOCK) ON INC_QRY.DESIG_ID = DM.DESIG_ID
											LEFT OUTER JOIN T0040_DEPARTMENT_MASTER DT WITH (NOLOCK) ON INC_QRY.DEPT_ID = DT.DEPT_ID
											LEFT OUTER JOIN T0040_VERTICAL_SEGMENT TVS WITH (NOLOCK) ON INC_QRY.VERTICAL_ID = TVS.VERTICAL_ID
											WHERE EC.EMP_ID NOT IN (SELECT EMP_ID FROM #TBL_CLAIMTRAVEL_EXPENSE)
											------ END ADDED ON 29112018 CASE FOR IF EMPLOYEE CLAIM DOES NOT EXIST IN PARTICULAR THAT PERIOD BUT SALARY IS EXIST THEN RECORD SHOULD GET ----
											
									
												
											----- TRAVEL EXPENSE
												
												 INSERT INTO #TRAVEL_EXPENSE
												 SELECT		TAD.EMP_ID,E.ALPHA_EMP_CODE,E.EMP_FULL_NAME,--TAD.TRAN_ID,TAD.TRAVEL_SET_APPLICATION_ID,
															--APPROVAL_DATE,
															--TAD.ADVANCE_AMOUNT,TAD.EXPANCE_INCURED,TAD.APPROVED_EXPANCE,TAD.AMOUNT_DIFFERNCE,TAD.ADJUST_AMOUNT,TAD.PENDING_AMOUNT,
															BM.BRANCH_NAME,DT.DEPT_NAME,DM.DESIG_NAME,TVS.VERTICAL_NAME,
															SUM(TSAE.AMOUNT),SUM(TSAE.APPROVED_AMOUNT)
															--,ETM.EXPENSE_TYPE_NAME,TAD.IS_APR
												 FROM T0150_TRAVEL_SETTLEMENT_APPROVAL TAD WITH (NOLOCK)
												 INNER JOIN T0140_TRAVEL_SETTLEMENT_APPLICATION TSA WITH (NOLOCK) ON TAD.TRAVEL_SET_APPLICATION_ID=TSA.TRAVEL_SET_APPLICATION_ID AND TAD.EMP_ID =TSA.EMP_ID
												 INNER JOIN T0150_TRAVEL_SETTLEMENT_APPROVAL_EXPENSE AS TSAE WITH (NOLOCK) ON TAD.TRAVEL_SET_APPLICATION_ID =TSAE.TRAVEL_SETTLEMENT_ID AND TAD.EMP_ID = TSAE.EMP_ID 
												 INNER JOIN #EMP_CONS EC ON TAD.EMP_ID = EC.EMP_ID 
												 INNER JOIN T0080_EMP_MASTER E WITH (NOLOCK) ON TAD.EMP_ID = E.EMP_ID 
												 INNER JOIN T0010_COMPANY_MASTER CM WITH (NOLOCK) ON TAD.CMP_ID= CM.CMP_ID
												 INNER JOIN
															( SELECT I.EMP_ID , CMP_ID,GRD_ID,BRANCH_ID,CAT_ID,DESIG_ID,DEPT_ID,TYPE_ID,INCREMENT_EFFECTIVE_DATE,VERTICAL_ID FROM T0095_INCREMENT I WITH (NOLOCK) INNER JOIN 
																	( SELECT MAX(INCREMENT_ID) AS INCREMENT_ID , EMP_ID FROM T0095_INCREMENT WITH (NOLOCK)
																	WHERE INCREMENT_EFFECTIVE_DATE <= @TO_DATE
																	AND CMP_ID = @CMP_ID
																	GROUP BY EMP_ID  ) QRY ON
																	I.EMP_ID = QRY.EMP_ID AND I.INCREMENT_ID = QRY.INCREMENT_ID	 ) I_Q 
																ON E.EMP_ID = I_Q.EMP_ID  
												LEFT JOIN T0040_EXPENSE_TYPE_MASTER ETM WITH (NOLOCK) ON TSAE.EXPENSE_TYPE_ID=ETM.EXPENSE_TYPE_ID AND TSAE.CMP_ID=ETM.CMP_ID
												LEFT JOIN T0040_CURRENCY_MASTER CRM WITH (NOLOCK) ON  CRM.CURR_ID=TSAE.CURR_ID
												LEFT JOIN T0030_BRANCH_MASTER BM WITH (NOLOCK) ON I_Q.BRANCH_ID = BM.BRANCH_ID
												LEFT JOIN T0040_DESIGNATION_MASTER DM WITH (NOLOCK) ON I_Q.DESIG_ID = DM.DESIG_ID
												LEFT JOIN T0040_DEPARTMENT_MASTER DT WITH (NOLOCK) ON I_Q.DEPT_ID = DT.DEPT_ID
												LEFT JOIN T0040_VERTICAL_SEGMENT TVS WITH (NOLOCK) ON I_Q.VERTICAL_ID = TVS.VERTICAL_ID
												WHERE  
												TAD.CMP_ID = @CMP_ID AND 
												
												CASE 
													WHEN @FILTER = 0  --- @FILTER FLAG FOR APPROVAL DATE / FOR DATE APPROVED CLAIM 
													THEN CAST(TAD.APPROVAL_DATE AS DATE) 
													ELSE CAST(TSAE.FOR_DATE AS DATE)
												END BETWEEN @FROM_DATE AND @TO_DATE
												
												--TAD.APPROVAL_DATE >=@FROM_DATE AND TAD.APPROVAL_DATE <=@TO_DATE  
												
												GROUP BY TAD.EMP_ID,E.ALPHA_EMP_CODE,E.EMP_FULL_NAME,BM.BRANCH_NAME,DT.DEPT_NAME,DM.DESIG_NAME,TVS.VERTICAL_NAME
												
												ORDER BY CASE WHEN ISNUMERIC(E.ALPHA_EMP_CODE) = 1 THEN RIGHT(REPLICATE('0',21) + E.ALPHA_EMP_CODE, 20)
													WHEN ISNUMERIC(E.ALPHA_EMP_CODE) = 0 THEN LEFT(E.ALPHA_EMP_CODE + REPLICATE('',21), 20)
														ELSE E.ALPHA_EMP_CODE
													END
														
												--- END 
												
												
												
												SET @STRING_TOTAL_AMOUNT = 'INSERT INTO #TABLE_TEMP_CHECK_NEW SELECT 999999,999999 AS EMP_ID,SUM(A.CLAIM_TOTAL_EXPENSE)AS TOTAL_AMOUNT,SUM(B.APPROVED_AMOUNT)AS TRAVEL_AMOUNT FROM #TBL_CLAIMTRAVEL_EXPENSE A FULL JOIN #TRAVEL_EXPENSE B ON A.EMP_ID = B.EMP_ID'
												EXEC(@STRING_TOTAL_AMOUNT)
							
													
												SELECT @SUM_COLS_TOTAL_AMOUNT  = COALESCE(@SUM_COLS_TOTAL_AMOUNT + ',', '') + '0 AS ' +DATA
												FROM	dbo.Split(@COLUMNNAME, ',') T 
												SET @QUERY_CLAIM_TOTAL_AMOUNT ='SELECT SRNO,EMP_ID,'''' AS ALPHA_EMP_CODE,
												(CASE WHEN SRNO=999999 THEN ''TOTAL'' ELSE ''SUBTOTAL'' END) AS EMP_FULL_NAME,'''' AS BRANCH_NAME,'''' AS DEPARTMENT, '''' AS DESIGNATION,'''' AS VERTICAL,
												TOTAL_AMOUNT,TRAVEL_AMOUNT,(CASE WHEN A.SRNO = 999999 THEN ''#008000,#A9A9A9'' ELSE ''#A9A9A9,#ccc'' END) AS STATUS FROM #TABLE_TEMP_CHECK_NEW A'
												
												IF NOT EXISTS(SELECT 1 FROM #TBL_CLAIMTRAVEL_EXPENSE)
													BEGIN
														SELECT ALPHA_EMP_CODE,EMP_FULL_NAME,BRANCH_NAME,DEPARTMENT,DESIGNATION,VERTICAL,CLAIM_TOTAL_EXPENSE,TRAVEL_TOTAL_EXPENSE,[STATUS] FROM #TBL_CLAIMTRAVEL_EXPENSE
														RETURN
													END
												
												INSERT INTO #TBL_CLAIMTRAVEL_EXPENSE
												EXEC (@QUERY_CLAIM_TOTAL_AMOUNT)
												
											
												SET @STRING_NEW = 'SELECT EMP_ID,ALPHA_EMP_CODE,EMP_FULL_NAME AS EMP_FULL_NAME,BRANCH_NAME,DEPARTMENT,
																DESIGNATION,VERTICAL,CLAIM_TOTAL_EXPENSE,TRAVEL_TOTAL_EXPENSE,CM.STATUS
																FROM #TBL_CLAIMTRAVEL_EXPENSE CM
																
																UNION  
																
																SELECT EMP_ID,ALPHA_EMP_CODE,EMP_FULL_NAME AS EMP_FULL_NAME,BRANCH_NAME,DEPARTMENT,
																DESIGNATION,VERTICAL,0 AS CLAIM_TOTAL_EXPENSE,ISNULL(APPROVED_AMOUNT,0) AS TRAVEL_EXPENSE,''APPROVED''  AS [STATUS]
																FROM #TRAVEL_EXPENSE'
												INSERT INTO #TBL_FINAL_EXPENSE
												EXEC(@STRING_NEW)	
												
												
												SELECT ROW_NUMBER() OVER (ORDER BY TBLFNL.EMP_FULL_NAME) AS SRNO,TBLFNL.EMP_ID,TBLFNL.ALPHA_EMP_CODE,TBLFNL.EMP_FULL_NAME,
														TBLFNL.BRANCH_NAME,TBLFNL.DEPARTMENT,
														TBLFNL.DESIGNATION,VERTICAL,ISNULL(TMS.GROSS_SALARY,0) AS GROSS_SALARY,ISNULL(SUM(TBLFNL.CLAIM_TOTAL_EXPENSE),0) AS TOTAL_CLAIM_EXPENSE,ISNULL(SUM(TBLFNL.TRAVEL_TOTAL_EXPENSE),0) AS TOTAL_TRAVEL_EXPENSE,[STATUS] 
												INTO #TABLE_CLAIM_EXPENSE
												FROM #TBL_FINAL_EXPENSE TBLFNL
												LEFT JOIN 
													
													--( 
													--	SELECT	I.EMP_ID,I.BASIC_SALARY,I.CTC,I.GROSS_SALARY
													--	FROM	T0095_INCREMENT I 
													--			INNER JOIN 
													--			( 
													--				SELECT MAX(INCREMENT_ID) AS INCREMENT_ID , EMP_ID 
													--				FROM T0095_INCREMENT 
													--				WHERE INCREMENT_EFFECTIVE_DATE <= @TO_DATE AND CMP_ID = @CMP_ID
													--				GROUP BY EMP_ID 
																	 
													--			) QRY ON I.EMP_ID = QRY.EMP_ID	AND I.INCREMENT_ID = QRY.INCREMENT_ID 
													--)INC_QRY ON TBLFNL.EMP_ID = INC_QRY.EMP_ID 
												
													(	
														SELECT ISNULL(GROSS_SALARY,0) AS GROSS_SALARY,EMP_ID
														FROM T0200_MONTHLY_SALARY  WITH (NOLOCK)
														WHERE MONTH(MONTH_END_DATE) = MONTH(@TO_DATE) AND YEAR(MONTH_END_DATE) = YEAR(@TO_DATE)
													
													) TMS  ON TBLFNL.EMP_ID = TMS.EMP_ID 
												GROUP BY TBLFNL.EMP_ID,TBLFNL.ALPHA_EMP_CODE,TBLFNL.EMP_FULL_NAME,TBLFNL.BRANCH_NAME,TBLFNL.DEPARTMENT,TBLFNL.DESIGNATION,TBLFNL.VERTICAL,TMS.GROSS_SALARY,[STATUS]
													
													
												SELECT	@SUM_GROSS_SALARY = SUM(GROSS_SALARY)
												FROM	#TABLE_CLAIM_EXPENSE
												
												
												
												UPDATE #TABLE_CLAIM_EXPENSE SET GROSS_SALARY = @SUM_GROSS_SALARY
												WHERE EMP_ID=999999 AND EMP_FULL_NAME='TOTAL' 
												
												SELECT * FROM #TABLE_CLAIM_EXPENSE TCE 
												WHERE (ISNULL(TCE.GROSS_SALARY,0) <> 0 OR ISNULL(TCE.TOTAL_CLAIM_EXPENSE,0) <> 0 OR ISNULL(TCE.TOTAL_TRAVEL_EXPENSE,0) <> 0)  ORDER BY EMP_ID
												
										
									END
								ELSE
									BEGIN
									
										
												--IF OBJECT_ID('TEMPDB..#TBL_CLAIM_STATUS') IS NOT NULL
												--	BEGIN
														
												--		--UPDATE	T	
												--		--SET		T.EMP_FULL_NAME = (CASE WHEN B.SRNO = 1 THEN B.EMP_FULL_NAME ELSE NULL END),
												--		--		T.ALPHA_EMP_CODE = (CASE WHEN B.SRNO = 1 THEN B.ALPHA_EMP_CODE ELSE NULL END),
												--		--		--T.BRANCH_NAME = (CASE WHEN B.SRNO = 1 THEN B.BRANCH_NAME ELSE NULL END),
												--		--		--T.DEPARTMENT = (CASE WHEN B.SRNO = 1 THEN B.DEPARTMENT ELSE NULL END),
												--		--		T.EMP_ID = (CASE WHEN B.SRNO = 1 THEN B.EMP_ID ELSE 0 END)
												--		--FROM	#TBL_CLAIM_STATUS T 
												--		--		INNER JOIN	(
												--		--						SELECT	B.SRNO,B.EMP_ID,B.ALPHA_EMP_CODE,B.EMP_FULL_NAME,B.BRANCH_NAME,B.DEPARTMENT,FOR_DATE
												--		--						FROM	#TBL_CLAIM_STATUS B
																				
												--		--					) B ON T.EMP_ID=B.EMP_ID AND T.FOR_DATE=B.FOR_DATE	
														
												--	END
													
												DECLARE @AVG_EMP NUMERIC(18,1)
												SET @AVG_EMP = DATEDIFF(MM,@FROM_DATE,@TO_DATE) + 1
												DECLARE @STRING AS VARCHAR(MAX)
												SET @STRING=''
												
												DECLARE @SUM_COLS VARCHAR(MAX)
												SELECT @SUM_COLS  = COALESCE(@SUM_COLS + ',', '') + 'SUM(' + DATA + ') AS ' +DATA
												FROM	dbo.Split(@COLUMNNAME, ',') T 
												
												--- ADDED ON 03052018 FOR TOTAL HEAD COUNT COLUMN ---
												DECLARE @SUM_COLS_HEAD VARCHAR(MAX)
												SELECT @SUM_COLS_HEAD  = COALESCE(@SUM_COLS_HEAD + '+', '') +  DATA
												FROM	dbo.Split(@COLUMNNAME, ',') T 
												
												DECLARE @SUM_COLS_SINGLE VARCHAR(MAX)
												SELECT @SUM_COLS_SINGLE  = COALESCE(@SUM_COLS_SINGLE + ',', '') +  DATA
												FROM	dbo.Split(@COLUMNNAME, ',') T 
												--- END ---
												
												
												SELECT * 
												INTO #TBL_SUMMARY FROM #TBL_CLAIM_STATUS
												TRUNCATE TABLE #TBL_CLAIM_STATUS
												
												-- ROW_NUMBER() OVER (ORDER BY CM.EMP_FULL_NAME) AS ROW_ID
												-- CM.APPLICATION_DATE not possible in summary which will multiple application date getting
												SET @STRING = 'SELECT ROW_NUMBER() OVER (ORDER BY CM.EMP_FULL_NAME)  AS SRNO,CM.EMP_ID,ALPHA_EMP_CODE,CM.EMP_FULL_NAME AS EMP_FULL_NAME,CM.BRANCH_NAME,CM.DEPARTMENT,CM.GRADE_NAME,
																CM.DESIGNATION,CM.CATEGORY,CM.EMPLOYEE_TYPE,CM.VERTICAL,CM.BANK_ACCOUNT_NUMBER,CM.BANK_NAME,CM.IFSC_CODE,'''' AS APPLICATION_CODE,'''' AS APPLICATION_DATE,'''' AS APPROVAL_CODE,'''' AS APPROVAL_DATE,'''' AS FOR_DATE, ' + @SUM_COLS + ',SUM('+ @SUM_COLS_HEAD + ') AS TOTAL_AMOUNT,CM.STATUS
																FROM	(SELECT EMP_ID,ALPHA_EMP_CODE,EMP_FULL_NAME,BRANCH_NAME,DEPARTMENT,GRADE_NAME,DESIGNATION,CATEGORY,EMPLOYEE_TYPE,VERTICAL,BANK_ACCOUNT_NUMBER,BANK_NAME,IFSC_CODE,'''' AS APPLICATION_CODE,'''' AS APPLICATION_DATE,'''' AS APPROVAL_CODE,'''' AS APPROVAL_DATE,'''' AS FOR_DATE,STATUS,' + @SUM_COLS + ' FROM #TBL_SUMMARY CM  GROUP BY EMP_ID,ALPHA_EMP_CODE,EMP_FULL_NAME,BRANCH_NAME,DEPARTMENT,GRADE_NAME,DESIGNATION,CATEGORY,EMPLOYEE_TYPE,VERTICAL,BANK_ACCOUNT_NUMBER,BANK_NAME,IFSC_CODE,APPLICATION_DATE,STATUS) CM
																GROUP BY CM.EMP_ID,CM.ALPHA_EMP_CODE,CM.EMP_FULL_NAME,CM.BRANCH_NAME,CM.DEPARTMENT,CM.GRADE_NAME,CM.DESIGNATION,CM.CATEGORY,CM.EMPLOYEE_TYPE,CM.VERTICAL,CM.BANK_ACCOUNT_NUMBER,CM.BANK_NAME,CM.IFSC_CODE,APPLICATION_CODE,APPLICATION_DATE,APPROVAL_CODE,APPROVAL_DATE,FOR_DATE,CM.STATUS'
												
												
												INSERT INTO #TBL_CLAIM_STATUS
												EXEC(@STRING)
												
												SET @STRING_TOTAL_AMOUNT = 'INSERT INTO #TABLE_TEMP_CHECK SELECT 999999,(ISNULL(MAX(EMP_ID),0)+1) AS EMP_ID,SUM(TOTAL_AMOUNT)AS TOTAL_AMOUNT FROM #TBL_CLAIM_STATUS'
												EXEC(@STRING_TOTAL_AMOUNT)
												
																							
												SELECT @SUM_COLS_TOTAL_AMOUNT  = COALESCE(@SUM_COLS_TOTAL_AMOUNT + ',', '') + '0 AS ' +DATA
												FROM	dbo.Split(@COLUMNNAME, ',') T 
												SET @QUERY_CLAIM_TOTAL_AMOUNT ='SELECT SRNO,EMP_ID,'''' AS ALPHA_EMP_CODE,
												(CASE WHEN SRNO=999999 THEN ''TOTAL'' ELSE ''SUBTOTAL'' END) AS EMP_FULL_NAME,'''' AS BRANCH_NAME,'''' AS DEPARTMENT, '''' AS GRADE_NAME,'''' AS DESIGNATION,'''' AS CATEGORY,'''' AS EMPLOYEE_TYPE,'''' AS VERTICAL,''0'' AS BANK_ACCOUNT_NUMBER,
												'''' AS BANK_NAME,'''' AS IFSC_CODE,'''' AS APPROVAL_CODE,'''' AS APPLICATION_DATE,'''' AS APPROVAL_CODE,'''' AS APPROVAL_DATE,'''' AS DATE
												,' + @SUM_COLS_TOTAL_AMOUNT + ',TOTAL_AMOUNT,(CASE WHEN A.SRNO = 999999 THEN ''#008000,#A9A9A9'' ELSE ''#A9A9A9,#ccc'' END) AS STATUS FROM #TABLE_TEMP_CHECK A'
												
												INSERT INTO #TBL_CLAIM_STATUS
												EXEC (@QUERY_CLAIM_TOTAL_AMOUNT)
										
												
												
												SET @STRING = 'SELECT CM.SRNO,CM.EMP_ID,ALPHA_EMP_CODE,CM.EMP_FULL_NAME AS EMP_FULL_NAME,CM.BRANCH_NAME,CM.DEPARTMENT,CM.GRADE_NAME,
																CM.DESIGNATION,CM.CATEGORY,CM.EMPLOYEE_TYPE,CM.VERTICAL,CM.BANK_ACCOUNT_NUMBER,CM.BANK_NAME,CM.IFSC_CODE,' + @SUM_COLS_SINGLE + ',CM.TOTAL_AMOUNT,CM.STATUS
																FROM #TBL_CLAIM_STATUS CM'
												
												EXEC(@STRING)			
								
								
								END	
							
								
							END
			
			
			
		END
		ELSE
			BEGIN	
					
					
					--CREATE TABLE #NEW_TEMP_PENDING
					--(		
					--	for_date  datetime,
					--	Emp_ID  numeric(18,0),
					--	Label_name  nvarchar(max),
					--	Label_Amount  numeric(18,2)
					--)
					DECLARE CLAIM_CURSOR CURSOR FOR
					SELECT DISTINCT CLAIM_TYPE FROM #CLAIM_PENDING
					OPEN CLAIM_CURSOR		
					FETCH NEXT FROM CLAIM_CURSOR INTO @CLAIM_NAME
					WHILE @@FETCH_STATUS = 0
						BEGIN
							
							SET @CLAIM_NAME = REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(LTRIM(RTRIM(@CLAIM_NAME)),'+','_'),'''','_'),',','_'),'.','_'),'  ',' '),'%',''),'-',' '),'@',''),'(',''),')',''),' ','_'),'__','_'),'__','_'),'/','')
							SET @VAL = 'ALTER TABLE   #TOTAL_CLAIM_PENDING ADD ' + REPLACE(@CLAIM_NAME,' ','_') + ' VARCHAR(255) DEFAULT 0 NOT NULL'
							EXEC (@VAL)	
							SET @VAL = ''
							SET @COLUMN = @COLUMN +  REPLACE(RTRIM(LTRIM(@CLAIM_NAME)),' ','_') + '#'
							FETCH NEXT FROM CLAIM_CURSOR INTO @CLAIM_NAME
						END
					CLOSE CLAIM_CURSOR	
					DEALLOCATE CLAIM_CURSOR		
					
					DECLARE @CTC_COLUMNS_PENDING NVARCHAR(100)
					DECLARE @CTC_AD_FLAG_PENDING VARCHAR(1)
					DECLARE @ALLOW_AMOUNT_PENDING VARCHAR(500)--NUMERIC(18,2)
					DECLARE @CLAIM_APR_AMOUNT_PENDING NUMERIC(18,2)
					SET @CLAIM_APR_AMOUNT_PENDING =0
					
						SET @VAL = 'ALTER TABLE   #TOTAL_CLAIM_PENDING ADD APPROVED_AMOUNT VARCHAR(255)'
						EXEC (@VAL);
					
						
						DECLARE @CLAIM_APR_ID_PENDING AS NUMERIC(18,0)	
						DECLARE CLAIM_CURSOR CURSOR FOR
						SELECT DISTINCT CLAIM_APP_DTL_ID FROM #CLAIM_PENDING  
						OPEN CLAIM_CURSOR
						FETCH NEXT FROM CLAIM_CURSOR INTO @CLAIM_APR_ID
						WHILE @@FETCH_STATUS = 0
								BEGIN
										DECLARE CRU_COLUMNS CURSOR FOR
										SELECT DATA FROM SPLIT(@COLUMN,'#') WHERE DATA <> ''
											OPEN CRU_COLUMNS
											FETCH NEXT FROM CRU_COLUMNS INTO @CTC_COLUMNS_PENDING
											WHILE @@FETCH_STATUS = 0
												BEGIN					
														BEGIN
															SET @CTC_COLUMNS_PENDING = REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(LTRIM(RTRIM(@CTC_COLUMNS_PENDING)),'+','_'),'''','_'),',','_'),'.','_'),'  ',' '),'%',''),'-',' '),'@',''),'(',''),')',''),' ','_'),'__','_'),'__','_')
															BEGIN 
															
																PRINT @CTC_COLUMNS_PENDING
																SELECT @ALLOW_AMOUNT_PENDING=ISNULL(AMOUNT,0) FROM #CLAIM_PENDING 
																WHERE  REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(LTRIM(RTRIM(CLAIM_TYPE)),'+','_'),'''','_'),',','_'),'.','_'),'  ',' '),'%',''),'-',' '),'@',''),'(',''),')',''),' ','_'),'__','_'),'__','_')  = @CTC_COLUMNS_PENDING 
																AND CLAIM_APP_DTL_ID= @CLAIM_APR_ID 
																
																SET @VAL = 	'UPDATE    #TOTAL_CLAIM_PENDING SET ' + @CTC_COLUMNS_PENDING + ' =  ''' + CONVERT(NVARCHAR,ISNULL(@ALLOW_AMOUNT_PENDING,0)) + ''' WHERE    #TOTAL_CLAIM_PENDING.CLAIM_APP_DTL_ID = ' + CONVERT(NVARCHAR,@CLAIM_APR_ID)
																EXEC (@VAL)	
																
															END	
															SET @ALLOW_AMOUNT_PENDING = 0
														END
														
													FETCH NEXT FROM CRU_COLUMNS INTO @CTC_COLUMNS_PENDING
												END
									CLOSE CRU_COLUMNS	
									DEALLOCATE CRU_COLUMNS		
										
										 UPDATE  #TOTAL_CLAIM_PENDING SET APPROVED_AMOUNT = C.AMOUNT
										 FROM  #TOTAL_CLAIM_PENDING TC INNER JOIN 
											(	
												SELECT CLAIM_APP_DTL_ID, SUM(CAST(AMOUNT AS NUMERIC(18,2))) AS AMOUNT FROM #CLAIM_PENDING
												GROUP BY CLAIM_APP_DTL_ID
											) C ON TC.CLAIM_APP_DTL_ID =C.CLAIM_APP_DTL_ID
										
										WHERE TC.CLAIM_APP_DTL_ID=@CLAIM_APR_ID	
																							
									FETCH NEXT FROM CLAIM_CURSOR INTO @CLAIM_APR_ID
								END
						CLOSE CLAIM_CURSOR	
						DEALLOCATE CLAIM_CURSOR			 
					
					
						
						SET @COLUMN = ' ' + @COLUMN
						SET  @COLUMN = REPLACE(@COLUMN,'#','# ')
						SET @COLUMN=@COLUMN+'APPROVED_AMOUNT'+'#'--+'PETROLKM'+'#'
						
						
						 
						DECLARE @TABLE_NAME_PENDING SYSNAME
						SELECT @TABLE_NAME_PENDING = '#TOTAL_CLAIM_PENDING'
						DECLARE @QUERY_PENDING AS NVARCHAR(MAX)
						SET @QUERY_PENDING =''
						
						DROP TABLE MY_TEMP
						DECLARE @SQL_PENDING NVARCHAR(MAX)
						SELECT @SQL_PENDING = '
								SELECT Emp_ID,APPLICATION_DATE,for_Date,Clam_apr_ID_1 as Claim_apr_ID,Reim_Type,Amount,Claim_Status into my_temp
								FROM ' + @TABLE_NAME_PENDING + ' 
								UNPIVOT (
									Amount FOR Reim_Type IN ( 
										' +  LEFT(replace(@Column,'#',','), LEN(replace(@Column,'#',','))-1)  + '
									) 
							 )  unpiv where Amount <> ''0.00'''
						EXEC(@SQL_PENDING);
						
					
						UPDATE MY_TEMP SET REIM_TYPE = ' ' + REIM_TYPE WHERE REIM_TYPE <>'APPROVED_AMOUNT'
						
						
						
						CREATE TABLE #TBL_CLAIM_STATUS_PENDING
						(
							SRNO NUMERIC,
							EMP_ID NUMERIC,
							ALPHA_EMP_CODE VARCHAR(128),
							EMP_FULL_NAME VARCHAR(250),
							BRANCH_NAME VARCHAR(128),
							DEPARTMENT VARCHAR(128),
							GRADE_NAME VARCHAR(128),
							DESIGNATION VARCHAR(128),
							CATEGORY VARCHAR(128),
							EMPLOYEE_TYPE VARCHAR(128),
							VERTICAL VARCHAR(128),
							APPLICATION_DATE VARCHAR(128),
							FOR_DATE VARCHAR(128)
																	
						)
						
						
						DECLARE @COLUMNNAME_PENDING VARCHAR(MAX)
						SELECT @COLUMNNAME_PENDING= ISNULL(@COLUMNNAME_PENDING + ',','') 
							   + QUOTENAME(LTRIM(REIM_TYPE))
						FROM (SELECT DISTINCT REIM_TYPE FROM MY_TEMP WHERE REIM_TYPE <> 'PURPOSE' AND REIM_TYPE <> 'APPROVED_AMOUNT') AS REIM_TYPE
					  
						 
						SELECT @QUERYCLAIM = COALESCE(@QUERYCLAIM + ';', '') + '
								ALTER TABLE #TBL_CLAIM_STATUS_PENDING ADD ' + DATA + ' NUMERIC(18,2) '
						FROM	dbo.Split(@COLUMNNAME_PENDING, ',') T
						
						EXEC(@QUERYCLAIM)
						
						ALTER TABLE #TBL_CLAIM_STATUS_PENDING ADD TOTAL_AMOUNT NUMERIC(18,2)
						ALTER TABLE #TBL_CLAIM_STATUS_PENDING ADD STATUS VARCHAR(16)
							 
						
						SET @QUERYCLAIM ='INSERT INTO #TBL_CLAIM_STATUS_PENDING(SRNO,EMP_ID,ALPHA_EMP_CODE,EMP_FULL_NAME,BRANCH_NAME,DEPARTMENT,GRADE_NAME,DESIGNATION,CATEGORY,EMPLOYEE_TYPE,VERTICAL,APPLICATION_DATE,FOR_DATE,' + @COLUMNNAME_PENDING + ',TOTAL_AMOUNT,STATUS)
						SELECT ROW_NUMBER() OVER (PARTITION BY EMP_FULL_NAME ORDER BY FOR_DATE DESC ) AS SRNO,EMP_ID,ALPHA_EMP_CODE,
						EMP_FULL_NAME,BRANCH_NAME,DEPARTMENT,GRADE_NAME,DESIGNATION,CATEGORY,EMPLOYEE_TYPE,VERTICAL,APPLICATION_DATE,FOR_DATE,
						 ' + @COLUMNNAME_PENDING + ',TOTAL_AMOUNT,STATUS
						  FROM
						 (
											
								  SELECT   
								  --ROW_NUMBER() OVER (PARTITION BY E.EMP_FULL_NAME ORDER BY E.EMP_FULL_NAME DESC ) AS RANK,
								  E.EMP_ID,
								  E.ALPHA_EMP_CODE AS ALPHA_EMP_CODE,
								  E.EMP_FULL_NAME,
								  BM.BRANCH_NAME,    
								  DT.DEPT_NAME AS DEPARTMENT,  
								  (GM.GRD_NAME)AS GRADE_NAME,
								  (DM.DESIG_NAME) AS DESIGNATION,
								  (CM.CAT_NAME) AS CATEGORY,
								  (TM.TYPE_NAME) AS EMPLOYEE_TYPE,
								  (TVS.VERTICAL_NAME) AS VERTICAL,
								  LTRIM(C.REIM_TYPE)AS REIM_TYPE,
								  CONVERT(VARCHAR(11), C.APPLICATION_DATE,105)AS APPLICATION_DATE,
								  CONVERT(VARCHAR(11), C.FOR_DATE,105)AS FOR_DATE,
								  C.AMOUNT,
								  (CASE WHEN C.CLAIM_STATUS=''P'' THEN ''PENDING'' ELSE ''PENDING'' END) AS STATUS
								  ,AMOUNT1 AS TOTAL_AMOUNT
								  ,C.Claim_Apr_ID
								  FROM MY_TEMP C INNER JOIN 			  
								   (
								    --CLAIM_APR_ID,
									SELECT  CLAIM_APR_ID,EMP_ID,FOR_DATE,SUM(CAST(AMOUNT AS NUMERIC(18,2))) AS AMOUNT1 FROM MY_TEMP WHERE REIM_TYPE=''APPROVED_AMOUNT''
									GROUP BY EMP_ID,FOR_DATE,CLAIM_APR_ID) Q ON C.EMP_ID = Q.EMP_ID AND C.FOR_DATE=Q.FOR_DATE AND C.CLAIM_APR_ID=Q.CLAIM_APR_ID INNER JOIN
									DBO.T0080_EMP_MASTER E WITH (NOLOCK) ON C.EMP_ID = E.EMP_ID 
									INNER JOIN #EMP_CONS EC ON E.EMP_ID = EC.EMP_ID 
									INNER JOIN (		SELECT T0095_INCREMENT.EMP_ID, CAT_ID, GRD_ID, DEPT_ID, DESIG_ID, BRANCH_ID, TYPE_ID, BANK_ID, CURR_ID, WAGES_TYPE
														, SALARY_BASIS_ON, BASIC_SALARY, GROSS_SALARY, INC_BANK_AC_NO, EMP_OT, EMP_LATE_MARK, EMP_FULL_PF, EMP_PT, EMP_FIX_SALARY
														, EMP_PART_TIME, LATE_DEDU_TYPE, EMP_CHILDRAN, CENTER_ID
														, SALDATE_ID, SEGMENT_ID, VERTICAL_ID, SUBVERTICAL_ID, SUBBRANCH_ID	
														FROM T0095_INCREMENT WITH (NOLOCK)
														INNER JOIN (
																		SELECT MAX(I.INCREMENT_ID) AS INCREMENT_ID, I.EMP_ID 
																		FROM T0095_INCREMENT I WITH (NOLOCK)
																		INNER JOIN 
																		(
																		SELECT MAX(INCREMENT_EFFECTIVE_DATE) AS FOR_DATE, EMP_ID 
																		FROM T0095_INCREMENT  WITH (NOLOCK)
																		WHERE INCREMENT_EFFECTIVE_DATE <= '''+ CAST(@TO_DATE AS VARCHAR(11)) +''' AND CMP_ID = ''' + CAST(@CMP_ID AS VARCHAR(10)) + '''
																		GROUP BY EMP_ID
																		)I3 ON I.INCREMENT_EFFECTIVE_DATE=I3.FOR_DATE AND I.EMP_ID=I3.EMP_ID	
																		GROUP BY I.EMP_ID 
																		
																	) QRY ON T0095_INCREMENT.EMP_ID = QRY.EMP_ID AND T0095_INCREMENT.Increment_ID = QRY.INCREMENT_ID  --INCREMENT_EFFECTIVE_DATE = QRY.FOR_DATE   
													WHERE CMP_ID = ''' + CAST(@CMP_ID AS VARCHAR(10)) + '''
												) INC_QRY ON E.EMP_ID = INC_QRY.EMP_ID 
									INNER JOIN T0010_COMPANY_MASTER COM WITH (NOLOCK) ON COM.CMP_ID = E.CMP_ID
									INNER JOIN T0040_GRADE_MASTER GM WITH (NOLOCK) ON INC_QRY.GRD_ID = GM.GRD_ID
									INNER JOIN T0030_BRANCH_MASTER BM WITH (NOLOCK) ON INC_QRY.BRANCH_ID = BM.BRANCH_ID
									INNER JOIN T0040_DESIGNATION_MASTER DM WITH (NOLOCK) ON INC_QRY.DESIG_ID = DM.DESIG_ID	
									LEFT JOIN T0040_TYPE_MASTER TM WITH (NOLOCK) ON INC_QRY.TYPE_ID = TM.TYPE_ID			
									LEFT JOIN T0030_CATEGORY_MASTER CM WITH (NOLOCK) ON INC_QRY.CAT_ID = CM.CAT_ID					
									LEFT OUTER JOIN T0040_DEPARTMENT_MASTER DT WITH (NOLOCK) ON INC_QRY.DEPT_ID = DT.DEPT_ID
									LEFT OUTER JOIN T0040_VERTICAL_SEGMENT TVS WITH (NOLOCK) ON INC_QRY.VERTICAL_ID = TVS.VERTICAL_ID
									
									
						) QRY 
						
						PIVOT
						(
						  MAX(AMOUNT)
						  FOR REIM_TYPE IN (' + @COLUMNNAME_PENDING + ')
						) PIV ORDER BY ALPHA_EMP_CODE,FOR_DATE DESC'
						
						EXEC (@QUERYCLAIM)
						
						------- DECLARATION ADDED ON 01052018 ------
						
						DECLARE @STRING_TOTAL_AMOUNT_PENDING AS NVARCHAR(MAX)
						DECLARE @SUM_COLS_TOTAL_AMOUNT_PENDING VARCHAR(MAX)
						DECLARE @QUERY_CLAIM_TOTAL_AMOUNT_PENDING VARCHAR(MAX)
						CREATE TABLE #TABLE_PENDING_GRAND_TOTAL
						(
							SRNO INT,
							EMP_ID NUMERIC(18,0),
							TOTAL_AMOUNT NUMERIC(18,2)
						)
						
						-------- END ----------
						
						IF(ISNULL(@TYPE,0) = 1)
							BEGIN
										IF OBJECT_ID('TEMPDB..#TBL_CLAIM_STATUS_PENDING') IS NOT NULL
											BEGIN
											
											
												UPDATE	T	
												SET		T.EMP_FULL_NAME = (CASE WHEN B.SRNO = 1 THEN B.EMP_FULL_NAME ELSE NULL END),
														T.ALPHA_EMP_CODE = (CASE WHEN B.SRNO = 1 THEN B.ALPHA_EMP_CODE ELSE NULL END),
														T.BRANCH_NAME = (CASE WHEN B.SRNO = 1 THEN B.BRANCH_NAME ELSE NULL END),
														T.GRADE_NAME = (CASE WHEN B.SRNO = 1 THEN B.GRADE_NAME ELSE NULL END),
														T.DEPARTMENT = (CASE WHEN B.SRNO = 1 THEN B.DEPARTMENT ELSE NULL END),
														T.DESIGNATION = (CASE WHEN B.SRNO = 1 THEN B.DESIGNATION ELSE NULL END),
														T.CATEGORY = (CASE WHEN B.SRNO = 1 THEN B.CATEGORY ELSE NULL END),
														T.EMPLOYEE_TYPE = (CASE WHEN B.SRNO = 1 THEN B.EMPLOYEE_TYPE ELSE NULL END),
														T.VERTICAL = (CASE WHEN B.SRNO = 1 THEN B.VERTICAL ELSE NULL END)
														--T.BANK_NAME = (CASE WHEN B.SRNO = 1 THEN B.BANK_NAME ELSE NULL END),
														--T.IFSC_CODE = (CASE WHEN B.SRNO = 1 THEN B.IFSC_CODE ELSE NULL END)
												FROM	#TBL_CLAIM_STATUS_PENDING T 
														INNER JOIN	(
																		SELECT	B.SRNO,B.EMP_ID,B.ALPHA_EMP_CODE,B.EMP_FULL_NAME,B.BRANCH_NAME,B.DEPARTMENT,FOR_DATE,GRADE_NAME,DESIGNATION,CATEGORY,EMPLOYEE_TYPE,VERTICAL
																		FROM	#TBL_CLAIM_STATUS_PENDING B
																		
																	) B ON T.EMP_ID=B.EMP_ID AND T.FOR_DATE=B.FOR_DATE	
												
										
											---------------------- ADDED ON 01052018 CODE FOR TOTAL HEAD  ----------------
											
											SET @STRING_TOTAL_AMOUNT_PENDING = 'INSERT INTO #TABLE_PENDING_GRAND_TOTAL SELECT (ISNULL(MAX(SRNO),0)+1),EMP_ID AS EMP_ID,SUM(TOTAL_AMOUNT)AS TOTAL_AMOUNT FROM #TBL_CLAIM_STATUS_PENDING GROUP BY EMP_ID'
											EXEC(@STRING_TOTAL_AMOUNT_PENDING)
											
											SET @STRING_TOTAL_AMOUNT_PENDING = 'INSERT INTO #TABLE_PENDING_GRAND_TOTAL SELECT 999999,(ISNULL(MAX(EMP_ID),0)+1) AS EMP_ID,SUM(TOTAL_AMOUNT)AS TOTAL_AMOUNT FROM #TBL_CLAIM_STATUS_PENDING'
											EXEC(@STRING_TOTAL_AMOUNT_PENDING)
																		
																		
										    SELECT @SUM_COLS_TOTAL_AMOUNT  = COALESCE(@SUM_COLS_TOTAL_AMOUNT + ',', '') + '0 AS ' +DATA
											FROM	dbo.Split(@COLUMNNAME_PENDING, ',') T 
											
											SET @QUERY_CLAIM_TOTAL_AMOUNT_PENDING ='SELECT SRNO,EMP_ID,'''' AS ALPHA_EMP_CODE,
											(CASE WHEN SRNO=999999 THEN ''TOTAL'' ELSE ''SUBTOTAL'' END) AS EMP_FULL_NAME,'''' AS BRANCH_NAME,'''' AS DEPARTMENT, '''' AS GRADE_NAME,'''' AS DESIGNATION,'''' AS CATEGORY,'''' AS EMPLOYEE_TYPE,'''' AS VERTICAL,'''' AS APPLICATION_DATE,'''' AS DATE
											 ,' + @SUM_COLS_TOTAL_AMOUNT + ',TOTAL_AMOUNT,(CASE WHEN A.SRNO = 999999 THEN ''#008000,#A9A9A9'' ELSE ''#A9A9A9,#ccc'' END) AS STATUS FROM #TABLE_PENDING_GRAND_TOTAL A'
											
											INSERT INTO #TBL_CLAIM_STATUS_PENDING
											EXEC (@QUERY_CLAIM_TOTAL_AMOUNT_PENDING)
											
											------------------------ END --------------------------------
												
											SELECT  * FROM #TBL_CLAIM_STATUS_PENDING CSP ORDER BY CSP.EMP_ID,SRNO
											DROP TABLE #TBL_CLAIM_STATUS_PENDING
												
											END
										ELSE
											BEGIN
														RAISERROR('@@RECORDS NOT EXIST !!!@@',16,2)
											END
							END
						ELSE
							BEGIN
							
							
								SELECT @SUM_COLS  = COALESCE(@SUM_COLS + ',', '') + 'SUM(' + DATA + ') AS ' +DATA
								FROM	dbo.Split(@COLUMNNAME_PENDING, ',') T 
								
								--- ADDED ON 03052018 FOR TOTAL HEAD COUNT COLUMN ---
								DECLARE @SUM_COLS_PENDING_HEAD VARCHAR(MAX)
								SELECT @SUM_COLS_PENDING_HEAD  = COALESCE(@SUM_COLS_PENDING_HEAD + '+', '') +  DATA
								FROM	dbo.Split(@COLUMNNAME_PENDING, ',') T 
								
								DECLARE @SUM_COLS_PENDING_SINGLE VARCHAR(MAX)
								SELECT @SUM_COLS_PENDING_SINGLE  = COALESCE(@SUM_COLS_PENDING_SINGLE + ',', '') +  DATA
								FROM	dbo.Split(@COLUMNNAME_PENDING, ',') T 
								
								
								SELECT * 
								INTO #TBL_SUMMARY_PENDING FROM #TBL_CLAIM_STATUS_PENDING
								TRUNCATE TABLE #TBL_CLAIM_STATUS_PENDING
								
								
								SET @STRING = 'SELECT ROW_NUMBER() OVER (ORDER BY CM.EMP_FULL_NAME)  AS SRNO,CM.EMP_ID,ALPHA_EMP_CODE,CM.EMP_FULL_NAME AS EMP_FULL_NAME,CM.BRANCH_NAME,CM.DEPARTMENT,CM.GRADE_NAME,
												CM.DESIGNATION,CM.CATEGORY,CM.EMPLOYEE_TYPE,CM.VERTICAL,'''' as APPLICATION_DATE,'''' as FOR_DATE, ' + @SUM_COLS + ',SUM('+ @SUM_COLS_PENDING_HEAD + ') AS TOTAL_AMOUNT,CM.STATUS
												FROM	(SELECT EMP_ID,ALPHA_EMP_CODE,EMP_FULL_NAME,BRANCH_NAME,DEPARTMENT,GRADE_NAME,DESIGNATION,CATEGORY,EMPLOYEE_TYPE,VERTICAL,'''' as APPLICATION_DATE,'''' as FOR_DATE,STATUS,' + @SUM_COLS + ' FROM #TBL_SUMMARY_PENDING CM  GROUP BY EMP_ID,ALPHA_EMP_CODE,EMP_FULL_NAME,BRANCH_NAME,DEPARTMENT,GRADE_NAME,DESIGNATION,CATEGORY,EMPLOYEE_TYPE,VERTICAL,APPLICATION_DATE,FOR_DATE,STATUS) CM
												GROUP BY CM.EMP_ID,CM.ALPHA_EMP_CODE,CM.EMP_FULL_NAME,CM.BRANCH_NAME,CM.DEPARTMENT,CM.GRADE_NAME,CM.DESIGNATION,CM.CATEGORY,CM.EMPLOYEE_TYPE,CM.VERTICAL,CM.APPLICATION_DATE,CM.FOR_DATE,CM.STATUS'
								
								INSERT INTO #TBL_CLAIM_STATUS_PENDING
								EXEC(@STRING)
								
								SET @STRING_TOTAL_AMOUNT_PENDING = 'INSERT INTO #TABLE_PENDING_GRAND_TOTAL SELECT 999999,(ISNULL(MAX(EMP_ID),0)+1) AS EMP_ID,SUM(TOTAL_AMOUNT)AS TOTAL_AMOUNT FROM #TBL_CLAIM_STATUS_PENDING'
								EXEC(@STRING_TOTAL_AMOUNT_PENDING)
														
								SELECT @SUM_COLS_TOTAL_AMOUNT_PENDING  = COALESCE(@SUM_COLS_TOTAL_AMOUNT_PENDING + ',', '') + '0 AS ' +DATA
								FROM	dbo.Split(@COLUMNNAME_PENDING, ',') T 
								SET @QUERY_CLAIM_TOTAL_AMOUNT_PENDING ='SELECT SRNO,EMP_ID,'''' AS ALPHA_EMP_CODE,
								(CASE WHEN SRNO=999999 THEN ''TOTAL'' ELSE ''SUBTOTAL'' END) AS EMP_FULL_NAME,'''' AS BRANCH_NAME,'''' AS DEPARTMENT, '''' AS GRADE_NAME,'''' AS DESIGNATION,'''' AS CATEGORY,'''' AS EMPLOYEE_TYPE,'''' AS VERTICAL,
								'''' AS APPLICATION_DATE,'''' AS DATE
								,' + @SUM_COLS_TOTAL_AMOUNT_PENDING + ',TOTAL_AMOUNT,(CASE WHEN A.SRNO = 999999 THEN ''#008000,#A9A9A9'' ELSE ''#A9A9A9,#ccc'' END) AS STATUS FROM #TABLE_PENDING_GRAND_TOTAL A'
								
								INSERT INTO #TBL_CLAIM_STATUS_PENDING
								EXEC (@QUERY_CLAIM_TOTAL_AMOUNT_PENDING)
								
								ALTER TABLE #TBL_CLAIM_STATUS_PENDING DROP COLUMN APPLICATION_DATE,FOR_DATE
								SELECT * FROM #TBL_CLAIM_STATUS_PENDING
								
							END
						
						
			
			END

Return
		



