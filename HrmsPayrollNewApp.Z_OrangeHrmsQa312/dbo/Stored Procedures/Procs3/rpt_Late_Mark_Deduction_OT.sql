

-- =============================================
-- AUTHOR:		NILESH PATEL
-- CREATE DATE: 03-06-2016 
-- DESCRIPTION:	LATE MARK DEDUCTION FOR OT HOURS 
-- =============================================
CREATE PROCEDURE [dbo].[rpt_Late_Mark_Deduction_OT]
	 @CMP_ID   NUMERIC  
	 ,@FROM_DATE  DATETIME  
	 ,@TO_DATE   DATETIME   
	 ,@BRANCH_ID  NUMERIC  
	 ,@CAT_ID   NUMERIC   
	 ,@GRD_ID   NUMERIC  
	 ,@TYPE_ID   NUMERIC  
	 ,@DEPT_ID   NUMERIC  
	 ,@DESIG_ID   NUMERIC  
	 ,@EMP_ID   NUMERIC  
	 ,@CONSTRAINT  VARCHAR(MAX)  
	 ,@FORMAT_TYPE VARCHAR(50) = ''
	 ,@REPORT_TYPE TINYINT = 0
	 ,@USED_TABLE TINYINT = 0 
AS

        SET NOCOUNT ON 
		SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
		SET ARITHABORT ON

BEGIN

	
	
	IF @BRANCH_ID = 0    
	  SET @BRANCH_ID = NULL  
	    
	 IF @CAT_ID = 0    
	  SET @CAT_ID = NULL  
	  
	 IF @GRD_ID = 0    
	  SET @GRD_ID = NULL  
	  
	 IF @TYPE_ID = 0    
	  SET @TYPE_ID = NULL  
	  
	 IF @DEPT_ID = 0    
	  SET @DEPT_ID = NULL  
	  
	 IF @DESIG_ID = 0    
	  SET @DESIG_ID = NULL  
	  
	 IF @EMP_ID = 0    
	  SET @EMP_ID = NULL  
	
	IF OBJECT_ID('TEMPDB..#EMP_CONS') IS NULL
	BEGIN
		CREATE TABLE #EMP_CONS 
		 (      
			EMP_ID NUMERIC ,     
			BRANCH_ID NUMERIC,
			INCREMENT_ID NUMERIC    
		 )       
		
		EXEC SP_RPT_FILL_EMP_CONS  @CMP_ID,@FROM_DATE,@TO_DATE,@BRANCH_ID,@CAT_ID,@GRD_ID,@TYPE_ID,@DEPT_ID,@DESIG_ID ,@EMP_ID ,@CONSTRAINT 
		
		CREATE UNIQUE CLUSTERED INDEX IX_EMP_CONS_EMPID ON #EMP_CONS (EMP_ID);	
	END
	
	CREATE TABLE #EMP_LATE   
	  (  
		   EMP_ID   NUMERIC ,  
		   CMP_ID   NUMERIC ,  
		   INCREMENT_ID NUMERIC,  
		   FOR_DATE  DATETIME ,  
		   IN_TIME   DATETIME ,  
		   SHIFT_TIME  DATETIME ,  
		   LATE_SEC  INT DEFAULT 0 ,  
		   LATE_LIMIT_SEC INT DEFAULT 0,  
		   LATE_HOUR  VARCHAR(10), 
		   BRANCH_ID NUMERIC,
		   LATE_LIMIT VARCHAR(100),
		   OUT_TIME   DATETIME,		
		   SHIFT_ID	   NUMERIC,	
		   SHIFT_END_TIME  DATETIME,	
		   SHIFT_MAX_ST_TIME DATETIME,
		   SHIFT_MAX_ED_TIME DATETIME,
		   LATE_DEDUCT_DAYS NUMERIC(18,2) DEFAULT 0, 
		   IS_LATE TINYINT DEFAULT 0 ,
		   IS_MAXIMUM_LATE TINYINT DEFAULT 0,
		   IS_LATE_CALC_HO_WO TINYINT DEFAULT 0,
		   LATE_DEDUCTION_TYPE VARCHAR(10) DEFAULT '',
		   Sum_of_Hours Numeric(18,2) Default 0,
		   Sum_of_Days Numeric(18,2) Default 0
	  ) 
	CREATE NONCLUSTERED INDEX IX_EMP_LATE_EMPID_FOR_DATE ON #EMP_LATE(EMP_ID,FOR_DATE) ;  
	CREATE TABLE #DATA      
	(     
		EMP_ID     NUMERIC ,     
		FOR_DATE   DATETIME,    
		DURATION_IN_SEC  NUMERIC,    
		SHIFT_ID   NUMERIC ,    
		SHIFT_TYPE   NUMERIC ,    
		EMP_OT    NUMERIC ,    
		EMP_OT_MIN_LIMIT NUMERIC,    
		EMP_OT_MAX_LIMIT NUMERIC,    
		P_DAYS    NUMERIC(12,2) DEFAULT 0,    
		OT_SEC    NUMERIC DEFAULT 0,
		IN_TIME DATETIME DEFAULT NULL,
		SHIFT_START_TIME DATETIME DEFAULT NULL,
		OT_START_TIME NUMERIC DEFAULT 0,
		SHIFT_CHANGE TINYINT DEFAULT 0 ,
		FLAG INT DEFAULT 0  ,
		WEEKOFF_OT_SEC  NUMERIC DEFAULT 0,
		HOLIDAY_OT_SEC  NUMERIC DEFAULT 0,
		CHK_BY_SUPERIOR NUMERIC DEFAULT 0,
		IO_TRAN_ID	   NUMERIC DEFAULT 0,
		OUT_TIME DATETIME DEFAULT NULL,
		SHIFT_END_TIME DATETIME,		
		OT_END_TIME NUMERIC DEFAULT 0,	
		WORKING_HRS_ST_TIME TINYINT DEFAULT 0, 
		WORKING_HRS_END_TIME TINYINT DEFAULT 0,
		GATEPASS_DEDUCT_DAYS NUMERIC(18,2) DEFAULT 0 
	)  
	CREATE NONCLUSTERED INDEX IX_DATA ON DBO.#DATA(EMP_ID,SHIFT_ID,FOR_DATE) 
	  
	
	
	INSERT INTO #EMP_LATE  (EMP_ID,CMP_ID,FOR_DATE,LATE_LIMIT_SEC,INCREMENT_ID,BRANCH_ID,LATE_LIMIT)  
		SELECT E.EMP_ID,CMP_ID,FOR_DATE,DBO.F_RETURN_SEC(EMP_LATE_LIMIT),IQ.INCREMENT_ID,IQ.BRANCH_ID,EMP_LATE_LIMIT
		FROM T0150_EMP_INOUT_RECORD E WITH (NOLOCK)
				INNER JOIN #EMP_CONS EC ON E.EMP_ID =EC.EMP_ID 
				INNER JOIN  
				(
					SELECT I.EMP_ID,EMP_LATE_LIMIT,EMP_LATE_MARK,I.INCREMENT_ID,BRANCH_ID,EMP_EARLY_MARK,
					EMP_EARLY_LIMIT FROM T0095_INCREMENT I WITH (NOLOCK) INNER JOIN   
					(
						SELECT MAX(I2.INCREMENT_ID) AS INCREMENT_ID , I2.EMP_ID 
						FROM T0095_INCREMENT I2 WITH (NOLOCK) INNER JOIN #EMP_CONS E ON I2.EMP_ID=E.EMP_ID
						WHERE INCREMENT_EFFECTIVE_DATE <= @TO_DATE AND CMP_ID = @CMP_ID GROUP BY I2.EMP_ID 
				    ) QRY ON I.EMP_ID = QRY.EMP_ID AND I.INCREMENT_ID = QRY.INCREMENT_ID
				    
			)IQ ON E.EMP_ID =IQ.EMP_ID AND EMP_LATE_MARK =1    
	   WHERE FOR_DATE >=@FROM_DATE AND FOR_DATE <=@TO_DATE AND E.CMP_ID =@CMP_ID 
			 AND E.CHK_BY_SUPERIOR = 0 
				OR (E.CHK_BY_SUPERIOR = 1 AND (E.IS_CANCEL_EARLY_OUT = 0  OR E.IS_CANCEL_LATE_IN = 0)) 
				OR (E.CHK_BY_SUPERIOR = 2 AND (E.IS_CANCEL_EARLY_OUT = 0 OR E.IS_CANCEL_LATE_IN = 0))	
	   GROUP BY E.EMP_ID ,E.CMP_ID,E.FOR_DATE,EMP_LATE_LIMIT,IQ.INCREMENT_ID,IQ.BRANCH_ID,EMP_EARLY_LIMIT 
	   
	   
	   UPDATE #EMP_LATE SET IN_TIME  = Q.IN_TIME,
						  OUT_TIME = CASE WHEN Q4.MAX_IN_DATE > Q2.OUT_TIME THEN 
										Q4.MAX_IN_DATE 
									 ELSE 
										Q2.OUT_TIME 
									 END
		 FROM #EMP_LATE  EL INNER JOIN   
		 (
			SELECT EIR.EMP_ID,FOR_DATE,MIN(IN_TIME )IN_TIME FROM T0150_EMP_INOUT_RECORD EIR WITH (NOLOCK) INNER JOIN 
			#EMP_CONS EC ON EIR.EMP_ID =EC.EMP_ID 
			WHERE FOR_DATE BETWEEN @FROM_DATE AND @TO_DATE 
			GROUP BY EIR.EMP_ID,EIR.FOR_DATE 
		  )Q ON EL.EMP_ID =Q.EMP_ID AND EL.FOR_DATE =Q.FOR_DATE  
		 INNER JOIN 
		 (
				SELECT EIR.EMP_ID,FOR_DATE,MAX(OUT_TIME)OUT_TIME FROM T0150_EMP_INOUT_RECORD EIR WITH (NOLOCK) INNER JOIN	
				#EMP_CONS EC ON EIR.EMP_ID =EC.EMP_ID 
				WHERE FOR_DATE BETWEEN @FROM_DATE AND @TO_DATE 
				GROUP BY EIR.EMP_ID,EIR.FOR_DATE 
		 )Q2 ON EL.EMP_ID =Q2.EMP_ID AND EL.FOR_DATE =Q2.FOR_DATE  
		 INNER JOIN 
		 (
			SELECT EIR.EMP_ID, MAX(IN_TIME) MAX_IN_DATE,FOR_DATE FROM DBO.T0150_EMP_INOUT_RECORD EIR WITH (NOLOCK)
			INNER JOIN	#EMP_CONS EC ON EIR.EMP_ID =EC.EMP_ID 
			WHERE FOR_DATE BETWEEN @FROM_DATE AND @TO_DATE 
			GROUP BY EIR.EMP_ID,EIR.FOR_DATE  
		 ) Q4 ON EL.EMP_ID = Q4.EMP_ID AND EL.FOR_DATE = Q4.FOR_DATE
		 LEFT OUTER JOIN 
		 (
			SELECT EIR.EMP_ID,CHK_BY_SUPERIOR CHK_BY_SUP,FOR_DATE FROM DBO.T0150_EMP_INOUT_RECORD EIR WITH (NOLOCK)
			INNER JOIN	#EMP_CONS EC ON EIR.EMP_ID =EC.EMP_ID WHERE CHK_BY_SUPERIOR <> 0
		 ) Q3 ON EL.EMP_ID = Q3.EMP_ID AND EL.FOR_DATE = Q3.FOR_DATE
		 
		 
		 IF OBJECT_ID('TEMPDB..#EMP_HW_CONS') IS NULL
			BEGIN
				
				CREATE TABLE #EMP_HW_CONS
				(
					EMP_ID				NUMERIC,
					WEEKOFFDATE			VARCHAR(MAX),
					WEEKOFFCOUNT		NUMERIC(3,1),
					CANCELWEEKOFF		VARCHAR(MAX),
					CANCELWEEKOFFCOUNT	NUMERIC(3,1),
					HOLIDAYDATE			VARCHAR(MAX),
					HOLIDAYCOUNT		NUMERIC(3,1),
					HALFHOLIDAYDATE		VARCHAR(MAX),
					HALFHOLIDAYCOUNT	NUMERIC(3,1),
					CANCELHOLIDAY		VARCHAR(MAX),
					CANCELHOLIDAYCOUNT	NUMERIC(3,1)
				)
				CREATE UNIQUE CLUSTERED INDEX IX_EMP_HW_CONS_EMPID ON #EMP_HW_CONS(EMP_ID)
				
				EXEC SP_GET_HW_ALL @CONSTRAINT=@CONSTRAINT,@CMP_ID=@CMP_ID, @FROM_DATE=@FROM_DATE, @TO_DATE=@TO_DATE, @ALL_WEEKOFF = 0, @EXEC_MODE=0
			END
		
		DECLARE @FOR_DATE DATETIME   
	DECLARE @SHIFT_ST_TIME  VARCHAR(10)  
	DECLARE @SHIFT_ST_DATETIME DATETIME  
	DECLARE @IN_DATE   DATETIME  
	DECLARE @VAR_SHIFT_ST_DATE VARCHAR(20)  
	DECLARE @EMP_LATE_LIMIT  VARCHAR(10)  
	DECLARE @LATE_LIMIT_SEC  NUMERIC  
	DECLARE @STRWEEKOFF_DATE VARCHAR(MAX)
	DECLARE @STRHOLIDAY_DATE VARCHAR(MAX)
	DECLARE @IS_LATE_CALC_ON_HO_WO TINYINT
	DECLARE @TEMP_BRANCH_ID NUMERIC
	DECLARE @IS_LATEMARK AS TINYINT
	DECLARE @SHIFT_END_TIME  VARCHAR(10)
	DECLARE @SHIFT_END_DATETIME DATETIME  
	DECLARE @OUT_DATE   DATETIME  
	DECLARE @VAR_SHIFT_END_DATE VARCHAR(20) 
	DECLARE @MAX_LATE_LIMIT  VARCHAR(10)  
	DECLARE @SHIFT_MAX_DATETIME DATETIME
	DECLARE @IS_EARLYMARK AS TINYINT
	DECLARE @EMP_EARLY_LIMIT  VARCHAR(10)  
	DECLARE @EARLY_LIMIT_SEC  NUMERIC  
	DECLARE @IS_EARLY_CALC_ON_HO_WO TINYINT
	DECLARE @MAX_EARLY_LIMIT  VARCHAR(10)  
	DECLARE @SHIFT_END_MAX_DATETIME DATETIME
	DECLARE @EMP_LATEMARK AS TINYINT
	DECLARE @EMP_EARLYMARK AS TINYINT
	DECLARE @IS_HALFDAY VARCHAR(15) 
	DECLARE @SHIFT_DAY VARCHAR(15)  
	DECLARE @ROUNDINGVALUE 	NUMERIC(18,2)
	DECLARE @ROUNDINGVALUE_EARLY 	NUMERIC(18,2)
	DECLARE @PREVIOUS_EMP_ID AS NUMERIC(18,0)
	DECLARE @PREVIOUS_BRANCH_ID AS NUMERIC(18,0)
	DECLARE @LATE_IS_SLABWISE TINYINT
	DECLARE @EARLY_IS_SLABWISE TINYINT
	
	DECLARE @EXTRA_COUNT_EXEMPTION NUMERIC(18,2)
	DECLARE @EXTRA_EXEMPTION_LIMIT VARCHAR(10)
	DECLARE @TEMP_EXTRA_COUNT AS NUMERIC(18,2)
	DECLARE @EXTRA_EXEMPTION AS NUMERIC(18,2)
	DECLARE @LATE_MARK_SCENARIO AS NUMERIC(5,0)
	
	SET @EXTRA_COUNT_EXEMPTION = 0
	SET @EXTRA_EXEMPTION_LIMIT = 0
	SET @TEMP_EXTRA_COUNT = 0
	SET @EXTRA_EXEMPTION = 0
	SET @LATE_MARK_SCENARIO = 0

	SET @IS_LATEMARK = 1
	SET @IS_LATE_CALC_ON_HO_WO = 0
	SET @IS_EARLYMARK = 1
	SET @IS_EARLY_CALC_ON_HO_WO = 0
	SET @EMP_LATEMARK = 1
	SET @EMP_EARLY_LIMIT = 1     
	SET @ROUNDINGVALUE 	= 0
	SET @ROUNDINGVALUE_EARLY = 0
	SET @PREVIOUS_EMP_ID = 0
	SET @PREVIOUS_BRANCH_ID = 0
	SET @LATE_IS_SLABWISE = 0
	SET @EARLY_IS_SLABWISE = 0
	
	IF (OBJECT_ID('TEMPDB..#ROTATION') IS NULL)
		CREATE TABLE #ROTATION 
		(
			R_EMPID NUMERIC(18,0), 
			R_DAYNAME VARCHAR(25), 
			R_SHIFTID NUMERIC(18,0), 
			R_EFFECTIVE_DATE DATETIME
		);
		
	IF EXISTS(SELECT 1 FROM T0050_SHIFT_ROTATION_MASTER WITH (NOLOCK) WHERE CMP_ID=@CMP_ID)
		EXEC DBO.P0050_UNPIVOT_EMP_ROTATION @CMP_ID, NULL, @TO_DATE, @CONSTRAINT
		
	DECLARE @SHIFT_ID NUMERIC(18,0);
	
	DECLARE CURLATE CURSOR FOR 
		SELECT EMP_ID,FOR_DATE,IN_TIME,LATE_LIMIT_SEC,BRANCH_ID,OUT_TIME
		FROM #EMP_LATE ORDER BY EMP_ID,FOR_DATE
	    
	    OPEN CURLATE  
			FETCH NEXT FROM CURLATE INTO @EMP_ID,@FOR_DATE,@IN_DATE,@LATE_LIMIT_SEC,@TEMP_BRANCH_ID,@OUT_DATE
			WHILE @@FETCH_STATUS = 0   
				BEGIN	
						IF @PREVIOUS_BRANCH_ID <> @TEMP_BRANCH_ID
							BEGIN					
								SELECT  @IS_LATE_CALC_ON_HO_WO = IS_LATE_CALC_ON_HO_WO,
										@IS_LATEMARK = IS_LATE_MARK,
										@ROUNDINGVALUE = ISNULL(EARLY_HOUR_UPPER_ROUNDING,0),
										@ROUNDINGVALUE_EARLY = ISNULL(LATE_HOUR_UPPER_ROUNDING,0),
										@LATE_MARK_SCENARIO = ISNULL(LATE_MARK_SCENARIO,1)
								FROM DBO.T0040_GENERAL_SETTING WITH (NOLOCK) WHERE BRANCH_ID = @TEMP_BRANCH_ID AND CMP_ID = @CMP_ID AND
								FOR_DATE = (
												SELECT MAX(FOR_DATE) FROM T0040_GENERAL_SETTING WITH (NOLOCK)
												WHERE CMP_ID = @CMP_ID AND FOR_DATE <= @TO_DATE AND BRANCH_ID = @TEMP_BRANCH_ID
										    )
							END
						
						IF @PREVIOUS_EMP_ID <> @EMP_ID
							BEGIN	
								SET @STRWEEKOFF_DATE = ''
								SET @STRHOLIDAY_DATE = ''	
							
								SELECT	@STRWEEKOFF_DATE=HW.WEEKOFFDATE, @STRHOLIDAY_DATE = HW.HOLIDAYDATE + ISNULL(HW.HALFHOLIDAYDATE,'')
								FROM	#EMP_HW_CONS HW
								WHERE	EMP_ID=@EMP_ID
							END
							
						SET @SHIFT_ID = NULL;
						SELECT	@SHIFT_ID=SHIFT_ID
						FROM	T0100_EMP_SHIFT_DETAIL ESD WITH (NOLOCK)
						WHERE	ESD.CMP_ID=@CMP_ID AND ESD.EMP_ID=@EMP_ID AND ESD.SHIFT_TYPE=1 AND 
								ESD.EMP_ID NOT IN (	
													SELECT R_EMPID FROM #ROTATION WHERE R_EFFECTIVE_DATE<=@FOR_DATE 
												) 
								AND ESD.FOR_DATE=@FOR_DATE
						
						IF (@SHIFT_ID IS NULL)
							BEGIN
								SELECT	@SHIFT_ID=SHIFT_ID
								FROM	T0100_EMP_SHIFT_DETAIL ESD WITH (NOLOCK)
								WHERE	ESD.CMP_ID=@CMP_ID AND ESD.EMP_ID=@EMP_ID AND 
										ESD.EMP_ID IN (	
															SELECT R_EMPID FROM #ROTATION WHERE R_EFFECTIVE_DATE<=@FOR_DATE
														) 
										AND ESD.FOR_DATE=@FOR_DATE
							END
						
						IF (@SHIFT_ID IS NULL) BEGIN	
								SELECT	@SHIFT_ID = R_SHIFTID
								FROM	#ROTATION R 
								WHERE	R.R_EMPID=@EMP_ID AND R.R_DAYNAME='DAY' + CAST(DATEPART(D, @FOR_DATE) AS VARCHAR) AND
										R.R_EFFECTIVE_DATE=(
															SELECT MAX(R_EFFECTIVE_DATE) FROM #ROTATION R1 
															WHERE R1.R_EMPID=R.R_EMPID AND R1.R_EFFECTIVE_DATE <=@FOR_DATE
															)									
								IF (@SHIFT_ID IS NULL) BEGIN								
									SELECT	@SHIFT_ID=SHIFT_ID
									FROM	T0100_EMP_SHIFT_DETAIL ESD WITH (NOLOCK)
									WHERE	ESD.CMP_ID=@CMP_ID AND ESD.EMP_ID=@EMP_ID AND 
											ESD.FOR_DATE=(
															SELECT MAX(FOR_DATE) FROM T0100_EMP_SHIFT_DETAIL ESD1 WITH (NOLOCK)
															WHERE ESD1.CMP_ID=ESD.CMP_ID AND ESD1.EMP_ID=ESD.EMP_ID AND
															ESD1.FOR_DATE<=@FOR_DATE
														 )
								END
							END
							
						SELECT	@IS_HALFDAY=SM.WEEK_DAY 
						FROM	T0040_SHIFT_MASTER SM WITH (NOLOCK)
						WHERE	SM.SHIFT_ID=@SHIFT_ID AND SM.CMP_ID=@CMP_ID
						
						UPDATE #EMP_LATE SET SHIFT_ID = @SHIFT_ID , 
						IS_LATE_CALC_HO_WO = @IS_LATE_CALC_ON_HO_WO
						WHERE EMP_ID=@EMP_ID AND FOR_DATE =@FOR_DATE  AND CMP_ID = @CMP_ID  -- ADDED BY GADRIWALA MUSLIM 30062015
					
						SET @SHIFT_DAY = DATENAME(WEEKDAY,@IN_DATE) 
						
						IF @SHIFT_DAY=@IS_HALFDAY
							BEGIN
								SELECT	@SHIFT_ST_TIME=SM.HALF_ST_TIME,@SHIFT_END_TIME=SM.HALF_END_TIME	
								FROM	T0040_SHIFT_MASTER SM WITH (NOLOCK)
								WHERE	SM.CMP_ID=@CMP_ID AND SM.SHIFT_ID=@SHIFT_ID
							END
						ELSE
							BEGIN
								SELECT	@SHIFT_ST_TIME=SM.SHIFT_ST_TIME,@SHIFT_END_TIME=SM.SHIFT_END_TIME
								FROM	T0040_SHIFT_MASTER SM WITH (NOLOCK)
								WHERE	SM.CMP_ID=@CMP_ID AND SM.SHIFT_ID=@SHIFT_ID
							END
							
						SET @VAR_SHIFT_ST_DATE = CAST(@IN_DATE AS VARCHAR(11)) + ' '  + @SHIFT_ST_TIME
						
						IF @SHIFT_ST_TIME > @SHIFT_END_TIME
							BEGIN							
								SET @VAR_SHIFT_END_DATE = ISNULL(CAST(@OUT_DATE AS VARCHAR(11)),CAST(@IN_DATE AS VARCHAR(11))) + ' '  + @SHIFT_END_TIME	
							END
						ELSE
							BEGIN											
								SET @VAR_SHIFT_END_DATE = ISNULL(CAST(@IN_DATE AS VARCHAR(11)),CAST(@OUT_DATE AS VARCHAR(11))) + ' '  + @SHIFT_END_TIME	
							END  
						
						SET @SHIFT_MAX_DATETIME = DATEADD(S,DBO.F_RETURN_SEC(@MAX_LATE_LIMIT),@VAR_SHIFT_ST_DATE)  
						SET @SHIFT_END_MAX_DATETIME = DATEADD(S,DBO.F_RETURN_SEC(@MAX_EARLY_LIMIT)*(-1) ,@VAR_SHIFT_END_DATE)  
						SET @SHIFT_ST_DATETIME = CAST(@VAR_SHIFT_ST_DATE AS DATETIME)  
						SET @SHIFT_ST_DATETIME = DATEADD(S,@LATE_LIMIT_SEC,@SHIFT_ST_DATETIME)  
						SET @SHIFT_END_DATETIME = CAST(@VAR_SHIFT_END_DATE AS DATETIME)
						
						UPDATE #EMP_LATE  
						SET SHIFT_MAX_ST_TIME=@SHIFT_MAX_DATETIME
						,SHIFT_MAX_ED_TIME = @SHIFT_END_MAX_DATETIME
						,Shift_End_Time = @SHIFT_END_DATETIME
						WHERE EMP_ID=@EMP_ID AND FOR_DATE =@FOR_DATE 
					            
						SELECT @EMP_LATEMARK=I.EMP_LATE_MARK, @EMP_EARLYMARK = I.EMP_EARLY_MARK FROM T0095_INCREMENT I WITH (NOLOCK)
						INNER JOIN   
							( 
								SELECT MAX(INCREMENT_ID) AS INCREMENT_ID , EMP_ID FROM T0095_INCREMENT WITH (NOLOCK) 
								WHERE INCREMENT_EFFECTIVE_DATE <= @TO_DATE AND CMP_ID = @CMP_ID  
								GROUP BY EMP_ID  
							) QRY ON  
						I.EMP_ID = QRY.EMP_ID AND I.INCREMENT_ID = QRY.INCREMENT_ID   
						WHERE I.EMP_ID=@EMP_ID  
						
						IF @IS_LATEMARK = 1
							BEGIN
								IF @EMP_LATEMARK = 1
									BEGIN
										IF @IS_LATE_CALC_ON_HO_WO = 1
											BEGIN      											
												UPDATE #EMP_LATE  
												SET SHIFT_TIME =@SHIFT_ST_DATETIME
												WHERE EMP_ID=@EMP_ID AND FOR_DATE =@FOR_DATE  
											END
										ELSE
											BEGIN	   
												IF CHARINDEX(CAST(@FOR_DATE AS VARCHAR(11)),@STRWEEKOFF_DATE,0) <> 0 OR CHARINDEX(CAST(@FOR_DATE AS VARCHAR(11)),@STRHOLIDAY_DATE,0) <> 0 
													BEGIN	
													  UPDATE #EMP_LATE  
													  SET IN_TIME =@SHIFT_ST_DATETIME,SHIFT_TIME =@SHIFT_ST_DATETIME
													  WHERE EMP_ID=@EMP_ID AND FOR_DATE =@FOR_DATE  
													END
												ELSE
													BEGIN
														UPDATE #EMP_LATE  
														SET SHIFT_TIME =@SHIFT_ST_DATETIME  
														WHERE EMP_ID=@EMP_ID AND FOR_DATE =@FOR_DATE  
													END
											END
									 END
								ELSE
									BEGIN
											UPDATE #EMP_LATE SET IN_TIME =@SHIFT_ST_DATETIME,
												SHIFT_TIME =@SHIFT_ST_DATETIME WHERE EMP_ID=@EMP_ID AND FOR_DATE =@FOR_DATE  
									END	
							END
						ELSE
							BEGIN
								UPDATE #EMP_LATE 
								SET IN_TIME = @SHIFT_ST_DATETIME,
								SHIFT_TIME =@SHIFT_ST_DATETIME,
								SHIFT_END_TIME=@SHIFT_END_DATETIME ,
								OUT_TIME=@SHIFT_END_DATETIME      
								WHERE EMP_ID=@EMP_ID AND FOR_DATE =@FOR_DATE 
							END 
						
						SET @PREVIOUS_BRANCH_ID = @TEMP_BRANCH_ID
						SET @PREVIOUS_EMP_ID = @EMP_ID
				FETCH NEXT FROM CURLATE INTO @EMP_ID,@FOR_DATE,@IN_DATE,@LATE_LIMIT_SEC,@TEMP_BRANCH_ID,@OUT_DATE
				END 
	CLOSE CURLATE
	DEALLOCATE CURLATE 
	
	
	UPDATE #EMP_LATE
		SET 
			LATE_SEC =	CASE WHEN (DATEPART(HH,DATEADD(SECOND,-LATE_LIMIT_SEC,SHIFT_TIME)) = 0 AND IN_TIME < DATEADD(D,1,FOR_DATE) ) THEN  DATEDIFF(S,DATEADD(D,1,FOR_DATE),IN_TIME)
						ELSE DATEDIFF(S,SHIFT_TIME,IN_TIME) END,
			LATE_HOUR = DBO.F_RETURN_HOURS (DATEDIFF(S,SHIFT_TIME,IN_TIME)),
			IS_LATE = 1
	WHERE DATEDIFF(S,SHIFT_TIME,IN_TIME) > 0
	
	UPDATE #EMP_LATE SET 
			LATE_SEC = 0,LATE_HOUR = 0
			WHERE DATEDIFF(S,SHIFT_TIME,IN_TIME) > 0 AND 
					(
						IN_TIME >= SHIFT_TIME AND IN_TIME <= SHIFT_MAX_ST_TIME 
						AND DATEDIFF(S,DATEADD(S,-1*LATE_LIMIT_SEC,SHIFT_TIME),SHIFT_END_TIME)<=DATEDIFF(S,IN_TIME,OUT_TIME)
					)
					
	UPDATE #EMP_LATE  
			SET LATE_SEC = 0,LATE_HOUR = 0
			WHERE LATE_SEC < 60
			
	UPDATE #EMP_LATE  SET 
			LATE_SEC = 0,LATE_HOUR = 0
	FROM #EMP_LATE EL
	INNER JOIN(
				SELECT LA.LEAVE_APPROVAL_ID,LA.EMP_ID,LAD.TO_DATE FROM T0120_LEAVE_APPROVAL LA WITH (NOLOCK)
				INNER JOIN T0130_LEAVE_APPROVAL_DETAIL LAD WITH (NOLOCK) ON LA.LEAVE_APPROVAL_ID = LAD.LEAVE_APPROVAL_ID
				WHERE LEAVE_ASSIGN_AS = 'FIRST HALF' AND APPROVAL_STATUS = 'A'
			  ) QRY 
	ON QRY.EMP_ID = EL.EMP_ID AND QRY.TO_DATE = EL.FOR_DATE
					
	UPDATE #EMP_LATE  SET 
			LATE_SEC = 0,LATE_HOUR = 0
	FROM #EMP_LATE EL 
	INNER JOIN (
					SELECT LA.LEAVE_APPROVAL_ID,LA.EMP_ID,LAD.TO_DATE,LEAVE_OUT_TIME ,LEAVE_IN_TIME  
					FROM T0120_LEAVE_APPROVAL LA WITH (NOLOCK) INNER JOIN T0130_LEAVE_APPROVAL_DETAIL LAD WITH (NOLOCK) ON LA.LEAVE_APPROVAL_ID = LAD.LEAVE_APPROVAL_ID
					WHERE UPPER(LEAVE_ASSIGN_AS) = 'PART DAY' AND APPROVAL_STATUS = 'A'
				) QRY 
	ON QRY.EMP_ID = EL.EMP_ID AND QRY.TO_DATE = EL.FOR_DATE AND QRY.LEAVE_OUT_TIME =EL.SHIFT_MAX_ST_TIME  --AND QRY.LEAVE_OUT_TIME =EL.SHIFT_TIME -- CHANGED BY ROHIT ON 20042016
 
	UPDATE #EMP_LATE
	SET LATE_SEC = 0 ,LATE_HOUR = 0
	FROM #EMP_LATE EL
	INNER JOIN ( SELECT CHK_BY_SUPERIOR,IS_CANCEL_EARLY_OUT,IS_CANCEL_LATE_IN,EMP_ID,FOR_DATE 
					FROM T0150_EMP_INOUT_RECORD E WITH (NOLOCK) WHERE 
					FOR_DATE >=@FROM_DATE AND FOR_DATE <=@TO_DATE AND E.CMP_ID =@CMP_ID AND CHK_BY_SUPERIOR <> 0 AND IS_CANCEL_LATE_IN =  1)QRY		--CHANGED BY RAMIZ ON 29/03/2016 , PREVIOUSLY IT WAS CHK_BY_SUPERIOR = 1 , BUT AS NOW CHK_BY_SUPERIOR = 2 IS ALSO INCLUDED , SO CONDITION IS CHANGED
	ON QRY.EMP_ID =EL.EMP_ID AND QRY.FOR_DATE = EL.FOR_DATE 
	
	DECLARE @ABSENT_EMP_ID AS NUMERIC(18,0)
	DECLARE @ABSENT_FOR_DATE AS DATETIME
	DECLARE @ABSENT_BRANCH_ID AS NUMERIC(18,0)
		
	CREATE TABLE #SHIFT_DETAILS
	(
		ROW_ID NUMERIC(18,0),
		SHIFT_ID NUMERIC(18,0),
		CALCULATE_DAYS NUMERIC(18,2),
		FROM_HOUR NUMERIC(18,2),
		TO_HOUR NUMERIC(18,2)
	)
		
	INSERT INTO #SHIFT_DETAILS
	SELECT ROW_NUMBER() OVER ( PARTITION BY SD.SHIFT_ID ORDER BY SD.SHIFT_ID,CALCULATE_DAYS) AS ROW_ID,
	SD.SHIFT_ID,CALCULATE_DAYS,FROM_HOUR,TO_HOUR  
	FROM T0050_SHIFT_DETAIL SD WITH (NOLOCK) INNER JOIN #EMP_LATE EL ON EL.SHIFT_ID = SD.SHIFT_ID  ORDER BY SD.SHIFT_ID,CALCULATE_DAYS 
		
	DECLARE @ABS_CONSTRAINT VARCHAR(MAX);
		
	SELECT @ABS_CONSTRAINT= COALESCE(@ABS_CONSTRAINT + '#', '') + CAST(EMP_ID AS VARCHAR(18)) 
	FROM
		(SELECT DISTINCT EMP_ID FROM #EMP_LATE WHERE IS_LATE = 1 AND FOR_DATE >= @FROM_DATE AND FOR_DATE <= @TO_DATE AND OUT_TIME IS NULL 
		UNION -- RECORDS WHICH CALCULATE DAYS GREATER THAN 0 CHECK FOR ABSENT
		SELECT EL.EMP_ID FROM #EMP_LATE EL INNER JOIN
		#SHIFT_DETAILS QRY ON QRY.SHIFT_ID = EL.SHIFT_ID AND QRY.ROW_ID = 1
		WHERE  EL.IS_LATE = 1 AND DATEDIFF(S,IN_TIME,OUT_TIME)/3600  < FROM_HOUR  AND OUT_TIME IS NOT NULL 
		AND CALCULATE_DAYS > 0   AND EL.FOR_DATE >= @FROM_DATE AND EL.FOR_DATE <= @TO_DATE	
		UNION   -- RECORDS WHICH CALCULATE DAYS IS 0 CHECK FOR ABSENT
		SELECT EL.EMP_ID FROM #EMP_LATE EL INNER JOIN
		#SHIFT_DETAILS QRY ON QRY.SHIFT_ID = EL.SHIFT_ID AND QRY.ROW_ID = 1
		WHERE  EL.IS_LATE = 1 AND DATEDIFF(S,IN_TIME,OUT_TIME)/3600  >= FROM_HOUR AND  DATEDIFF(S,IN_TIME,OUT_TIME)/3600  <= TO_HOUR  AND OUT_TIME IS NOT NULL 
		AND CALCULATE_DAYS = 0   AND EL.FOR_DATE >= @FROM_DATE AND EL.FOR_DATE <= @TO_DATE) T
		
	DECLARE @ABS_FROM_DATE DATETIME,@ABS_TO_DATE DATETIME;
				
				
	SELECT @ABS_FROM_DATE= MIN(FOR_DATE),@ABS_TO_DATE= MAX(FOR_DATE) 
		FROM 
		(SELECT DISTINCT FOR_DATE FROM #EMP_LATE WHERE IS_LATE = 1 AND FOR_DATE >= @FROM_DATE AND FOR_DATE <= @TO_DATE AND OUT_TIME IS NULL 
		UNION -- RECORDS WHICH CALCULATE DAYS GREATER THAN 0 CHECK FOR ABSENT
		SELECT EL.FOR_DATE FROM #EMP_LATE EL INNER JOIN
		#SHIFT_DETAILS QRY ON QRY.SHIFT_ID = EL.SHIFT_ID AND QRY.ROW_ID = 1
		WHERE  EL.IS_LATE = 1 AND DATEDIFF(S,IN_TIME,OUT_TIME)/3600  < FROM_HOUR  AND OUT_TIME IS NOT NULL 
		AND CALCULATE_DAYS > 0   AND EL.FOR_DATE >= @FROM_DATE AND EL.FOR_DATE <= @TO_DATE	
		UNION   -- RECORDS WHICH CALCULATE DAYS IS 0 CHECK FOR ABSENT
		SELECT EL.FOR_DATE FROM #EMP_LATE EL INNER JOIN
		#SHIFT_DETAILS QRY ON QRY.SHIFT_ID = EL.SHIFT_ID AND QRY.ROW_ID = 1
		WHERE  EL.IS_LATE = 1 AND DATEDIFF(S,IN_TIME,OUT_TIME)/3600  >= FROM_HOUR AND  DATEDIFF(S,IN_TIME,OUT_TIME)/3600  <= TO_HOUR  AND OUT_TIME IS NOT NULL 
		AND CALCULATE_DAYS = 0   AND EL.FOR_DATE >= @FROM_DATE AND EL.FOR_DATE <= @TO_DATE) T
		
		
	EXEC DBO.SP_CALCULATE_PRESENT_DAYS @CMP_ID =@CMP_ID,@FROM_DATE=@ABS_FROM_DATE,@TO_DATE=@ABS_TO_DATE,@BRANCH_ID=0,@CAT_ID=0,@GRD_ID=0,@TYPE_ID=0,@DEPT_ID=0,@DESIG_ID=0,@EMP_ID=0,@CONSTRAINT=@ABS_CONSTRAINT,@RETURN_RECORD_SET=4,@STRWEEKOFF_DATE='',@IS_SPLIT_SHIFT_REQ=1 ,@LATE_SP=1  

		
	UPDATE	#EMP_LATE SET IS_LATE = 0 FROM #EMP_LATE EL
				INNER JOIN  #DATA D ON EL.FOR_DATE = D.FOR_DATE AND EL.EMP_ID = D.EMP_ID  AND D.P_DAYS = 0
	WHERE CMP_ID = @CMP_ID 
		
	UPDATE	#EMP_LATE SET IS_LATE = 1 
	FROM #EMP_LATE EL
				INNER JOIN  #DATA D ON EL.FOR_DATE = D.FOR_DATE AND EL.EMP_ID = D.EMP_ID  AND D.P_DAYS = 0
	WHERE CMP_ID = @CMP_ID AND ( EL.IS_LATE_CALC_HO_WO = 1 AND ( D.WEEKOFF_OT_SEC > 0 OR D.HOLIDAY_OT_SEC > 0))
	
	DECLARE @GEN_ID AS NUMERIC(18,0)
	DECLARE @LATE_LIMIT VARCHAR(10)
	DECLARE @LATE_ADJ_DAY NUMERIC(18,2)
	DECLARE @LATE_DEDUCTION_DAYS NUMERIC(18,2)
	DECLARE @LATE_CF_RESET_ON VARCHAR(10)
	DECLARE @IS_LATE_CF TINYINT
	DECLARE @LATE_WITH_LEAVE NUMERIC(18,2)
	DECLARE @LATE_COUNT_EXEMPTION NUMERIC(18,2)
	DECLARE @LATE_HOUR_UPPER_ROUNDING NUMERIC(18,2)
	DECLARE @LATE_EXEMPTION_LIMIT VARCHAR(10)
	
	DECLARE @EARLY_LIMIT VARCHAR(10)
	DECLARE @EARLY_ADJ_DAY NUMERIC(18,2)
	DECLARE @EARLY_DEDUCTION_DAYS NUMERIC(18,2)
	DECLARE @EARLY_EXTRA_DEDUCTION NUMERIC(18,2)
	DECLARE @EARLY_CF_RESET_ON VARCHAR(10)
	DECLARE @IS_EARLY_CF TINYINT
	DECLARE @EARLY_WITH_LEAVE NUMERIC(18,2)
	DECLARE @EARLY_COUNT_EXEMPTION NUMERIC(18,2)
	DECLARE @EARLY_CALCULATE_TYPE VARCHAR(10)
	DECLARE @EARLY_EXEMPTION_LIMIT VARCHAR(10)
		
	DECLARE @LATE_CALCULATE_TYPE VARCHAR(10)
	DECLARE @LATE_EXTRA_DEDUCTION NUMERIC(18,2)
	DECLARE @LATE_EXEMPTED_COUNT NUMERIC(18,0)
	DECLARE @EARLY_EXEMPTED_COUNT NUMERIC(18,0)
	DECLARE @TOTAL_LATE_ADJUST_DAYS NUMERIC(18,2)
	DECLARE @TOTAL_EARLY_ADJUST_DAYS NUMERIC(18,2)
	DECLARE @SHIFT_TIME_SEC NUMERIC(18,0)
	DECLARE @WORKING_TIME_SEC NUMERIC(18,0)
	
	DECLARE @CUR_EMP_ID NUMERIC(18,0)
	DECLARE @CUR_BRANCH_ID NUMERIC(18,0)
	DECLARE @CUR_CMP_ID NUMERIC(18,0)
	DECLARE @CUR_FOR_DATE DATETIME
	DECLARE @CUR_LATE_HOUR VARCHAR(10)
	DECLARE @CUR_EARLY_HOUR VARCHAR(10)
	DECLARE @CUR_LATE_SECONDS NUMERIC(18,0)
	DECLARE @CUR_EARLY_SECONDS NUMERIC(18,0)
	DECLARE @CUR_IN_TIME AS DATETIME
	DECLARE @CUR_OUT_TIME AS DATETIME
	DECLARE @CUR_SHIFT_ST_TIME AS DATETIME
	DECLARE @CUR_SHIFT_END_TIME AS DATETIME
	DECLARE @CUR_LATE_LIMIT_SEC AS NUMERIC(18,0) 
	DECLARE @CUR_EARLY_LIMIT_SEC AS NUMERIC(18,0) 
	
	SET @LATE_EXEMPTED_COUNT = 0
	SET @PREVIOUS_EMP_ID = 0
	SET @PREVIOUS_BRANCH_ID = 0
	SET @TOTAL_LATE_ADJUST_DAYS = 0
	SET @TOTAL_EARLY_ADJUST_DAYS = 0
	SET @SHIFT_TIME_SEC = 0
	SET @WORKING_TIME_SEC = 0
	
	IF OBJECT_ID('TEMPDB.DBO.#LATE_MARK_SLAB') IS NOT NULL
		DROP TABLE #LATE_MARK_SLAB
    
		CREATE TABLE #LATE_MARK_SLAB
		(
			Row_No Numeric(18,0),
			CMP_ID NUMERIC(18,0),
			EMP_ID NUMERIC(18,0),
			TRANS_ID NUMERIC(18,0),
			BRANCH_ID NUMERIC(18,0),
			FROM_MIN NUMERIC(18,0),
			TO_MIN NUMERIC(18,0),
			EXMPT_COUNT NUMERIC(18,0),
			DEDUCTION NUMERIC(18,2),
			DEDUCTION_TYPE VARCHAR(100),
			GEN_ID NUMERIC(18,0),
			ONE_TIME_EXEMPTION NUMERIC(2,0),
			TOTAL_LATE_COUNT NUMERIC(18,0)
		)
		
	DECLARE @LATE_DIFF_MINUTES AS NUMERIC(18,2)
	SET @LATE_DIFF_MINUTES = 0
	DECLARE @LATE_ADJ_AGAIN_OT AS NUMERIC(4,0)
	SET @LATE_ADJ_AGAIN_OT = 0
		
	DECLARE CURDEDUCTION CURSOR FOR 
			SELECT EL.EMP_ID,EL.BRANCH_ID,EL.FOR_DATE,
													CASE WHEN DBO.F_RETURN_HOURS(DBO.PRO_ROUNDING_SEC_HH_MM(EL.LATE_SEC,@ROUNDINGVALUE))='00:00' THEN 
														'' 
													ELSE 
														DBO.F_RETURN_HOURS(DBO.PRO_ROUNDING_SEC_HH_MM(EL.LATE_SEC,@ROUNDINGVALUE)) 
													END AS LATE_HOUR_ROUNDING,
													ISNULL(LATE_SEC,0) AS LATE_SEC,
													DATEDIFF(S,IN_TIME,OUT_TIME) AS WORKING_TIME_SEC,
													DATEDIFF(S,SHIFT_TIME,SHIFT_END_TIME) AS SHIFT_TIME_SEC,  
													IN_TIME,
													OUT_TIME,
													SHIFT_TIME AS SHIFT_ST_DATE_TIME,
													SHIFT_END_TIME AS SHIFT_END_DATE_TIME,
													LATE_LIMIT_SEC
													FROM #EMP_LATE EL 
													WHERE ( IS_LATE = 1)
													ORDER BY EMP_ID,FOR_DATE
			
		OPEN CURDEDUCTION  
			FETCH NEXT FROM CURDEDUCTION INTO @CUR_EMP_ID,@CUR_BRANCH_ID,@CUR_FOR_DATE,@CUR_LATE_HOUR,@CUR_LATE_SECONDS,@WORKING_TIME_SEC,@SHIFT_TIME_SEC,@CUR_IN_TIME,@CUR_OUT_TIME,@CUR_SHIFT_ST_TIME,@CUR_SHIFT_END_TIME,@CUR_LATE_LIMIT_SEC
			WHILE @@FETCH_STATUS = 0   
				BEGIN
					
					IF @PREVIOUS_BRANCH_ID <> @CUR_BRANCH_ID 
						BEGIN
							SELECT  
								@GEN_ID = ISNULL(GEN_ID,0),
								@LATE_WITH_LEAVE = LATE_WITH_LEAVE,
								@IS_LATE_CALC_ON_HO_WO = IS_LATE_CALC_ON_HO_WO,
								@IS_LATEMARK = IS_LATE_MARK, 
								@ROUNDINGVALUE = ISNULL(EARLY_HOUR_UPPER_ROUNDING,0),
								@LATE_ADJ_AGAIN_OT = ISNULL(LATE_ADJ_AGAIN_OT,0) 
							FROM DBO.T0040_GENERAL_SETTING WITH (NOLOCK) WHERE BRANCH_ID = @CUR_BRANCH_ID AND CMP_ID = @CMP_ID AND
							FOR_DATE = (
											SELECT MAX(FOR_DATE) FROM T0040_GENERAL_SETTING WITH (NOLOCK) 
											WHERE CMP_ID = @CMP_ID AND FOR_DATE <= @TO_DATE AND BRANCH_ID = @CUR_BRANCH_ID
								       )   
							
							INSERT INTO #LATE_MARK_SLAB	
							SELECT ROW_NUMBER() OVER(ORDER BY TRANS_ID) AS ROW, CMP_ID,@CUR_EMP_ID,TRANS_ID,@CUR_BRANCH_ID,FROM_MIN,TO_MIN,EXEMPTION_COUNT,DEDUCTION,DEDUCTION_TYPE,GEN_ID,ONE_TIME_EXEMPTION,0
							FROM T0050_GENERAL_LATEMARK_SLAB WITH (NOLOCK) WHERE GEN_ID = @GEN_ID
							
						END
						
						IF @IS_LATEMARK > 0
							BEGIN
								IF @LATE_ADJ_AGAIN_OT > 0
									BEGIN
										SET @LATE_DIFF_MINUTES = ((ISNULL(@CUR_LATE_SECONDS,0) + ISNULL(@CUR_LATE_LIMIT_SEC,0))/60)
						
										UPDATE LMS SET TOTAL_LATE_COUNT = TOTAL_LATE_COUNT + 1
										FROM #LATE_MARK_SLAB LMS 
										WHERE @LATE_DIFF_MINUTES BETWEEN LMS.FROM_MIN AND LMS.TO_MIN 
										AND LMS.EMP_ID = @CUR_EMP_ID AND LMS.BRANCH_ID = @CUR_BRANCH_ID
										
										UPDATE #EMP_LATE  SET LATE_DEDUCT_DAYS = 0 ,IS_MAXIMUM_LATE = 0  WHERE FOR_DATE = @CUR_FOR_DATE AND EMP_ID = @CUR_EMP_ID
										
										UPDATE #EMP_LATE SET LATE_DEDUCT_DAYS = ISNULL(DEDUCTION,0),IS_MAXIMUM_LATE = 1 ,LATE_DEDUCTION_TYPE = DEDUCTION_TYPE  FROM #EMP_LATE LS INNER JOIN
										( 
											SELECT EMP_ID,DEDUCTION,DEDUCTION_TYPE FROM  #LATE_MARK_SLAB WHERE TOTAL_LATE_COUNT >= EXMPT_COUNT
											AND EMP_ID = @CUR_EMP_ID AND BRANCH_ID = @CUR_BRANCH_ID AND @LATE_DIFF_MINUTES BETWEEN FROM_MIN AND TO_MIN --AND DEDUCTION_TYPE='DAYS'
										)QRY ON QRY.EMP_ID = LS.EMP_ID 
										WHERE LS.FOR_DATE = @CUR_FOR_DATE AND LS.EMP_ID = @CUR_EMP_ID 
										
									END
							END
					
					SET @PREVIOUS_BRANCH_ID = @CUR_BRANCH_ID
					FETCH NEXT FROM CURDEDUCTION INTO @CUR_EMP_ID,@CUR_BRANCH_ID,@CUR_FOR_DATE,@CUR_LATE_HOUR,@CUR_LATE_SECONDS,@WORKING_TIME_SEC,@SHIFT_TIME_SEC,@CUR_IN_TIME,@CUR_OUT_TIME,@CUR_SHIFT_ST_TIME,@CUR_SHIFT_END_TIME,@CUR_LATE_LIMIT_SEC
				END
		CLOSE CURDEDUCTION
		DEALLOCATE CURDEDUCTION
	
	Update EL SET Sum_of_Days	= LATE_DEDUCT_DAYS From #EMP_LATE EL Where LATE_DEDUCTION_TYPE = 'Days' and IS_LATE = 1
	Update EL SET Sum_of_Hours	= LATE_DEDUCT_DAYS From #EMP_LATE EL Where LATE_DEDUCTION_TYPE = 'Hours' and IS_LATE = 1
	
	
	SELECT 
	@From_Date as From_date,
											@To_Date as To_date,
											el.Emp_ID,
											el.Branch_Id,
											el.Cmp_ID, 
											convert(varchar(10),el.For_Date ,103) as For_Date,
											dateadd(s,el.Late_Limit_Sec*-1 ,el.SHIFT_TIME) as Shift_Start_Time,
											el.SHIFT_end_time as Shift_End_Time,
											el.In_Time ,
										el.Late_Sec,
										el.Late_Limit_Sec,
										el.Late_Hour ,
										el.Late_Limit,
										el.Out_Time,
										dbo.F_Return_Hours(isnull(el.Late_Limit_Sec,0)) as Late_Limit_Hour 
										,el.Late_Deduct_Days,el.is_Maximum_late,
										Emp_full_name,emp_code,alpha_Emp_code,Emp_First_Name,branch_name,comp_name,
										branch_address,cmp_name,cmp_address
										,dsm.Desig_Name,dm.Dept_Name,tm.Type_Name,GM.Grd_Name          --added jimit 04092015
										,Dm.Dept_Dis_no      --added jimit 04092015
										,DSM.Desig_Dis_No --added by nilesh patel on 01042016 
										,vs.Vertical_Name,sv.SubVertical_Name  --added jimit 28042016
										,el.LATE_DEDUCTION_TYPE,el.Sum_of_Hours,el.Sum_of_Days
	from #EMP_LATE el inner join T0095_Increment i WITH (NOLOCK) on el.increment_ID=i.Increment_ID  
							inner join T0080_EMP_MASTER em WITH (NOLOCK) on  el.emp_id = em.emp_id  
							inner join T0030_BRANCH_MASTER bm WITH (NOLOCK) on em.branch_id=bm.branch_id  
							inner join t0010_company_master cm WITH (NOLOCK) on em.cmp_id = cm.cmp_id 
							left join t0040_designation_master DSM WITH (NOLOCK) on i.Desig_id = DSM.Desig_id    --added jimit 04092015
							left join T0040_department_master DM WITH (NOLOCK) on i.Dept_id = DM.Dept_id           --added jimit 04092015
							left join T0040_TYPE_MASTER TM WITH (NOLOCK) on i.Type_ID = TM.Type_ID      --added jimit 04092015
							left join T0040_GRADE_MASTER GM WITH (NOLOCK) on i.Grd_ID = GM.Grd_ID    --added jimit 04092015
							LEFT JOIN T0040_Vertical_Segment vs WITH (NOLOCK) on vs.Vertical_ID = i.Vertical_ID   --added jimit 28042016
							LEFT JOIN T0050_SubVertical sv WITH (NOLOCK) on sv.SubVertical_ID = i.SubVertical_ID   --added jimit 28042016
	where IS_LATE = 1 and el.LATE_DEDUCT_DAYS > 0
    
END

