

-- =============================================
-- AUTHOR:		NILESH PATEL
-- CREATE DATE: 16-06-2017
-- DESCRIPTION:	CALCULATE LATE MARK SLAB WISE 
---13/1/2021 (EDIT BY MEHUL ) (SP WITH NOLOCK)---
-- =============================================
CREATE PROCEDURE [dbo].[SP_CALCULATE_EARLY_DEDUCTION_PERCENTAGE]
	 @EMP_ID			 NUMERIC
	,@CMP_ID	     	 NUMERIC
	,@MONTH_ST_DATE		 DATETIME
	,@MONTH_END_DATE	 DATETIME
	,@INCREMENT_ID		 NUMERIC 
	,@STRWEEKOFF_DATE VARCHAR(MAX)=''
	,@STRHOLIDAY_DATE VARCHAR(MAX)=''
	,@RETURN_RECORD_SET	 NUMERIC =0
	,@RETURN_LATE_DATE_TABLE TINYINT = 0
	,@ABSENT_DATE_STRING	VARCHAR(MAX) =''
	,@SAL_TRAN_ID NUMERIC = 0
	,@TMP_MONTH_ST_DATE DATETIME
	,@TMP_MONTH_END_DATE DATETIME
	
AS

SET NOCOUNT ON 
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
SET ARITHABORT ON

BEGIN

	
	DECLARE @IN_DATE			DATETIME
	DECLARE @SHIFT_ST_TIME		VARCHAR(10)
	DECLARE @SHIFT_END_DATETIME	DATETIME
	DECLARE @VAR_SHIFT_ST_DATE	VARCHAR(20)
	DECLARE @EMP_EARLY_LIMIT	VARCHAR(10)
	DECLARE @EARLY_LIMIT_SEC	NUMERIC
	DECLARE @BRANCH_ID		    NUMERIC 
	DECLARE @EMP_EARLY_MARK		INT
	DECLARE @EARLY_DEDU_TYPE	VARCHAR(10)
	DECLARE @MONTH				NUMERIC
	DECLARE @VARMONTH			VARCHAR(10)
	DECLARE @EARLY_WITH_LEAVE   NUMERIC(1,0)
	DECLARE @YEAR				NUMERIC
	DECLARE @SHIFT_ST_TIME_HALF_DAY 	VARCHAR(10)
	DECLARE @IS_HALF_DAY 	TINYINT
	DECLARE @ROUNDINGVALUE 	NUMERIC(18,2) 
	DECLARE @IS_EARLY_CALC_ON_HO_WO TINYINT
	DECLARE @IS_EARLYMARK AS TINYINT
	DECLARE @SHIFT_MAX_EARLY_TIME DATETIME
	DECLARE @OUT_DATE DATETIME	
	DECLARE @SHIFT_END_TIME VARCHAR(10)
	DECLARE @VAR_SHIFT_END_DATE	VARCHAR(20)
	DECLARE @SHIFT_END_TIME_HALF_DAY VARCHAR(10)
	DECLARE @SHIFT_NAME VARCHAR(200)
	
	
	SET @MONTH	= MONTH(@MONTH_ST_DATE)
	SET @VARMONTH = @MONTH
	SET @VARMONTH = '#' + @VARMONTH + '#'
	SET @ROUNDINGVALUE = 0
	SET @YEAR	= YEAR(@MONTH_ST_DATE)
	SET @IS_EARLYMARK = 0
	SET @SHIFT_NAME = ''
	
	DECLARE @EARLY_MARK_SCENARIO NUMERIC(5,0)
	DECLARE @GEN_ID NUMERIC(5,0)
	DECLARE @ACTUAL_SHIFT_ST_TIME DATETIME
	DECLARE @ACTUAL_MIN_DIFF NUMERIC(18,0)
	DECLARE @IS_EARLY_PERCENTAGE NUMERIC(1,0)
	DECLARE @IS_EARLY_CALCULATE_ON NUMERIC(1,0)
	DECLARE @GROSS_SALARY NUMERIC(18,2)
	DECLARE @BASIC_SALARY NUMERIC(18,2)
	DECLARE @SAL_FIX_DAYS NUMERIC(18,2)
	DECLARE @EARLY_LIMIT NUMERIC(18,2)
	
	SET @EARLY_MARK_SCENARIO = 0
	SET @ACTUAL_MIN_DIFF = 0
	SET @GEN_ID = 0
	SET @IS_EARLY_PERCENTAGE = 0
	SET @IS_EARLY_CALCULATE_ON = 0
	SET @GROSS_SALARY = 0
	SET @BASIC_SALARY = 0
	SET @SAL_FIX_DAYS = 0
	SET @EARLY_LIMIT = 0
	
	SELECT	@EMP_EARLY_MARK = ISNULL(EMP_EARLY_MARK,0) ,
			@EMP_EARLY_LIMIT = ISNULL(EMP_EARLY_LIMIT,'00:00'),
			@BRANCH_ID =BRANCH_ID,
			@EARLY_DEDU_TYPE = EARLY_DEDU_TYPE,
			@BASIC_SALARY = I.Basic_Salary
	FROM	T0095_INCREMENT I WITH (NOLOCK)
	WHERE	I.EMP_ID = @EMP_ID AND INCREMENT_ID =@INCREMENT_ID	
	
	
	SELECT	@EARLY_MARK_SCENARIO = ISNULL(EARLY_MARK_SCENARIO,0),
			@GEN_ID = ISNULL(GEN_ID,0),
			@EARLY_WITH_LEAVE = EARLY_WITH_LEAVE,
			@IS_EARLY_CALC_ON_HO_WO = IS_EARLY_CALC_ON_HO_WO,
			@IS_EARLYMARK = IS_LATE_MARK, 
			@ROUNDINGVALUE = ISNULL(EARLY_HOUR_UPPER_ROUNDING,0),
			@IS_EARLY_PERCENTAGE = ISNULL(IS_EARLYMARK_PERCENTAGE,0),
			@SAL_FIX_DAYS = ISNULL(SAL_FIX_DAYS,0),
			@Early_Limit = dbo.F_Return_Sec(Early_Limit),
			@IS_EARLY_CALCULATE_ON = ISNULL(IS_EARLYMARK_CAL_ON,0)  
			-- 1 Calculate Basic 
			-- 2 Calculate on Gross
	FROM	T0040_GENERAL_SETTING G WITH (NOLOCK)
			INNER JOIN (
							SELECT	MAX(FOR_DATE) AS FOR_DATE 
							FROM	T0040_GENERAL_SETTING WITH (NOLOCK)   
							WHERE	CMP_ID = @CMP_ID AND FOR_DATE <=@MONTH_END_DATE AND BRANCH_ID=@BRANCH_ID
						)  G1 ON G.FOR_DATE=G1.FOR_DATE
	WHERE	CMP_ID = @CMP_ID AND BRANCH_ID =@BRANCH_ID 
	
	IF OBJECT_ID('tempdb..#Temp_AD') is not null
		drop TABLE #Temp_AD
	
	  SELECT E_AD_AMOUNT,AD_NOT_EFFECT_SALARY,PARTOFCTC
			INTO #Temp_AD
		FROM (
		SELECT EED.AD_ID,
			 CASE WHEN QRY1.INCREMENT_ID >= EED.INCREMENT_ID /*QRY1.FOR_DATE > EED.FOR_DATE*/ THEN
				CASE WHEN QRY1.E_AD_PERCENTAGE IS NULL THEN EED.E_AD_PERCENTAGE ELSE QRY1.E_AD_PERCENTAGE END 
			 ELSE
				EED.E_AD_PERCENTAGE END AS E_AD_PERCENTAGE,
			 CASE WHEN QRY1.INCREMENT_ID >= EED.INCREMENT_ID /*QRY1.FOR_DATE > EED.FOR_DATE*/ THEN
				CASE WHEN QRY1.E_AD_AMOUNT IS NULL THEN EED.E_AD_AMOUNT ELSE QRY1.E_AD_AMOUNT END 
			 ELSE
				EED.E_AD_AMOUNT END AS E_AD_AMOUNT,
			E_AD_FLAG,E_AD_MAX_LIMIT ,AD_CALCULATE_ON ,AD_DEF_ID ,                    
			ISNULL(AD_NOT_EFFECT_ON_PT,0) AS AD_NOT_EFFECT_ON_PT,
			ISNULL(AD_NOT_EFFECT_SALARY,0) AS AD_NOT_EFFECT_SALARY,ISNULL(AD_EFFECT_ON_OT,0) AS AD_EFFECT_ON_OT,
			ISNULL(AD_EFFECT_ON_EXTRA_DAY,0) AS AD_EFFECT_ON_EXTRA_DAY,
			AD_NAME,ISNULL(AD_EFFECT_ON_LATE,0) AS AD_EFFECT_ON_LATE,
			ISNULL(AD_EFFECT_MONTH,'') AS AD_EFFECT_MONTH,
			ISNULL(AD_CAL_TYPE,'') AS AD_CAL_TYPE,ISNULL(AD_EFFECT_FROM,'') AS AD_EFFECT_FROM,
			ISNULL(ADM.AD_NOT_EFFECT_ON_LWP,0) AS AD_NOT_EFFECT_ON_LWP,
			ISNULL(ADM.ALLOWANCE_TYPE,'A') AS ALLOWANCE_TYPE, 
			ISNULL(ADM.AUTO_PAID,0) AS AUTOPAID,
			ADM.AD_LEVEL,ADM.IS_ROUNDING,
			ISNULL(ADM.AD_PART_OF_CTC,0) AS PARTOFCTC
		FROM DBO.T0100_EMP_EARN_DEDUCTION EED WITH (NOLOCK) INNER JOIN                    
			   DBO.T0050_AD_MASTER ADM  WITH (NOLOCK) ON EED.AD_ID = ADM.AD_ID   LEFT OUTER JOIN
				( SELECT EEDR.EMP_ID, EEDR.AD_ID, EEDR.FOR_DATE, EEDR.E_AD_AMOUNT,EEDR.E_AD_PERCENTAGE,EEDR.ENTRY_TYPE ,EEDR.INCREMENT_ID
					FROM T0110_EMP_EARN_DEDUCTION_REVISED EEDR WITH (NOLOCK) INNER JOIN
					( SELECT MAX(FOR_DATE) FOR_DATE, AD_ID FROM T0110_EMP_EARN_DEDUCTION_REVISED WITH (NOLOCK)
						WHERE EMP_ID = @EMP_ID AND FOR_DATE <= @MONTH_END_DATE
					 GROUP BY AD_ID )QRY ON EEDR.FOR_DATE = QRY.FOR_DATE AND EEDR.AD_ID = QRY.AD_ID 
				) QRY1 ON EED.AD_ID = QRY1.AD_ID AND EED.EMP_ID = QRY1.EMP_ID  AND QRY1.FOR_DATE>=EED.FOR_DATE                
		WHERE EED.EMP_ID = @EMP_ID AND EED.INCREMENT_ID = @INCREMENT_ID AND ADM.AD_ACTIVE = 1
				AND CASE WHEN QRY1.ENTRY_TYPE IS NULL THEN '' ELSE QRY1.ENTRY_TYPE END <> 'D' 
				AND EED.E_AD_FLAG = 'I' AND Isnull(ADM.AD_NOT_EFFECT_SALARY,0) = 0 
		UNION 
		
		SELECT EED.AD_ID,E_AD_PERCENTAGE,E_AD_AMOUNT,E_AD_FLAG,E_AD_MAX_LIMIT ,AD_CALCULATE_ON ,AD_DEF_ID ,                    
			ISNULL(AD_NOT_EFFECT_ON_PT,0) AS AD_NOT_EFFECT_ON_PT,
			ISNULL(AD_NOT_EFFECT_SALARY,0) AS AD_NOT_EFFECT_SALARY,
			ISNULL(AD_EFFECT_ON_OT,0) AS AD_EFFECT_ON_OT,
			ISNULL(AD_EFFECT_ON_EXTRA_DAY,0) AS AD_EFFECT_ON_EXTRA_DAY
			,AD_NAME,ISNULL(AD_EFFECT_ON_LATE,0) AS AD_EFFECT_ON_LATE ,ISNULL(AD_EFFECT_MONTH,'') AS AD_EFFECT_MONTH,
			ISNULL(AD_CAL_TYPE,'') AS AD_CAL_TYPE,ISNULL(AD_EFFECT_FROM,'') AS AD_EFFECT_FROM,
			ISNULL(ADM.AD_NOT_EFFECT_ON_LWP,0) AS AD_NOT_EFFECT_ON_LWP,
			ISNULL(ADM.ALLOWANCE_TYPE,'A') AS ALLOWANCE_TYPE, 
			ISNULL(ADM.AUTO_PAID,0) AS AUTOPAID,
			ADM.AD_LEVEL,ADM.IS_ROUNDING,
			ISNULL(ADM.AD_PART_OF_CTC,0) AS PARTOFCTC
		FROM DBO.T0110_EMP_EARN_DEDUCTION_REVISED EED WITH (NOLOCK) INNER JOIN  
			( SELECT MAX(FOR_DATE) FOR_DATE, AD_ID FROM T0110_EMP_EARN_DEDUCTION_REVISED WITH (NOLOCK)
				WHERE EMP_ID  = @EMP_ID AND FOR_DATE <= @MONTH_END_DATE 
				GROUP BY AD_ID )QRY ON EED.FOR_DATE = QRY.FOR_DATE AND EED.AD_ID = QRY.AD_ID                   
		   INNER JOIN DBO.T0050_AD_MASTER ADM WITH (NOLOCK) ON EED.AD_ID = ADM.AD_ID                     
		WHERE EMP_ID = @EMP_ID 
				AND ADM.AD_ACTIVE = 1
				AND EED.ENTRY_TYPE = 'A'
				AND EED.INCREMENT_ID = @INCREMENT_ID
				and EED.E_AD_FLAG = 'I' AND Isnull(ADM.AD_NOT_EFFECT_SALARY,0) = 0
		) QRY
	
	IF @IS_EARLY_CALCULATE_ON = 2 
		BEGIN
			Select @GROSS_SALARY = SUM(E_AD_AMOUNT) + @BASIC_SALARY From #Temp_AD Where Isnull(AD_NOT_EFFECT_SALARY,0) = 0
			if isnull(@GROSS_SALARY,0) = 0
				set @GROSS_SALARY = @BASIC_SALARY -- Add by Deepal base on issue resolved in the Genus (#19474) 11112021
		END
	
	IF @IS_EARLY_CALCULATE_ON = 3 
		BEGIN
			Select @GROSS_SALARY = SUM(E_AD_AMOUNT) + @BASIC_SALARY From #Temp_AD Where Isnull(PARTOFCTC,0) = 1
		END

	IF OBJECT_ID('TEMPDB.DBO.#ABSENT_DATES') IS NOT NULL
		DROP TABLE #ABSENT_DATES
	
	CREATE TABLE #ABSENT_DATES  
	(
		ABSENT_DATE DATETIME
	)
	
	IF @ABSENT_DATE_STRING <> ''
		BEGIN
			INSERT INTO #ABSENT_DATES(ABSENT_DATE)
			SELECT DATA FROM DBO.SPLIT(@ABSENT_DATE_STRING,'#')
		END
		
	
	SET @EARLY_LIMIT_SEC = DBO.F_RETURN_SEC(@EMP_EARLY_LIMIT)
	SET @Early_Limit = DBO.F_RETURN_SEC(@EMP_EARLY_LIMIT)
	
    IF OBJECT_ID('TEMPDB.DBO.#EARLY_MARK_SLAB') IS NOT NULL
		DROP TABLE #EARLY_MARK_SLAB
    
    CREATE TABLE #EARLY_MARK_SLAB
    (
		CMP_ID NUMERIC(18,0),
		EMP_ID NUMERIC(18,0),
		TRANS_ID NUMERIC(18,0),
		BRANCH_ID NUMERIC(18,0),
		FROM_MIN NUMERIC(18,0),
		TO_MIN NUMERIC(18,0),
		DEDUCTION NUMERIC(18,2),
		DEDUCTION_TYPE VARCHAR(100),
		GEN_ID NUMERIC(18,0),
		CURR_COUNT NUMERIC(18,0),
		Total_Deduct_Days Numeric(18,2),
		GROUP_FLAG BIT
    )
    
    IF OBJECT_ID ('TEMPDB.DBO.#EARLY_MARK_TRANSACTION') IS NOT NULL
		DROP TABLE 	#EARLY_MARK_TRANSACTION
		
	CREATE TABLE #EARLY_MARK_TRANSACTION
	(
		CMP_ID NUMERIC(18,0),
		EMP_ID NUMERIC(18,0),
		FOR_DATE DATETIME,
		EARLY_MIN VARCHAR(50),
		EARLY_CALC_ON_PERCENT NUMERIC(5,2),
		EARLY_CALC_ON_AMT NUMERIC(18,2),
		EARLY_AMOUNT NUMERIC(18,2),
		EARLY_SEC NUMERIC(18,0),
		EARLY_LIMIT VARCHAR(50),
		SHIFT_ID NUMERIC(18,0),
		SHIFT_NAME VARCHAR(200),
		OUT_TIME DATETIME
	)
	
	DECLARE @EARLY_CALC_ON_PERCENT NUMERIC(5,2)
	SET @EARLY_CALC_ON_PERCENT = 0
	
    IF @EARLY_MARK_SCENARIO = 2
		BEGIN
			 INSERT INTO #EARLY_MARK_SLAB(CMP_ID,EMP_ID,TRANS_ID,BRANCH_ID,FROM_MIN,TO_MIN,DEDUCTION,DEDUCTION_TYPE,GEN_ID,CURR_COUNT,Total_Deduct_Days,GROUP_FLAG)
			 SELECT @CMP_ID,@EMP_ID,TRANS_ID,@BRANCH_ID,FROM_MIN,TO_MIN,DEDUCTION,DEDUCTION_TYPE,GEN_ID,0,0,0
			 FROM T0050_GENERAL_EARLYMARK_SLAB WITH (NOLOCK) WHERE CMP_ID = @CMP_ID AND GEN_ID = @GEN_ID 
		END

	IF  @EMP_EARLY_MARK = 1
		BEGIN
		
			DECLARE @HALFDAYDATE VARCHAR(500)								
			EXEC GET_HALFDAY_DATE @CMP_ID,@EMP_ID,@MONTH_ST_DATE,@MONTH_END_DATE,0,@HALFDAYDATE OUTPUT
			
			DECLARE @FOR_DATECURR	DATETIME	
			SET @FOR_DATECURR = NULL
			
			DECLARE @IS_CANCEL_EARLY_IN TINYINT
			DECLARE @DIFFERNCE_ROUNDING_EARLY_SEC NUMERIC
			DECLARE @SHIFT_ID NUMERIC(18,0);	
											

			DECLARE CUREMARK CURSOR FOR
			SELECT	MIN(CAST(CAST(IN_TIME AS VARCHAR(11)) + ' ' + DBO.F_RETURN_HHMM(IN_TIME) AS DATETIME)),
					MAX(CAST(CAST(OUT_TIME AS VARCHAR(11)) + ' ' + DBO.F_RETURN_HHMM(OUT_TIME) AS DATETIME)),
					EI.FOR_DATE 
			FROM	DBO.T0150_EMP_INOUT_RECORD EI WITH (NOLOCK)	
					LEFT OUTER JOIN #ABSENT_DATES AD ON EI.FOR_DATE = AD.ABSENT_DATE
			WHERE	EMP_ID =@EMP_ID AND FOR_DATE>=@MONTH_ST_DATE AND FOR_DATE<=@MONTH_END_DATE  
					AND (ISNULL(EI.IS_CANCEL_EARLY_OUT,0) =0 OR ISNULL(EI.IS_CANCEL_EARLY_OUT,0) = 1)
					AND Chk_By_Superior = 0
					AND ABSENT_DATE IS NULL 
			GROUP BY FOR_DATE	
			OPEN  CUREMARK
			FETCH NEXT FROM CUREMARK INTO @IN_DATE,@OUT_DATE,@FOR_DATECURR
			WHILE @@FETCH_STATUS = 0
				BEGIN
					
					SET @SHIFT_ID = NULL;
					SET @SHIFT_ID = DBO.FN_GET_SHIFT_FROM_MONTHLY_ROTATION(@CMP_ID, @EMP_ID, @IN_DATE);
					
					SELECT	@SHIFT_ST_TIME=SM.SHIFT_ST_TIME,
							@SHIFT_END_TIME=SM.SHIFT_END_TIME,
							@IS_HALF_DAY=ISNULL(SM.IS_HALF_DAY,0),
							@SHIFT_ST_TIME_HALF_DAY = ISNULL(SM.HALF_ST_TIME,'00:00'),
							@SHIFT_END_TIME_HALF_DAY = ISNULL(SM.HALF_END_TIME,'00:00'),
							@SHIFT_NAME = SM.Shift_Name
					FROM	T0040_SHIFT_MASTER SM WITH (NOLOCK)
					WHERE	SM.CMP_ID=@CMP_ID AND SM.SHIFT_ID=@SHIFT_ID
					
					SET @VAR_SHIFT_ST_DATE = CAST(@IN_DATE AS VARCHAR(11)) + ' '  + @SHIFT_ST_TIME  
					SET @VAR_SHIFT_END_DATE = CAST(@OUT_DATE AS VARCHAR(11)) + ' '  + @SHIFT_END_TIME
					
					SET @SHIFT_END_DATETIME = CAST(@VAR_SHIFT_END_DATE AS DATETIME)
					--SET @SHIFT_END_DATETIME = DATEADD(S,@EARLY_LIMIT_SEC,@SHIFT_END_DATETIME
					SET @SHIFT_END_DATETIME = DATEADD(S,0,@SHIFT_END_DATETIME)
					
					IF @IS_EARLYMARK = 1
						BEGIN
							IF @IS_EARLY_CALC_ON_HO_WO = 0									
								BEGIN
									IF CHARINDEX(CAST(@IN_DATE AS VARCHAR(11)),@STRWEEKOFF_DATE,0) <> 0 OR CHARINDEX(CAST(@OUT_DATE AS VARCHAR(11)),@STRHOLIDAY_DATE,0) <> 0 
										SET @OUT_DATE = @SHIFT_END_DATETIME
								END
								
										SET		@IS_CANCEL_EARLY_IN = 0
										SELECT	TOP 1 @IS_CANCEL_EARLY_IN=ISNULL(Is_Cancel_Early_Out,0)
										FROM	DBO.T0150_EMP_INOUT_RECORD WITH (NOLOCK)
										WHERE	EMP_ID =@EMP_ID AND FOR_DATE = CONVERT(VARCHAR(11),@OUT_DATE,106)
												--AND ISNULL(LATE_CALC_NOT_APP,0)=0 AND CHK_BY_SUPERIOR <> 0 -- CHANGED BY RAMIZ ON 04/03/2016 FROM CHK_BY_SUPERIOR = 1 TO CHK_BY_SUPERIOR <> 0 AS NOW CHK_BY_SUPERIOR = 2 IS ALSO COMING
												AND ((CHK_BY_SUPERIOR = 2 AND REASON = '') OR (CHK_BY_SUPERIOR <> 2 AND REASON <> ''))
												AND CHK_BY_SUPERIOR > 0
										ORDER BY IS_CANCEL_EARLY_OUT DESC  
										
										IF(CHARINDEX(CONVERT(NVARCHAR(11),@OUT_DATE,109),@HALFDAYDATE) > 0) 
											BEGIN
												IF @IS_HALF_DAY = 1
													BEGIN
														SET @VAR_SHIFT_ST_DATE = CAST(@IN_DATE AS VARCHAR(11)) + ' '  + @SHIFT_ST_TIME_HALF_DAY
														SET @VAR_SHIFT_END_DATE = CAST(@OUT_DATE AS VARCHAR(11)) + ' '  + @SHIFT_END_TIME_HALF_DAY												END
												ELSE
													BEGIN
														SET @VAR_SHIFT_ST_DATE = CAST(@IN_DATE AS VARCHAR(11)) + ' '  + @SHIFT_ST_TIME
														SET @VAR_SHIFT_END_DATE = CAST(@OUT_DATE AS VARCHAR(11)) + ' '  + @SHIFT_END_TIME	
													END
											END
										ELSE
											BEGIN
												SET @VAR_SHIFT_ST_DATE = CAST(@IN_DATE AS VARCHAR(11)) + ' '  + @SHIFT_ST_TIME
												SET @VAR_SHIFT_END_DATE = CAST(@OUT_DATE AS VARCHAR(11)) + ' '  + @SHIFT_END_TIME	
											END	
											
										SET @SHIFT_END_DATETIME = CAST(@VAR_SHIFT_END_DATE AS DATETIME)
										SET @ACTUAL_SHIFT_ST_TIME = @SHIFT_END_DATETIME
										--SET @SHIFT_END_DATETIME = DATEADD(S,@EARLY_LIMIT_SEC*-1,@SHIFT_END_DATETIME)
										SET @SHIFT_END_DATETIME = DATEADD(S,0,@SHIFT_END_DATETIME)
										
										
										DECLARE @IS_HALF_DAY_LEAVE TINYINT
										DECLARE @IS_FULL_DAY_LEAVE TINYINT
										
										SET @IS_HALF_DAY_LEAVE = 0
										SET @IS_FULL_DAY_LEAVE = 0
										
										DECLARE @FR_DT AS DATETIME
										SET @FR_DT = CAST(CONVERT(NVARCHAR(11),@IN_DATE,106) + ' 00:00:00' AS DATETIME)
										
										IF EXISTS(
													SELECT	LA.LEAVE_APPROVAL_ID 
													FROM	T0120_LEAVE_APPROVAL LA WITH (NOLOCK) INNER JOIN T0130_LEAVE_APPROVAL_DETAIL LAD WITH (NOLOCK) ON LA.LEAVE_APPROVAL_ID = LAD.LEAVE_APPROVAL_ID
													WHERE	EMP_ID = @EMP_ID AND LEAVE_ASSIGN_AS = 'SECOND HALF' 
															AND (
																	ISNULL(HALF_LEAVE_DATE,TO_DATE) = @FR_DT OR 
																	CASE WHEN HALF_LEAVE_DATE = '01-JAN-1900' 
																		THEN TO_DATE 
																	ELSE 
																		HALF_LEAVE_DATE 
																	END = @FR_DT 
												 )AND APPROVAL_STATUS = 'A')
											BEGIN	
												SET @IS_HALF_DAY_LEAVE = 1		
											END
										
										IF EXISTS(
													SELECT	LA.LEAVE_APPROVAL_ID 
													FROM	T0120_LEAVE_APPROVAL LA WITH (NOLOCK) INNER JOIN T0130_LEAVE_APPROVAL_DETAIL LAD WITH (NOLOCK) ON LA.LEAVE_APPROVAL_ID = LAD.LEAVE_APPROVAL_ID
													WHERE	EMP_ID = @EMP_ID AND UPPER(LEAVE_ASSIGN_AS) = 'PART DAY' 
													AND (FROM_DATE= @FR_DT) AND LEAVE_OUT_TIME = @SHIFT_MAX_EARLY_TIME AND APPROVAL_STATUS = 'A'
												 )
											BEGIN	
												SET @IS_HALF_DAY_LEAVE = 1		
											END
										
										IF EXISTS(SELECT EMP_ID FROM T0140_LEAVE_TRANSACTION WITH (NOLOCK) WHERE EMP_ID = @EMP_ID AND FOR_DATE = @FR_DT AND ( LEAVE_USED >= 1 OR COMPOFF_USED >= 1 ))	--COMPOFF_USED	--ANKIT 04122015
											BEGIN	
												SET @IS_FULL_DAY_LEAVE = 1		
											END
										
										SET @DIFFERNCE_ROUNDING_EARLY_SEC = 0
										
										IF @OUT_DATE < @SHIFT_END_DATETIME AND @IS_CANCEL_EARLY_IN = 0  AND @IS_HALF_DAY_LEAVE = 0 AND @IS_FULL_DAY_LEAVE = 0-- MODIFIED BY MITESH ON 08/08/2011
											BEGIN
												/* FOR SHIFT START TIME 12:00 AM & EMPLOYEE IN PUNCH EARLY THEN NOT COUNT LATE MARK (NIRMA CLIENT)  --ANKIT 07112015 */
												IF @ROUNDINGVALUE > 0 
													BEGIN
														IF DATEPART(HH,@SHIFT_END_DATETIME) = 0 AND @OUT_DATE < DATEADD(D,1,@FOR_DATECURR)
															SET @DIFFERNCE_ROUNDING_EARLY_SEC = DATEDIFF(S,DATEADD(D,1,@FOR_DATECURR),@OUT_DATE)
														ELSE
															SET @DIFFERNCE_ROUNDING_EARLY_SEC = DATEDIFF(S,CAST(@VAR_SHIFT_END_DATE AS DATETIME) ,@OUT_DATE)
															
														SELECT @DIFFERNCE_ROUNDING_EARLY_SEC = DBO.PRO_ROUNDING_SEC_HH_MM(@DIFFERNCE_ROUNDING_EARLY_SEC,@ROUNDINGVALUE)
													END	
												ELSE
													BEGIN
														IF DATEPART(HH,@SHIFT_END_DATETIME) = 0 AND @OUT_DATE < DATEADD(D,1,@FOR_DATECURR)
															SET @DIFFERNCE_ROUNDING_EARLY_SEC = DATEDIFF(S,@OUT_DATE,DATEADD(D,1,@FOR_DATECURR))
														ELSE
															SET @DIFFERNCE_ROUNDING_EARLY_SEC = DATEDIFF(S,@OUT_DATE,@SHIFT_END_DATETIME)
													END
												IF @DIFFERNCE_ROUNDING_EARLY_SEC > 0	
													BEGIN 
														IF (@OUT_DATE < @SHIFT_END_DATETIME)
														BEGIN

															SET @ACTUAL_MIN_DIFF = DATEDIFF(MINUTE,@OUT_DATE,@SHIFT_END_DATETIME)
															
															
															UPDATE #EARLY_MARK_SLAB SET CURR_COUNT = CURR_COUNT + 1 
															WHERE @ACTUAL_MIN_DIFF BETWEEN FROM_MIN AND TO_MIN 
															
															IF(@ACTUAL_MIN_DIFF * 60) > @EARLY_LIMIT 
																BEGIN
																	SELECT @EARLY_CALC_ON_PERCENT = ISNULL(DEDUCTION,0) FROM #EARLY_MARK_SLAB WHERE @ACTUAL_MIN_DIFF BETWEEN FROM_MIN AND TO_MIN 
															
																	INSERT INTO #EARLY_MARK_TRANSACTION(CMP_ID,EMP_ID,FOR_DATE,EARLY_MIN,EARLY_CALC_ON_PERCENT,EARLY_CALC_ON_AMT,EARLY_AMOUNT,EARLY_SEC,EARLY_LIMIT,SHIFT_ID,SHIFT_NAME,OUT_TIME)
																	VALUES(@CMP_ID,@EMP_ID,@FR_DT,DBO.F_RETURN_HOURS((@ACTUAL_MIN_DIFF * 60) - @EARLY_LIMIT),@EARLY_CALC_ON_PERCENT,(CASE WHEN @IS_EARLY_CALCULATE_ON = 1 THEN @BASIC_SALARY WHEN @IS_EARLY_CALCULATE_ON = 2 THEN @GROSS_SALARY WHEN @IS_EARLY_CALCULATE_ON = 3 THEN @GROSS_SALARY END),0,((@ACTUAL_MIN_DIFF * 60)- @EARLY_LIMIT),DBO.F_RETURN_HOURS(@EARLY_LIMIT),@SHIFT_ID,@SHIFT_ST_TIME + '- ' + @SHIFT_END_TIME,@OUT_DATE)
																END
														END
													END
								END
						END
					FETCH NEXT FROM CUREMARK INTO @IN_DATE,@OUT_DATE,@FOR_DATECURR
				END
			CLOSE CUREMARK;
			DEALLOCATE CUREMARK;
		END
		
		DECLARE @MONTH_DAYS NUMERIC(18,2)
		SET @MONTH_DAYS = 0
		
		IF @SAL_FIX_DAYS <> 0
			BEGIN
				Update #EARLY_MARK_TRANSACTION SET EARLY_AMOUNT = ((EARLY_CALC_ON_AMT/@SAL_FIX_DAYS) * EARLY_CALC_ON_PERCENT) / 100
			END
		ELSE
			BEGIN
				SET @MONTH_DAYS = DATEDIFF(D,@TMP_MONTH_ST_DATE,@TMP_MONTH_END_DATE) + 1
				IF @MONTH_DAYS > 0
					Begin
						UPDATE #EARLY_MARK_TRANSACTION SET EARLY_AMOUNT = ((EARLY_CALC_ON_AMT/@MONTH_DAYS) * EARLY_CALC_ON_PERCENT) / 100
					End
			END
		
		DECLARE @TRAN_ID NUMERIC
		SET @TRAN_ID = 0
			
		SELECT @TRAN_ID = ISNULL(MAX(TRAN_ID),0)  FROM T0140_MONTHLY_EARLYMARK_TRANSACTION WITH (NOLOCK)
		
		INSERT INTO T0140_MONTHLY_EARLYMARK_TRANSACTION(TRAN_ID,SAL_TRAN_ID,CMP_ID,EMP_ID,EARLY_MIN,EARLY_SEC,FOR_DATE,EARLY_CAL_ON_PERCENT,EARLY_CALC_ON_AMT,EARLY_AMOUNT,EARLY_LIMIT,SHIFT_ID,SHIFT_NAME,OUT_TIME)
		SELECT (@TRAN_ID + ROW_NUMBER() OVER ( ORDER BY EMP_ID )) as row_id,@SAL_TRAN_ID,
				CMP_ID,EMP_ID,EARLY_MIN,EARLY_SEC,FOR_DATE,EARLY_CALC_ON_PERCENT,EARLY_CALC_ON_AMT,EARLY_AMOUNT,EARLY_LIMIT,SHIFT_ID,SHIFT_NAME,OUT_TIME
		FROM #EARLY_MARK_TRANSACTION
		
END

