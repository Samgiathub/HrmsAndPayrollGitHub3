

-----------------------------------------------
-------ADDED BY JIMIT 19062018---------------
-------FOR ENPAY REPORT OF PAYMENT REGISTER---
---22/1/2021 (EDIT BY MEHUL ) (SP WITH NOLOCK)---
---------------------------------------------
CREATE PROCEDURE [dbo].[RPT_PAYMENT REGISTER_EXPORT]  
	 @CMP_ID		NUMERIC  
	,@FROM_DATE		DATETIME
	,@TO_DATE 		DATETIME
	,@BRANCH_ID		NUMERIC	
	,@GRD_ID 		NUMERIC
	,@TYPE_ID 		NUMERIC
	,@DEPT_ID 		NUMERIC
	,@DESIG_ID 		NUMERIC
	,@EMP_ID 		NUMERIC
	,@CONSTRAINT	VARCHAR(MAX)
	,@CAT_ID        NUMERIC = 0
	,@IS_COLUMN		TINYINT = 0
	,@SALARY_CYCLE_ID  NUMERIC  = 0
	,@SEGMENT_ID	NUMERIC = 0 
	,@VERTICAL		NUMERIC = 0 
	,@SUBVERTICAL	NUMERIC = 0 
	,@SUBBRANCH		NUMERIC = 0 
	,@SUMMARY		VARCHAR(MAX)=''
	,@SUMMARY2		VARCHAR(MAX)=''
	,@SUMMARY3		VARCHAR(MAX)=''
	,@TYPE			VARCHAR(100) = '0'
	,@ORDER_BY		VARCHAR(30) = 'CODE' 
	,@SHOW_HIDDEN_ALLOWANCE  BIT = 1  
AS  
SET NOCOUNT ON 
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
SET ARITHABORT ON
	
	SET @SHOW_HIDDEN_ALLOWANCE = 0
	
	
	CREATE TABLE #EMP_CONS 
	(
		EMP_ID	NUMERIC ,     
		BRANCH_ID NUMERIC,
		INCREMENT_ID NUMERIC 
	)
	
	EXEC SP_RPT_FILL_EMP_CONS @CMP_ID,@FROM_DATE,@TO_DATE,@BRANCH_ID,@CAT_ID,@GRD_ID,@TYPE_ID,@DEPT_ID,@DESIG_ID,@EMP_ID,@CONSTRAINT,0,0,0,0,0,0,0,0,0,0,0,0   
	
	
	CREATE TABLE #PAYMENTMAST
	(
		
	    CMP_ID			NUMERIC(18,0)
	   ,EMP_ID			NUMERIC(18,0) PRIMARY KEY
	   ,EMP_CODE		NUMERIC(18,0)	   
	   ,ALPHA_EMP_CODE	VARCHAR(50)
	   ,EMP_FULL_NAME	VARCHAR(250)	   
	   ,DEPARTMENT		NVARCHAR(100)	   
	   ,BRANCH_ID       NUMERIC(18,0)
	   ,BRANCH_NAME	    VARCHAR(250)	   
	   ,DESIGNATION		NVARCHAR(100)
	   ,GRADE			NVARCHAR(100)
	   ,TYPENAME		NVARCHAR(100)
	   ,CATEGORY		NVARCHAR(100)
	   ,DIVISION		NVARCHAR(100)
	   ,SUB_VERTICAL	NVARCHAR(100)
	   ,SUB_BRANCH		NVARCHAR(100)
	   ,SEGMENT_NAME	NVARCHAR(100)
	   ,CENTER_CODE		NVARCHAR(100)
	)
	
	
	INSERT INTO #PAYMENTMAST 
	SELECT		E.CMP_ID,E.EMP_ID,E.EMP_CODE,E.ALPHA_EMP_CODE,ISNULL(E.EMPNAME_ALIAS_SALARY,E.EMP_FULL_NAME),
				DM.DEPT_NAME,BM.BRANCH_ID,BM.BRANCH_NAME,
				DNM.DESIG_NAME,GA.GRD_NAME,TM.TYPE_NAME,CT.CAT_NAME AS CATEGORY,VT.VERTICAL_NAME,ST.SUBVERTICAL_NAME,SB.SUBBRANCH_NAME,
				BSG.SEGMENT_NAME,CC.CENTER_CODE
	FROM		T0080_EMP_MASTER E	WITH (NOLOCK) INNER JOIN
				( 
					SELECT	I.EMP_ID,I.BASIC_SALARY,I.CTC,I.INC_BANK_AC_NO,PAYMENT_MODE,I.BRANCH_ID,I.GRD_ID,I.DEPT_ID,
							I.DESIG_ID,I.TYPE_ID,I.CAT_ID,I.VERTICAL_ID,I.SUBVERTICAL_ID,I.SUBBRANCH_ID,I.SEGMENT_ID,I.CENTER_ID 
					FROM	T0095_INCREMENT I WITH (NOLOCK) INNER JOIN 
							( 
								SELECT	MAX(INCREMENT_ID) AS INCREMENT_ID , EMP_ID 
								FROM	T0095_INCREMENT WITH (NOLOCK)
								WHERE	INCREMENT_EFFECTIVE_DATE <= @TO_DATE AND CMP_ID = @CMP_ID
								GROUP BY EMP_ID 
							 ) QRY ON	I.EMP_ID = QRY.EMP_ID	AND I.INCREMENT_ID = QRY.INCREMENT_ID 
				 )INC_QRY ON E.EMP_ID = INC_QRY.EMP_ID INNER JOIN 
				 #EMP_CONS EC ON E.EMP_ID = EC.EMP_ID LEFT OUTER JOIN 
				 T0030_BRANCH_MASTER BM WITH (NOLOCK) ON INC_QRY.BRANCH_ID = BM.BRANCH_ID	LEFT OUTER JOIN 
				 T0040_DEPARTMENT_MASTER DM WITH (NOLOCK) ON INC_QRY.DEPT_ID = DM.DEPT_ID	left outer join 
				 T0040_DESIGNATION_MASTER dnm WITH (NOLOCK) on Inc_Qry.Desig_Id = dnm.Desig_ID left outer join 
				 T0040_TYPE_MASTER tm WITH (NOLOCK) on Inc_Qry.Type_ID = tm.Type_ID LEFT OUTER JOIN 
				 T0030_CATEGORY_MASTER CT WITH (NOLOCK) on CT.Cat_ID=Inc_Qry.Cat_Id LEFT OUTER JOIN 
				 T0040_VERTICAL_SEGMENT VT WITH (NOLOCK) ON VT.VERTICAL_ID=INC_QRY.VERTICAL_ID LEFT OUTER JOIN 
				 T0050_SUBVERTICAL ST WITH (NOLOCK) ON ST.SUBVERTICAL_ID=INC_QRY.SUBVERTICAL_ID LEFT OUTER JOIN 
				 T0050_SUBBRANCH SB WITH (NOLOCK) ON SB.SUBBRANCH_ID=INC_QRY.SUBBRANCH_ID LEFT OUTER JOIN 
				 T0040_BUSINESS_SEGMENT BSG WITH (NOLOCK) ON BSG.SEGMENT_ID=INC_QRY.SEGMENT_ID LEFT OUTER JOIN 
				 T0040_COST_CENTER_MASTER CC WITH (NOLOCK) ON CC.CENTER_ID = INC_QRY.CENTER_ID LEFT OUTER JOIN 
				 T0040_GRADE_MASTER GA WITH (NOLOCK) ON INC_QRY.GRD_ID = GA.GRD_ID--INNER JOIN 
				 --T0200_MONTHLY_SALARY MS ON MS.EMP_ID = EC.EMP_ID AND MONTH(MONTH_END_DATE) = MONTH(@TO_DATE) AND 
				 --YEAR(MONTH_END_DATE) = YEAR(@TO_DATE) AND ISNULL(IS_FNF,0) = 0
	
	
	
	DECLARE @VAL NVARCHAR(MAX)
	DECLARE @AD_NAME_DYN NVARCHAR(100)	
	DECLARE @VAL_UPDATE NVARCHAR(MAX)
	DECLARE @COLUMNS NVARCHAR(MAX)	
	DECLARE @SUM_OF_ALLOWNACES_EARNING AS VARCHAR(MAX)	
	DECLARE @ALLOWNACES_EARNING AS VARCHAR(MAX)	
	Declare @AD_LEVEL Numeric
	set @AD_LEVEL = 0
	
	SET @ALLOWNACES_EARNING=''
	SET @COLUMNS = '#'
	SET @SUM_OF_ALLOWNACES_EARNING=''
	
	SET @Val = ''
	SET @VAL = @VAL + ' ALTER TABLE  #PAYMENTMAST ADD LEGAL_WORKING_HOURS VARCHAR(10) DEFAULT ''00:00'';
						ALTER TABLE  #PAYMENTMAST ADD NIGHT_SHIFT_HOUR VARCHAR(10) DEFAULT ''00:00'';
						ALTER TABLE  #PAYMENTMAST ADD OVERTIME_HOUR VARCHAR(10) DEFAULT ''00:00'';
						ALTER TABLE  #PAYMENTMAST ADD RESERVERD_HOLIDAY VARCHAR(10) DEFAULT ''00:00'';
						ALTER TABLE  #PAYMENTMAST ADD UNPAID_HOLIDAY VARCHAR(10) DEFAULT ''00:00'';
						ALTER TABLE  #PAYMENTMAST ADD SICKNESS VARCHAR(10) DEFAULT ''00:00'';
						ALTER TABLE  #PAYMENTMAST ADD EXTRA_PAYMENT NUMERIC(18,2) DEFAULT 0;
						ALTER TABLE  #PAYMENTMAST ADD WAGES NUMERIC(18,2) DEFAULT 0;						
						ALTER TABLE  #PAYMENTMAST ADD SERVICE_CHARGES_TO_CONTRACTOR NUMERIC(18,2) DEFAULT 0;'
						
						
	EXEC(@VAL)
	
	-------------------------FOR ALLOWANCES---------------------------------
	
	
		SET @VAL = ''
		SET @VAL_UPDATE = '';
		DECLARE ALLOW_DEDU_CURSOR CURSOR FOR
		SELECT	AD_SORT_NAME,AD_LEVEL 
		FROM	T0210_MONTHLY_AD_DETAIL T WITH (NOLOCK) INNER JOIN 
				T0050_AD_MASTER A WITH (NOLOCK) ON T.AD_ID = A.AD_ID AND T.CMP_ID = A.CMP_ID
		WHERE	T.CMP_ID = @CMP_ID AND T.FOR_DATE >= @FROM_DATE AND T.TO_DATE <= @TO_DATE
				AND (ISNULL(A.AD_NOT_EFFECT_SALARY,0) = 0 OR ISNULL(T.REIMSHOW,0) = 1)
				AND AD_ACTIVE = 1 AND AD_FLAG = 'I' AND A.ALLOWANCE_TYPE <> 'R'	AND T.S_SAL_TRAN_ID IS NULL  --M_AD_AMOUNT <> 0 AND 
		GROUP BY AD_SORT_NAME ,AD_LEVEL
		ORDER BY AD_LEVEL,A.AD_SORT_NAME ASC
		
		OPEN ALLOW_DEDU_CURSOR
			FETCH NEXT FROM ALLOW_DEDU_CURSOR INTO @AD_NAME_DYN,@AD_LEVEL
			WHILE @@FETCH_STATUS = 0
				BEGIN
					SET @AD_NAME_DYN = @AD_NAME_DYN
					SET @AD_NAME_DYN = REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(LTRIM(RTRIM(@AD_NAME_DYN)),'+','_'),'''','_'),',','_'),'.','_'),'  ',' '),'%',''),'-',' '),'@',''),'(',''),')',''),' ','_'),'__','_'),'__','_'),'/','_')
					SET @SUM_OF_ALLOWNACES_EARNING=@SUM_OF_ALLOWNACES_EARNING + ',SUM([' + @AD_NAME_DYN + ']) AS [' + @AD_NAME_DYN +']'
					SET @ALLOWNACES_EARNING =@ALLOWNACES_EARNING + ',[' + @AD_NAME_DYN + '] AS [' + @AD_NAME_DYN +']'
					--SET @VAL = @VAL + 'ALTER TABLE   #CTCMAST ADD [' + REPLACE(@AD_NAME_DYN,' ','_') + '] NUMERIC(18,2) DEFAULT 0 NOT NULL;'
					SET @VAL = @VAL + 'ALTER TABLE   #PAYMENTMAST ADD [' + REPLACE(@AD_NAME_DYN,' ','_') + '] NUMERIC(18,2) NULL;'
					SET @VAL_UPDATE = @VAL_UPDATE+ 'UPDATE  #PAYMENTMAST SET [' + REPLACE(@AD_NAME_DYN,' ','_') + '] = 0; '
					SET @COLUMNS = @COLUMNS +  '[' + REPLACE(RTRIM(LTRIM(@AD_NAME_DYN)),' ','_') + ']#'

					SET @VAL_UPDATE = @VAL_UPDATE+ 'UPDATE  #PAYMENTMAST SET [' + REPLACE(@AD_NAME_DYN,' ','_') + '] = -413036 WHERE EMP_CODE = -999;'
				FETCH NEXT FROM ALLOW_DEDU_CURSOR INTO @AD_NAME_DYN,@AD_LEVEL
				END
		CLOSE ALLOW_DEDU_CURSOR	
		DEALLOCATE ALLOW_DEDU_CURSOR

		EXEC (@VAL);
		EXEC (@VAL_UPDATE);
		
			DECLARE @SUM_OF_ALLOWNACES_DEDUCT AS VARCHAR(MAX)
			SET @SUM_OF_ALLOWNACES_DEDUCT=''
			DECLARE @ALLOWNACES_DEDUCT AS VARCHAR(MAX)
			SET @ALLOWNACES_DEDUCT=''
			SET @AD_LEVEL = 0
			
			
			SET @VAL = ''
			SET @VAL_UPDATE = '';
			DECLARE ALLOW_DEDU_CURSOR CURSOR FOR
					SELECT AD_SORT_NAME,AD_LEVEL FROM T0210_MONTHLY_AD_DETAIL T WITH (NOLOCK) INNER JOIN T0050_AD_MASTER A WITH (NOLOCK) ON T.AD_ID = A.AD_ID AND T.CMP_ID = A.CMP_ID
				WHERE	T.CMP_ID = @CMP_ID 
						AND T.FOR_DATE >= @FROM_DATE AND T.TO_DATE <= @TO_DATE
						AND (ISNULL(A.AD_NOT_EFFECT_SALARY,0) = 0 OR ISNULL(T.REIMSHOW,0) = 1) AND AD_ACTIVE = 1 AND AD_FLAG = 'D'
						AND T.S_SAL_TRAN_ID IS NULL --M_AD_AMOUNT <> 0 AND 
				GROUP BY AD_SORT_NAME,AD_LEVEL
				ORDER BY AD_LEVEL
				
				OPEN ALLOW_DEDU_CURSOR
					FETCH NEXT FROM ALLOW_DEDU_CURSOR INTO @AD_NAME_DYN,@AD_LEVEL
					WHILE @@FETCH_STATUS = 0
						BEGIN
							SET @AD_NAME_DYN = REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(LTRIM(RTRIM(@AD_NAME_DYN)),'+','_'),'''','_'),',','_'),'.','_'),'  ',' '),'%',''),'-',' '),'@',''),'(',''),')',''),' ','_'),'__','_'),'__','_'),'/','')
							SET @SUM_OF_ALLOWNACES_DEDUCT=@SUM_OF_ALLOWNACES_DEDUCT + ',SUM(' + @AD_NAME_DYN + ') AS ' + @AD_NAME_DYN +''
							SET @ALLOWNACES_DEDUCT =@ALLOWNACES_DEDUCT + ',' + @AD_NAME_DYN + ' AS ' + @AD_NAME_DYN +''
							--SET @VAL = @VAL + 'ALTER TABLE   #CTCMAST ADD [' + REPLACE(@AD_NAME_DYN,' ','_') + '] NUMERIC(18,2) DEFAULT 0 NOT NULL; '
							SET @VAL = @VAL + 'ALTER TABLE   #PAYMENTMAST ADD [' + REPLACE(@AD_NAME_DYN,' ','_') + '] NUMERIC(18,2) NULL; '
							SET @VAL_UPDATE = @VAL_UPDATE+ 'UPDATE  #PAYMENTMAST SET [' + REPLACE(@AD_NAME_DYN,' ','_') + '] = 0; '
							SET @COLUMNS = @COLUMNS + '[' + REPLACE(RTRIM(LTRIM(@AD_NAME_DYN)),' ','_') + ']#'

							SET @VAL_UPDATE = @VAL_UPDATE+ 'UPDATE  #PAYMENTMAST SET [' + REPLACE(@AD_NAME_DYN,' ','_') + '] = -888193 WHERE EMP_CODE = -999;'
						FETCH NEXT FROM ALLOW_DEDU_CURSOR INTO @AD_NAME_DYN,@AD_LEVEL
						END
			CLOSE ALLOW_DEDU_CURSOR	
			DEALLOCATE ALLOW_DEDU_CURSOR
			EXEC (@VAL)	
			EXEC (@VAL_UPDATE)	

	  
	---------------------------------ENDED----------------------------------
	
	SET @VAL = ''
	SET @VAL = @VAL + '	ALTER TABLE  #PAYMENTMAST ADD LEAVE_LIABILITY NUMERIC(18,2) DEFAULT 0;
						ALTER TABLE  #PAYMENTMAST ADD WC_POLICY NUMERIC(18,2) DEFAULT 0;
						ALTER TABLE  #PAYMENTMAST ADD CTC NUMERIC(18,2) DEFAULT 0;
						ALTER TABLE  #PAYMENTMAST ADD CTC_EURO NUMERIC(18,2) DEFAULT 0;
						ALTER TABLE  #PAYMENTMAST ADD CTC_EURO_HOUR NUMERIC(18,2) DEFAULT 0;'
	EXEC(@VAL)
	
	CREATE TABLE #DATA         
		(         
		   EMP_ID   NUMERIC ,         
		   FOR_DATE DATETIME,        
		   DURATION_IN_SEC NUMERIC,        
		   SHIFT_ID NUMERIC ,        
		   SHIFT_TYPE NUMERIC ,        
		   EMP_OT  NUMERIC ,        
		   EMP_OT_MIN_LIMIT NUMERIC,        
		   EMP_OT_MAX_LIMIT NUMERIC,        
		   P_DAYS  NUMERIC(12,3) DEFAULT 0,        
		   OT_SEC  NUMERIC DEFAULT 0  ,
		   IN_TIME DATETIME,
		   SHIFT_START_TIME DATETIME,
		   OT_START_TIME NUMERIC DEFAULT 0,
		   SHIFT_CHANGE TINYINT DEFAULT 0,
		   FLAG INT DEFAULT 0,
		   WEEKOFF_OT_SEC  NUMERIC DEFAULT 0,
		   HOLIDAY_OT_SEC  NUMERIC DEFAULT 0,
		   CHK_BY_SUPERIOR NUMERIC DEFAULT 0,
		   IO_TRAN_ID	   NUMERIC DEFAULT 0, 
		   OUT_TIME DATETIME,
		   SHIFT_END_TIME DATETIME,			
		   OT_END_TIME NUMERIC DEFAULT 0,	
		   WORKING_HRS_ST_TIME TINYINT DEFAULT 0,
		   WORKING_HRS_END_TIME TINYINT DEFAULT 0, 
		   GATEPASS_DEDUCT_DAYS NUMERIC(18,2) DEFAULT 0 
	   )    
	 
	  
	   
	DECLARE @OT_HOURS AS NUMERIC(18,2)
	EXEC SP_CALCULATE_PRESENT_DAYS	@CMP_ID=@CMP_ID,@FROM_DATE=@FROM_DATE,@TO_DATE=@TO_DATE,@BRANCH_ID=@BRANCH_ID,@CAT_ID=@CAT_ID,
									@GRD_ID=@GRD_ID,@TYPE_ID=@TYPE_ID,@DEPT_ID=@DEPT_ID,@DESIG_ID=@DESIG_ID,@EMP_ID=@EMP_ID,
									@CONSTRAINT=@CONSTRAINT,@Return_Record_set=4,@Reload_InOut = 0
									
							
	
	IF OBJECT_ID('tempdb..#Emp_WeekOff') IS NULL
	BEGIN
			--Holiday & WeekOff - In colon(;) seperated string (Without Cancel) : Used in SP_CALCULATE_PRESENT_DAYS
			CREATE TABLE #Emp_WeekOff_Holiday
			(
				Emp_ID				NUMERIC,
				WeekOffDate			VARCHAR(Max),
				WeekOffCount		NUMERIC(3,1),
				HolidayDate			VARCHAR(Max),
				HolidayCount		NUMERIC(3,1),
				HalfHolidayDate		VARCHAR(Max),
				HalfHolidayCount	NUMERIC(3,1),
				OptHolidayDate		VARCHAR(Max),
				OptHolidayCount		NUMERIC(3,1)
			)
		
			--Holiday - by Date : Used in SP_RPT_EMP_ATTENDANCE_MUSTER_GET_ALL
			CREATE TABLE #EMP_HOLIDAY(EMP_ID NUMERIC, FOR_DATE DATETIME, IS_CANCEL BIT, Is_Half tinyint, Is_P_Comp tinyint, H_DAY numeric(3,1));
			CREATE UNIQUE CLUSTERED INDEX IX_EMP_HOLIDAY_EMPID_FORDATE ON #EMP_HOLIDAY(EMP_ID, FOR_DATE);
		
			--WeekOff - by Date : Used in SP_RPT_EMP_ATTENDANCE_MUSTER_GET_ALL
			CREATE TABLE #Emp_WeekOff
			(
				Row_ID			NUMERIC,
				Emp_ID			NUMERIC,
				For_Date		DATETIME,
				Weekoff_day		VARCHAR(10),
				W_Day			numeric(3,1),
				Is_Cancel		BIT
			)
			CREATE CLUSTERED INDEX IX_Emp_WeekOff_EMPID_FORDATE ON #Emp_WeekOff(Emp_ID,For_Date);
			
			
			--Holiday & Weekoff - In colon(;) seperated string (With Cancel) : Used in SP_CALCULATE_PRESENT_DAYS
			CREATE TABLE #EMP_HW_CONS
			(
				Emp_ID				NUMERIC,
				WeekOffDate			Varchar(Max),
				WeekOffCount		NUMERIC(3,1),
				CancelWeekOff		Varchar(Max),
				CancelWeekOffCount	NUMERIC(3,1),
				HolidayDate			Varchar(MAX),
				HolidayCount		NUMERIC(3,1),
				HalfHolidayDate		Varchar(MAX),
				HalfHolidayCount	NUMERIC(3,1),
				CancelHoliday		Varchar(Max),
				CancelHolidayCount	NUMERIC(3,1)
			)
			CREATE UNIQUE CLUSTERED INDEX IX_EMP_HW_CONS_EmpID ON #EMP_HW_CONS(Emp_ID)
					
			EXEC SP_GET_HW_ALL @CONSTRAINT=@CONSTRAINT,@CMP_ID=@Cmp_ID, @FROM_DATE=@FROM_DATE, @TO_DATE=@TO_DATE, @All_Weekoff = 0, @Exec_Mode=0
	
		END
		
	
	
	DECLARE @FOR_DATE DATETIME 
	DECLARE @DATE_DIFF NUMERIC 
	DECLARE @NEW_TO_DATE DATETIME 
	DECLARE @ROW_ID	NUMERIC 
	DECLARE @CTC_COLUMNS NVARCHAR(100)
	
	SET @DATE_DIFF = DATEDIFF(D,@FROM_DATE,@TO_DATE) + 1 
	SET @DATE_DIFF = 35 - ( @DATE_DIFF)
	SET @NEW_TO_DATE = @TO_DATE --DATEADD(D,@DATE_DIFF,@TO_DATE)
		
	DECLARE @ATT_PERIOD  TABLE
	  (
		FOR_DATE	DATETIME,
		ROW_ID		NUMERIC
	  )
	SET @FOR_DATE = @FROM_DATE
	SET @ROW_ID = 1
	WHILE @FOR_DATE <= @NEW_TO_DATE
		BEGIN
			
			INSERT INTO @ATT_PERIOD 
			SELECT @FOR_DATE ,@ROW_ID
			SET @ROW_ID =@ROW_ID + 1
			SET @FOR_DATE = DATEADD(D,1,@FOR_DATE)
		END

	
		
	IF	EXISTS (SELECT * FROM [TEMPDB].DBO.SYSOBJECTS WHERE NAME LIKE '#Yearly_Salary' )		
			BEGIN
				DROP TABLE #YEARLY_SALARY 
			END
			
	 CREATE TABLE #ATT_MUSTER 
	  (
			EMP_ID		NUMERIC , 
			CMP_ID		NUMERIC,
			FOR_DATE	DATETIME,
			STATUS		VARCHAR(10),
			LEAVE_COUNT	NUMERIC(5,1),
			WO_HO		VARCHAR(3),
			STATUS_2	VARCHAR(10),
			ROW_ID		NUMERIC ,
			IN_DATE		DATETIME,
			OUT_DATE	DATETIME,
			DURATION	VARCHAR(10)
	  )
	  
	  CREATE CLUSTERED INDEX IX_EMP_ID_CMP_ID_FOR_DATE_ATT_MUSTER ON #Att_Muster
	  (
		Emp_Id,
		Row_ID
	  )
	 
	
	 
	INSERT INTO #ATT_MUSTER (EMP_ID,CMP_ID,FOR_DATE,ROW_ID)
	SELECT 	EMP_ID ,@CMP_ID ,FOR_DATE,ROW_ID FROM @ATT_PERIOD CROSS JOIN #EMP_CONS
	
	UPDATE	A	SET STATUS = 'P' 
	FROM	#ATT_MUSTER A 
	WHERE EXISTS(SELECT IO_TRAN_ID FROM T0150_EMP_INOUT_RECORD WITH (NOLOCK) WHERE EMP_ID = A.EMP_ID AND NOT IN_TIME IS NULL AND FOR_DATE = A.FOR_DATE)
	
	
	UPDATE A SET LEAVE_COUNT = ISNULL(LEAVE_USED,0) + ISNULL(COMPOFF_USED,0)
	FROM #ATT_MUSTER A INNER JOIN T0140_LEAVE_TRANSACTION LT ON LT.EMP_ID = A.EMP_ID  AND LT.FOR_DATE = A.FOR_DATE 
	WHERE  (LT.LEAVE_USED > 0 OR LT.COMPOFF_USED > 0)
			
	
		
	UPDATE  A	SET WO_HO = 'W' 
	FROM	#ATT_MUSTER A 
	WHERE	EXISTS(SELECT 1 FROM #EMP_HW_CONS HW WHERE HW.Emp_ID=A.EMP_ID AND CHARINDEX(CAST(A.FOR_DATE AS VARCHAR(11)), HW.WeekOffDate + ';' + HW.CancelWeekOff) > 0 ) 
	
	
	UPDATE A SET DURATION=DBO.F_RETURN_HOURS(DATEDIFF(S,IN_TIME,OUT_TIME))
	FROM #ATT_MUSTER A INNER JOIN T0150_EMP_INOUT_RECORD EIO
	ON A.EMP_ID = EIO.EMP_ID AND A.FOR_DATE = EIO.FOR_DATE
	
	UPDATE A SET WO_HO = CASE WHEN EH.IS_HALF = 1 THEN 'HHO' ELSE 'HO' END
	FROM #ATT_MUSTER A INNER JOIN
	#EMP_HOLIDAY EH ON A.FOR_DATE = EH.FOR_DATE AND A.EMP_ID = EH.EMP_ID
	
	
	UPDATE A SET STATUS_2 ='CO'	
	FROM #ATT_MUSTER A
	WHERE  STATUS = 'P' AND ( WO_HO = 'W' OR WO_HO = 'HO' ) AND ROW_ID = A.ROW_ID AND 
			FOR_DATE = A.FOR_DATE AND EMP_ID = A.EMP_ID
	
		
		
	UPDATE A SET IN_DATE= QRY.IN_TIME , OUT_DATE=QRY.OUT_TIME
	FROM #ATT_MUSTER A INNER JOIN
	(
		SELECT  MIN(IN_TIME) AS IN_TIME,MAX(OUT_TIME) as OUT_TIME,A.EMP_ID,A.FOR_DATE FROM T0150_EMP_INOUT_RECORD EIO WITH (NOLOCK)
		INNER JOIN #ATT_MUSTER A ON EIO.EMP_ID = A.EMP_ID AND EIO.FOR_DATE = A.FOR_DATE
		GROUP BY A.EMP_ID,A.FOR_DATE
	)QRY ON QRY.FOR_DATE = A.FOR_DATE AND QRY.EMP_ID = A.EMP_ID AND A.STATUS_2 = 'CO'
	
	
	
	DELETE FROM #ATT_MUSTER WHERE OUT_DATE IS NULL AND IN_DATE IS NULL
	
	UPDATE #ATT_MUSTER
	SET STATUS =  DBO.F_RETURN_HHMM(CAST(DATEPART(HH,IN_DATE) AS VARCHAR(2))+ ':'+ CAST(DATEPART(MI,IN_DATE) AS VARCHAR(2)))
	WHERE STATUS = 'P'
	
	UPDATE #ATT_MUSTER
	SET STATUS_2 =  DBO.F_RETURN_HHMM(CAST(DATEPART(HH,OUT_DATE) AS VARCHAR(2))+ ':'+ CAST(DATEPART(MI,OUT_DATE) AS VARCHAR(2)))
	WHERE NOT OUT_DATE IS NULL
	
	
	--SELECT * FROM #PAYMENTMAST
	--SELEct * FROM #DATA
	--SELECT * FROM #ATT_MUSTER		
		
		UPDATE	PT
		SET		PT.LEGAL_WORKING_HOURS = Q.WORKING_HOUR,
				PT.OVERTIME_HOUR = Q.OT_HOUR
		FROM	#PAYMENTMAST PT INNER JOIN
				(
					SELECT  EMP_ID,DBO.F_RETURN_HOURS(ISNULL(SUM(DURATION_IN_SEC),0)) AS WORKING_HOUR,
							DBO.F_RETURN_HOURS(ISNULL(SUM(OT_SEC),0)) AS OT_HOUR
					FROM	#DATA 
					WHERE	FOR_DATE BETWEEN @FROM_DATE AND @TO_DATE --AND P_DAYS <> 0								
					GROUP BY EMP_ID
			)Q ON Q.EMP_ID = PT.EMP_ID
	
		
		UPDATE	PT
		SET		PT.RESERVERD_HOLIDAY = Q.RESERVERD_HOLIDAY				
		FROM	#PAYMENTMAST PT INNER JOIN
				(
					SELECT  EMP_ID,DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(DURATION)),0)) AS RESERVERD_HOLIDAY							
					FROM	#ATT_MUSTER 
					WHERE	FOR_DATE > = @FROM_DATE AND FOR_DATE <= @TO_DATE 							
					GROUP BY EMP_ID
			)Q ON Q.EMP_ID = PT.EMP_ID
			
		CREATE TABLE #LEAVE
		(
			EMP_ID NUMERIC,			
			FOR_DATE DATETIME
		)
		
		
		INSERT INTO #LEAVE
		SELECT	LT.EMP_ID,LT.FOR_DATE 
		FROM	T0140_LEAVE_TRANSACTION LT WITH (NOLOCK) INNER JOIN
				#PAYMENTMAST PT ON PT.EMP_ID = LT.EMP_ID INNER JOIN
				T0040_LEAVE_MASTER LM WITH (NOLOCK) ON LM.LEAVE_ID = LT.LEAVE_ID
		WHERE   LT.FOR_DATE BETWEEN @FROM_DATE AND @TO_DATE AND 
				LM.LEAVE_TYPE <> 'COMPANY PURPOSE'  		
	
		UPDATE	PT
		SET		PT.SICKNESS = Q.LEAVE_HOURS				
		FROM	#PAYMENTMAST PT INNER JOIN
				(
					SELECT  DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(SM.F_Duration)),0)) AS LEAVE_HOURS,L.EMP_ID
					FROM	#LEAVE L 
							CROSS APPLY (SELECT F_Duration 
									     FROM	T0040_SHIFT_MASTER SM WITH (NOLOCK)
										 WHERE	SM.SHIFT_ID=dbo.fn_get_Shift_From_Monthly_Rotation(@Cmp_ID,L.Emp_ID,L.For_Date)
										 ) SM							
					WHERE   L.FOR_DATE BETWEEN @FROM_DATE AND @TO_DATE
					GROUP BY L.EMP_ID  					
			)Q ON Q.EMP_ID = PT.EMP_ID
		
			--INNER JOIN
			--(
			--	SELECT	SED.SHIFT_ID,SED.EMP_ID,SED.FOR_DATE 
			--	FROM	T0100_EMP_SHIFT_DETAIL SED INNER JOIN
			--			(
			--				SELECT MAX(SM.FOR_DATE) AS FOR_DATE,SM.EMP_ID,SM.SHIFT_ID 
			--				FROM  T0100_EMP_SHIFT_DETAIL SM INNER JOIN
			--					  #EMP_CONS EC ON EC.EMP_ID = SM.EMP_ID INNER JOIN
			--					  #LEAVE L ON L.EMP_ID = SM.EMP_ID									  
			--				WHERE SM.FOR_DATE <= L.FOR_DATE
			--				GROUP BY SM.EMP_ID,SM.SHIFT_ID 
			--			)Q_S1 ON Q_S1.SHIFT_ID = SED.SHIFT_ID AND Q_S1.EMP_ID = SED.EMP_ID
			--)Q_S ON Q_S.EMP_ID = L.EMP_ID INNER JOIN
			--T0040_SHIFT_MASTER SIM ON SIM.SHIFT_ID = Q_S.SHIFT_ID	
			--#DATA D ON D.EMP_ID = L.EMP_ID --AND L.FOR_DATE = D.FOR_DATE
	
		----------------------FOR ALLOWANCE AMOUNT UPDATION-----------------
		
		
					IF OBJECT_ID('TEMPDB..#EMP_ALLOWANCE') IS NOT NULL
					BEGIN
						DROP TABLE #EMP_ALLOWANCE
					END
							
					CREATE TABLE #EMP_ALLOWANCE
					(
						EMP_ID NUMERIC(18,0),
						AD_ID NUMERIC(18,0),
						AD_AMOUNT NUMERIC(18,2)			
					)
		
		
		
					Declare CRU_COLUMNS CURSOR FOR
					Select data from Split(@Columns,'#') where data <> ''
									OPEN CRU_COLUMNS
									fetch next from CRU_COLUMNS into @CTC_COLUMNS
									while @@fetch_status = 0
										Begin				
												begin
														Set @CTC_COLUMNS = Replace(Replace(Replace(REPLACE(Replace(REPLACE(Replace(REPLACE(replace(Replace(Replace(Replace(Replace(ltrim(rtrim(@CTC_COLUMNS)),'+','_'),'''','_'),',','_'),'.','_'),'  ',' '),'%',''),'-',' '),'@',''),'(',''),')',''),' ','_'),'__','_'),'__','_')										
														
														begin
															
																Insert INTO #Emp_Allowance
																select	ded.EMP_ID,ded.AD_ID,
																		isnull(sum(case when ded.ReimAmount >0  then ded.ReimAmount else (isnull(ded.M_AD_Amount,0)) end),0) As Amount																
																from	T0210_MONTHLY_AD_DETAIL  ded WITH (NOLOCK) inner join 
																		T0050_AD_MASTER ad WITH (NOLOCK) on ded.AD_Id = ad.AD_Id
																WHere  (Case When Allowance_Type = 'A' THEN '[' + Replace(Replace(Replace(REPLACE(Replace(REPLACE(Replace(REPLACE(replace(Replace(Replace(Replace(Replace(ltrim(rtrim(ad.AD_Sort_Name)),'+','_'),'''','_'),',','_'),'.','_'),'  ',' '),'%',''),'-',' '),'@',''),'(',''),')',''),' ','_'),'__','_'),'__','_') +']'
																			ELSE '[' + Replace(Replace(Replace(REPLACE(Replace(REPLACE(Replace(REPLACE(replace(Replace(Replace(Replace(Replace(ltrim(rtrim(ad.AD_Sort_Name + '_' + 'Credit')),'+','_'),'''','_'),',','_'),'.','_'),'  ',' '),'%',''),'-',' '),'@',''),'(',''),')',''),' ','_'),'__','_'),'__','_') + ']'
																		END) = @CTC_COLUMNS and ded.For_Date >= @From_Date and ded.To_date <= @To_Date and 
																		ded.Cmp_ID = @Cmp_Id and S_Sal_Tran_ID is Null   
																group by ded.EMP_ID , ded.AD_Id	,ad.AD_SORT_NAME
															
																Set @val = ''
																Set @val = 'Update PT Set ' + @CTC_COLUMNS + ' = Qry.AD_Amount
																			From #PAYMENTMAST PT 
																			Inner Join
																					(
																						Select EA.AD_Amount,EA.Emp_ID From  #Emp_Allowance EA																			
																					) as Qry
																			 ON PT.Emp_ID = Qry.Emp_ID'
																Exec(@val)																
														end
														
														TRUNCATE TABLE  #Emp_Allowance;
												end
												
											fetch next from CRU_COLUMNS into @CTC_COLUMNS
										End
					close CRU_COLUMNS	
					deallocate CRU_COLUMNS
		
		
		-----------------------ENDED-----------------------
		
		---------Salary Table Content------------------------
		
				UPDATE PT
				SET		LEAVE_LIABILITY = (ISNULL(QRY.SALARY_AMOUNT,0) * 5)/100,			
						WAGES = QRY.GROSS_SALARY,
						SERVICE_CHARGES_TO_CONTRACTOR =(ISNULL(QRY.GROSS_SALARY,0) * 8)/100, 								
						EXTRA_PAYMENT= QRY.OT_AMOUNT							
				FROM	#PAYMENTMAST PT INNER JOIN
						(
							SELECT	GS.BRANCH_ID,GS.OT_FIX_SHIFT_HOURS
							FROM	T0040_GENERAL_SETTING GS WITH (NOLOCK) INNER JOIN 
									(
										SELECT	MAX(FOR_DATE) AS FOR_DATE,CMP_ID,BRANCH_ID
										FROM	T0040_GENERAL_SETTING WITH (NOLOCK)
										GROUP BY CMP_ID,BRANCH_ID
									 ) QRY_1 ON QRY_1.CMP_ID = GS.CMP_ID AND QRY_1.BRANCH_ID = GS.BRANCH_ID AND GS.FOR_DATE = QRY_1.FOR_DATE
						  ) AS QRY_2 ON PT.BRANCH_ID = QRY_2.BRANCH_ID INNER JOIN
						 (
							SELECT	SUM(MS.SALARY_AMOUNT) AS SALARY_AMOUNT,
									(ISNULL(SUM(MS.ALLOW_AMOUNT),0) + ISNULL(SUM(MS.SALARY_AMOUNT),0) + CAST(ISNULL(SUM(MS.SETTELEMENT_AMOUNT),0)AS NUMERIC(18,2))+ ISNULL(SUM(MS.OTHER_ALLOW_AMOUNT),0)) AS GROSS_SALARY,
									--ISNULL(SUM(MS.PT_AMOUNT),0) AS PT_AMOUNT,										
									ISNULL(SUM(MS.OT_AMOUNT),0) AS OT_AMOUNT,EMP_ID,ISNULL(SUM(MS.LATE_DEDU_AMOUNT),0) AS LATE_DEDUCTION_AMOUNT
									
							FROM	T0200_MONTHLY_SALARY MS WITH (NOLOCK)
							WHERE	MS.MONTH_ST_DATE BETWEEN @FROM_DATE AND @TO_DATE AND MS.CMP_ID = @CMP_ID
							GROUP BY MS.EMP_ID,SALARY_STATUS
						  ) AS QRY ON PT.EMP_ID = QRY.EMP_ID
		
		
		
				UPDATE PT
				SET CTC = (QRY.CTC * (DATEDIFF(MM,@FROM_DATE,@TO_DATE) + 1)) 
				FROM #PAYMENTMAST PT INNER JOIN	
					 (
						SELECT		(SUM(ISNULL(T.E_AD_AMOUNT,0)) + ISNULL(I.BASIC_SALARY,0)) CTC,I.EMP_ID 
						FROM		DBO.[FN_GETEMPINCREMENTDETAIL](@CMP_ID, @CONSTRAINT, @TO_DATE) T INNER JOIN 
									T0050_AD_MASTER AD WITH (NOLOCK) ON T.AD_ID=AD.AD_ID INNER JOIN	
									T0095_INCREMENT I WITH (NOLOCK) ON I.INCREMENT_ID = T.INCREMENT_ID AND I.EMP_ID = T.EMP_ID 
						WHERE		ISNULL(AD.AD_PART_OF_CTC,0) = 1 AND AD.AD_FLAG = 'I' 	
						GROUP BY	I.EMP_ID,I.BASIC_SALARY							
					) AS QRY ON PT.EMP_ID = QRY.EMP_ID
		--------------------ENDED---------------------------
		
		
		----------------------Group By ----------------------
		
		DECLARE @STRING AS VARCHAR(MAX)
		DECLARE @STRING_2 AS VARCHAR(MAX)
		DECLARE @STRING_3 AS VARCHAR(MAX)
		SET @STRING=''	
		SET @STRING_2=''	
		SET @STRING_3=''
	
		
					
					IF @SUMMARY2 = '' OR @SUMMARY2 = '-1'
					SET @SUMMARY2 = NULL
		
					IF @SUMMARY3 = '' OR @SUMMARY3 = '-1'
					SET @SUMMARY3 = NULL
					
					DECLARE @STRING_1 VARCHAR(MAX)
					SET @STRING_1 = ''
					IF EXISTS (SELECT 1 FROM SYS.OBJECTS WHERE NAME = 'TEMPGROUP2')
						DROP TABLE TEMPGROUP2
					
					IF EXISTS (SELECT 1 FROM SYS.OBJECTS WHERE NAME = 'TEMPGROUP3')
						DROP TABLE TEMPGROUP3
						
					IF @SUMMARY2 IS NOT NULL
						BEGIN
							SET @STRING_2 = 'SELECT (CASE WHEN '+ @SUMMARY2 +'=''0'' THEN ''PT.BRANCH_NAME'' WHEN '+ @SUMMARY2 +' =''1'' THEN ''PT.GRADE'' WHEN '+ @SUMMARY2 +' =''2'' THEN ''PT.CATEGORY'' WHEN '+ @SUMMARY2 +' =''3'' THEN ''DEPARTMENT'' WHEN '+ @SUMMARY2 +' =''4'' THEN ''DESIGNATION'' WHEN '+ @SUMMARY2 +' =''5'' THEN ''TYPENAME'' WHEN '+ @SUMMARY2 +' =''6'' THEN ''DIVISION'' WHEN '+ @SUMMARY2 +' =''7'' THEN ''SUB_VERTICAL'' WHEN '+ @SUMMARY2 +' =''8'' THEN ''SUB_BRANCH'' WHEN '+ @SUMMARY2 +' =''9'' THEN ''SEGMENT_NAME'' WHEN '+ @SUMMARY2 +' =''10'' THEN ''CENTER_CODE'' END ) AS DESCRIPTION INTO TEMPGROUP2'
							EXEC(@STRING_2)
							SELECT @STRING_2 = DESCRIPTION FROM TEMPGROUP2
							SET @STRING_2 = ','+ @STRING_2
						END 
						
					IF @SUMMARY3 IS NOT NULL
						BEGIN
							SET @STRING_3 = 'SELECT (CASE WHEN '+ @SUMMARY3 +'=''0'' THEN ''PT.BRANCH_NAME'' WHEN '+ @SUMMARY3 +' =''1'' THEN ''PT.GRADE'' WHEN '+ @SUMMARY3 +' =''2'' THEN ''PT.CATEGORY'' WHEN '+ @SUMMARY3 +' =''3'' THEN ''DEPARTMENT'' WHEN '+ @SUMMARY3 +' =''4'' THEN ''DESIGNATION'' WHEN '+ @SUMMARY3 +' =''5'' THEN ''TYPENAME'' WHEN '+ @SUMMARY3 +' =''6'' THEN ''DIVISION'' WHEN '+ @SUMMARY3 +' =''7'' THEN ''SUB_VERTICAL'' WHEN '+ @SUMMARY3 +' =''8'' THEN ''SUB_BRANCH'' WHEN '+ @SUMMARY3 +' =''9'' THEN ''SEGMENT_NAME'' WHEN '+ @SUMMARY3 +' =''10'' THEN ''CENTER_CODE'' END ) AS DESCRIPTION INTO TEMPGROUP3'
							EXEC(@STRING_3)
							SELECT @STRING_3 = DESCRIPTION FROM TEMPGROUP3
							SET @STRING_3 = ','+ @STRING_3
						END
		
		IF @SUMMARY='0' --------FOR GROUPBY BRANCH---------------------------
			BEGIN 
					--SET @STRING = ' SELECT 0 AS FLAG, ROW_NUMBER() OVER (ORDER BY CM.BRANCH) AS ROW_ID,CM.BRANCH AS BRANCH_NAME'+ @STRING_2 +''+ @STRING_3 +',COUNT(EMP_ID) AS TOTAL_EMP,
					--ROUND((COUNT(EMP_ID)),0)AS AVG_EMP ,SUM(CM.BASIC_SALARY) AS BASIC_SALARY '+ @SUM_OF_ALLOWNACES_EARNING +',SUM(CM.PRODUCTION_BONUS) AS PRODUCTION_BONUS,SUM(CM.LEAVE_ENCASH_AMOUNT) AS LEAVE_ENCASH_AMOUNT,SUM(CM.UNIFORM_REFUND_AMOUNT) AS UNIFORM_REFUND_AMOUNT,SUM(TOTAL_EARNING) AS TOTAL_EARNING,SUM(BASIC_ARREAR) AS BASIC_ARREAR'
					--+ @SUM_OF_ALLOWNACES_EARNING_AREAR +',SUM(TOTAL_EARNING_ARREAR) AS TOTAL_EARNING_ARREAR, SUM(CM.OTHER_ALLOW)AS OTHER_ALLOWANCE, SUM(CM.GROSS_SALARY)AS GROSS_SALARY '+ @SUM_OF_ALLOWNACES_DEDUCT +',SUM(CM.ACTUAL_CTC) AS CTC,SUM(CM.ADVANCE_AMOUNT)AS ADVANCE_AMOUNT,SUM(CM.PT_AMOUNT)AS PT_AMOUNT'+ @SUM_OF_LOAN_AMOUNT_STR + ',SUM(CM.OT_RATE)AS OT_RATE,SUM(CM.OT_HOURS)AS OT_HOURS,SUM(CM.OT_AMOUNT)AS OT_AMOUNT,SUM(CM.M_HO_OT_HOURS)AS HOLIDAY_OT_HOURS,SUM(CM.M_HO_OT_AMOUNT)AS HOLIDAY_OT_AMOUNT,SUM(CM.M_WO_OT_HOURS)AS WEEKOFF_OT_HOURS,SUM(CM.M_WO_OT_AMOUNT)AS WEEKOFF_OT_AMOUNT,SUM(CM.WO_HO_FIX_OT_RATE) AS WO_HO_FIX_OT_RATE,SUM(CM.REVENUE_AMOUNT) AS REVENUE_AMOUNT,SUM(CM.LWF_AMOUNT)AS LWF_AMOUNT,SUM(ISNULL(CM.GATE_PASS_AMOUNT,0)) AS GATE_PASS_AMOUNT,SUM(ISNULL(CM.ASSET_INSTALLMENT_AMOUNT,0)) AS ASSET_INSTALLMENT_AMOUNT,SUM(ISNULL(CM.UNIFORM_DEDU_AMOUNT,0)) AS UNIFORM_INSTALLMENT_AMOUNT,SUM(ISNULL(CM.LATE_DEDUCTION_AMOUNT,0)) AS LATE_DEDUCTION_AMOUNT,SUM(ISNULL(TOTAL_DEDUCTION,0)) AS TOTAL_DEDUCTION ' 
					--+ @SUM_OF_ALLOWNACES_DEDUCT_AREAR + ',SUM(AREAR_DEDUCTION) AS AREAR_DEDUCTION,SUM(NET_TOTAL_DEDUCTION) AS NET_TOTAL_DEDUCTION, SUM(CM.NET_AMOUNT)AS NET_AMOUNT,SUM(NET_ROUND) AS NET_ROUND, SUM(TOTAL_NET) AS TOTAL_NET '+ @SUM_OF_ALLOWNACES_EARNING_CTC +' ,(SUM(NET_ROUND) + SUM(CM.GROSS_SALARY) '+ @SUM_OF_ALLOWNACES_EARNING_CTC_TOTAL +') AS TOTAL_AMOUNT,
					--SUM(CM.PRESENT_DAY) AS PRESENT_DAYS,SUM(CM.AREAR_DAY) AS AREAR_DAYS,SUM(CM.ABSENT_DAY) AS ABSENT_DAY,SUM(CM.HOLIDAY_DAY)AS HOLIDAY_DAY,SUM(CM.WEEKOFF_DAY)AS WEEK_OFF_DAYS,SUM(CM.SAL_CAL_DAY)AS SAL_CAL_DAY,SUM(CM.TOTAL_LEAVE_DAYS)AS TOTAL_LEAVE_DAYS,SUM(CM.TOTAL_PAID_LEAVE_DAYS)AS TOTAL_PAID_LEAVE_DAYS '+ @SUM_OF_ALLOWNACES_EARNING_REIM +' '

					
					SET @STRING = ' SELECT 0 AS FLAG, ROW_NUMBER() OVER (ORDER BY PT.BRANCH_NAME) AS ROW_ID,PT.BRANCH_NAME AS BRANCH_NAME,COUNT(EMP_ID) AS TOTAL_EMP,DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.LEGAL_WORKING_HOURS)),0)) AS LEGAL_WORKING_HOURS,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.NIGHT_SHIFT_HOUR)),0)) AS NIGHT_SHIFT_HOUR,DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.OVERTIME_HOUR)),0)) AS OVERTIME_HOUR,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.RESERVERD_HOLIDAY)),0)) AS RESERVERD_HOLIDAY,DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.UNPAID_HOLIDAY)),0)) AS UNPAID_HOLIDAY,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.SICKNESS)),0)) AS SICKNESS,SUM(PT.EXTRA_PAYMENT) AS EXTRA_PAYMENT,SUM(PT.WAGES) AS WAGES,
									SUM(PT.SERVICE_CHARGES_TO_CONTRACTOR) AS SERVICE_CHARGES_TO_CONTRACTOR' + @SUM_OF_ALLOWNACES_EARNING + ' ' + @SUM_OF_ALLOWNACES_DEDUCT + ',
									SUM(PT.LEAVE_LIABILITY) AS LEAVE_LIABILITY,(COUNT(EMP_ID) * 80) AS WC_POLICY,SUM(CTC) AS CTC,SUM(CTC_EURO) AS CTC_EURO,SUM(CTC_EURO_HOUR) AS CTC_EURO_HOUR'  

					
					SET @STRING = @STRING + ' INTO ##BRANCH FROM #PAYMENTMAST PT GROUP BY BRANCH_NAME'+ @STRING_2 +''+ @STRING_3 +''--WHERE SAL_CAL_DAY <> 0
					
					EXEC(@STRING)					
					
					
					
					--SET @STRING = 'INSERT INTO ##BRANCH SELECT 0 AS FLAG,(ISNULL(MAX(ROW_ID),0)+1),''TOTAL'''+ @STRING_2 +', SUM(TOTAL_EMP),ROUND((SUM(TOTAL_EMP)/'  + CAST(@AVG_EMP AS VARCHAR(10)) +'),0) ,SUM(BASIC_SALARY) ' + @SUM_OF_ALLOWNACES_EARNING + ',SUM(PRODUCTION_BONUS) AS PRODUCTION_BONUS,SUM(LEAVE_ENCASH_AMOUNT) AS LEAVE_ENCASH_AMOUNT,SUM(UNIFORM_REFUND_AMOUNT) AS UNIFORM_REFUND_AMOUNT,SUM(TOTAL_EARNING) AS TOTAL_EARNING, SUM(BASIC_ARREAR) AS BASIC_ARREAR'
					--+ @SUM_OF_ALLOWNACES_EARNING_AREAR + ',SUM(TOTAL_EARNING_ARREAR) AS TOTAL_EARNING_ARREAR,SUM(OTHER_ALLOWANCE)AS OTHER_ALLOWANCE,SUM(GROSS_SALARY)AS GROSS_SALARY '+ @SUM_OF_ALLOWNACES_DEDUCT +',SUM(CTC) AS CTC,SUM(ADVANCE_AMOUNT)AS ADVANCE_AMOUNT,SUM(PT_AMOUNT)AS PT_AMOUNT'+ @SUM_OF_LOAN_AMOUNT_STR + ',SUM(OT_RATE)AS OT_RATE,SUM(OT_HOURS)AS OT_HOURS,SUM(OT_AMOUNT)AS OT_AMOUNT,SUM(HOLIDAY_OT_HOURS)AS HOLIDAY_OT_HOURS,SUM(HOLIDAY_OT_AMOUNT)AS HOLIDAY_OT_AMOUNT,SUM(WEEKOFF_OT_HOURS)AS WEEKOFF_OT_HOURS,SUM(WEEKOFF_OT_AMOUNT)AS WEEKOFF_OT_AMOUNT,SUM(WO_HO_FIX_OT_RATE) AS WO_HO_FIX_OT_RATE,SUM(REVENUE_AMOUNT) AS REVENUE_AMOUNT,SUM(LWF_AMOUNT)AS LWF_AMOUNT,SUM(GATE_PASS_AMOUNT) AS GATE_PASS_AMOUNT,SUM(ASSET_INSTALLMENT_AMOUNT) AS ASSET_INSTALLMENT_AMOUNT,SUM(ISNULL(UNIFORM_INSTALLMENT_AMOUNT,0)) AS UNIFORM_INSTALLMENT_AMOUNT,SUM(ISNULL(LATE_DEDUCTION_AMOUNT,0)) AS LATE_DEDUCTION_AMOUNT,SUM(ISNULL(TOTAL_DEDUCTION,0)) AS TOTAL_DEDUCTION'
					--+@SUM_OF_ALLOWNACES_DEDUCT_AREAR + ',SUM(AREAR_DEDUCTION) AS AREAR_DEDUCTION,SUM(NET_TOTAL_DEDUCTION) AS NET_TOTAL_DEDUCTION, SUM(NET_AMOUNT)AS NET_AMOUNT,SUM(NET_ROUND) AS NET_ROUND, SUM(TOTAL_NET) AS TOTAL_NET '+ @SUM_OF_ALLOWNACES_EARNING_CTC +' ,SUM(TOTAL_AMOUNT) AS TOTAL_AMOUNT,
					--SUM(PRESENT_DAYS) AS PRESENT_DAYS,SUM(AREAR_DAYS) AS AREAR_DAYS,SUM(ABSENT_DAY) AS ABSENT_DAY,SUM(HOLIDAY_DAY)AS HOLIDAY_DAY,SUM(WEEK_OFF_DAYS)AS WEEK_OFF_DAYS,SUM(SAL_CAL_DAY)AS SAL_CAL_DAY,SUM(TOTAL_LEAVE_DAYS)AS TOTAL_LEAVE_DAYS,SUM(TOTAL_PAID_LEAVE_DAYS)AS TOTAL_PAID_LEAVE_DAYS '+ @SUM_OF_ALLOWNACES_EARNING_REIM +' FROM ##BRANCH';
				
					SET @STRING = ' INSERT INTO ##BRANCH SELECT 0 AS FLAG,(ISNULL(MAX(ROW_ID),0)+1),''TOTAL'''+ @STRING_2 +', SUM(TOTAL_EMP),DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(LEGAL_WORKING_HOURS)),0)) AS LEGAL_WORKING_HOURS,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(NIGHT_SHIFT_HOUR)),0)) AS NIGHT_SHIFT_HOUR,DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(OVERTIME_HOUR)),0)) AS OVERTIME_HOUR,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(RESERVERD_HOLIDAY)),0)) AS RESERVERD_HOLIDAY,DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(UNPAID_HOLIDAY)),0)) AS UNPAID_HOLIDAY,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(SICKNESS)),0)) AS SICKNESS,SUM(EXTRA_PAYMENT) AS EXTRA_PAYMENT,SUM(WAGES) AS WAGES,
									SUM(SERVICE_CHARGES_TO_CONTRACTOR) AS SERVICE_CHARGES_TO_CONTRACTOR' + @SUM_OF_ALLOWNACES_EARNING + ' ' + @SUM_OF_ALLOWNACES_DEDUCT + ',
									SUM(LEAVE_LIABILITY) AS LEAVE_LIABILITY,(SUM(TOTAL_EMP) * 80) AS WC_POLICY,SUM(CTC) AS CTC,SUM(CTC_EURO) AS CTC_EURO,SUM(CTC_EURO_HOUR) AS CTC_EURO_HOUR FROM ##BRANCH';
					
					EXEC(@STRING)
					
					SET @STRING = 'SELECT * FROM ##BRANCH ORDER BY ROW_ID';
					
					EXEC(@STRING)
					
					SET @STRING = 'DROP TABLE ##BRANCH';	
					
					EXEC(@STRING)
				
			
		END
		ELSE IF @SUMMARY='1' --------FOR GROUPBY GRADE---------------------------
			BEGIN 
					SET @STRING = ' SELECT 0 AS FLAG, ROW_NUMBER() OVER (ORDER BY PT.GRADE) AS ROW_ID,PT.GRADE AS GRADE'+ @String_2 +''+ @String_3 +',COUNT(EMP_ID) AS TOTAL_EMP,DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.LEGAL_WORKING_HOURS)),0)) AS LEGAL_WORKING_HOURS,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.NIGHT_SHIFT_HOUR)),0)) AS NIGHT_SHIFT_HOUR,DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.OVERTIME_HOUR)),0)) AS OVERTIME_HOUR,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.RESERVERD_HOLIDAY)),0)) AS RESERVERD_HOLIDAY,DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.UNPAID_HOLIDAY)),0)) AS UNPAID_HOLIDAY,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.SICKNESS)),0)) AS SICKNESS,SUM(PT.EXTRA_PAYMENT) AS EXTRA_PAYMENT,SUM(PT.WAGES) AS WAGES,
									SUM(PT.SERVICE_CHARGES_TO_CONTRACTOR) AS SERVICE_CHARGES_TO_CONTRACTOR' + @SUM_OF_ALLOWNACES_EARNING + ' ' + @SUM_OF_ALLOWNACES_DEDUCT + ',
									SUM(PT.LEAVE_LIABILITY) AS LEAVE_LIABILITY,(COUNT(EMP_ID)*80) AS WC_POLICY,SUM(CTC) AS CTC,SUM(CTC_EURO) AS CTC_EURO,SUM(CTC_EURO_HOUR) AS CTC_EURO_HOUR'  

					
					SET @STRING = @STRING + ' INTO ##GRADE FROM #PAYMENTMAST PT GROUP BY GRADE'+ @STRING_2 +''+ @STRING_3 +''--WHERE SAL_CAL_DAY <> 0
					
					EXEC(@STRING)			
								
					if @String_2 <> '' and @String_3 <> ''
						Begin
							Set @String_2 = ',' + ''''' as ' + Replace(Replace(@String_2,',PT.',''),',','') + ',' + ''''' as ' + Replace(Replace(@String_3,',PT.',''),',','') + ''
						End
					Else if @String_2 <> ''
						Begin
							Set @String_2 =  ',' +''''' as ' + Replace(Replace(@String_2,',PT.',''),',','') +''
						End 
					Else if @String_3 <> ''
						Begin
							Set @String_2 =  ',' +''''' as ' + Replace(Replace(@String_3,',PT.',''),',','') + ''
						End
				
					SET @STRING = ' INSERT INTO ##GRADE SELECT 0 AS FLAG,(ISNULL(MAX(ROW_ID),0)+1),''TOTAL'''+ @STRING_2 +', SUM(TOTAL_EMP),DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(LEGAL_WORKING_HOURS)),0)) AS LEGAL_WORKING_HOURS,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(NIGHT_SHIFT_HOUR)),0)) AS NIGHT_SHIFT_HOUR,DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(OVERTIME_HOUR)),0)) AS OVERTIME_HOUR,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(RESERVERD_HOLIDAY)),0)) AS RESERVERD_HOLIDAY,DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(UNPAID_HOLIDAY)),0)) AS UNPAID_HOLIDAY,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(SICKNESS)),0)) AS SICKNESS,SUM(EXTRA_PAYMENT) AS EXTRA_PAYMENT,SUM(WAGES) AS WAGES,
									SUM(SERVICE_CHARGES_TO_CONTRACTOR) AS SERVICE_CHARGES_TO_CONTRACTOR' + @SUM_OF_ALLOWNACES_EARNING + ' ' + @SUM_OF_ALLOWNACES_DEDUCT + ',
									SUM(LEAVE_LIABILITY) AS LEAVE_LIABILITY,(SUM(TOTAL_EMP)*80) AS WC_POLICY,SUM(CTC) AS CTC,SUM(CTC_EURO) AS CTC_EURO,SUM(CTC_EURO_HOUR) AS CTC_EURO_HOUR FROM ##GRADE';
					
					EXEC(@STRING)
					
					SET @STRING = 'SELECT * FROM ##GRADE ORDER BY ROW_ID';
					
					EXEC(@STRING)
					
					SET @STRING = 'DROP TABLE ##GRADE';	
					
					EXEC(@STRING)
				
			
		END
		ELSE IF @SUMMARY='2' --------FOR GROUPBY CATEGORY---------------------------
			BEGIN 
					SET @STRING = ' SELECT 0 AS FLAG, ROW_NUMBER() OVER (ORDER BY PT.CATEGORY) AS ROW_ID,PT.CATEGORY AS CATEGORY,COUNT(EMP_ID) AS TOTAL_EMP,DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.LEGAL_WORKING_HOURS)),0)) AS LEGAL_WORKING_HOURS,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.NIGHT_SHIFT_HOUR)),0)) AS NIGHT_SHIFT_HOUR,DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.OVERTIME_HOUR)),0)) AS OVERTIME_HOUR,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.RESERVERD_HOLIDAY)),0)) AS RESERVERD_HOLIDAY,DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.UNPAID_HOLIDAY)),0)) AS UNPAID_HOLIDAY,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.SICKNESS)),0)) AS SICKNESS,SUM(PT.EXTRA_PAYMENT) AS EXTRA_PAYMENT,SUM(PT.WAGES) AS WAGES,
									SUM(PT.SERVICE_CHARGES_TO_CONTRACTOR) AS SERVICE_CHARGES_TO_CONTRACTOR' + @SUM_OF_ALLOWNACES_EARNING + ' ' + @SUM_OF_ALLOWNACES_DEDUCT + ',
									SUM(PT.LEAVE_LIABILITY) AS LEAVE_LIABILITY,(COUNT(EMP_ID)*80) AS WC_POLICY,SUM(CTC) AS CTC,SUM(CTC_EURO) AS CTC_EURO,SUM(CTC_EURO_HOUR) AS CTC_EURO_HOUR'  

					
					SET @STRING = @STRING + ' INTO ##CATEGORY FROM #PAYMENTMAST PT GROUP BY CATEGORY'+ @STRING_2 +''+ @STRING_3 +''--WHERE SAL_CAL_DAY <> 0
					
					EXEC(@STRING)
					
							
				
					SET @STRING = ' INSERT INTO ##CATEGORY SELECT 0 AS FLAG,(ISNULL(MAX(ROW_ID),0)+1),''TOTAL'''+ @STRING_2 +', SUM(TOTAL_EMP),DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(LEGAL_WORKING_HOURS)),0)) AS LEGAL_WORKING_HOURS,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(NIGHT_SHIFT_HOUR)),0)) AS NIGHT_SHIFT_HOUR,DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(OVERTIME_HOUR)),0)) AS OVERTIME_HOUR,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(RESERVERD_HOLIDAY)),0)) AS RESERVERD_HOLIDAY,DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(UNPAID_HOLIDAY)),0)) AS UNPAID_HOLIDAY,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(SICKNESS)),0)) AS SICKNESS,SUM(EXTRA_PAYMENT) AS EXTRA_PAYMENT,SUM(WAGES) AS WAGES,
									SUM(SERVICE_CHARGES_TO_CONTRACTOR) AS SERVICE_CHARGES_TO_CONTRACTOR' + @SUM_OF_ALLOWNACES_EARNING + ' ' + @SUM_OF_ALLOWNACES_DEDUCT + ',
									SUM(LEAVE_LIABILITY) AS LEAVE_LIABILITY,(SUM(TOTAL_EMP)*80) AS WC_POLICY,SUM(CTC) AS CTC,SUM(CTC_EURO) AS CTC_EURO,SUM(CTC_EURO_HOUR) AS CTC_EURO_HOUR FROM ##CATEGORY';
					
					EXEC(@STRING)
					
					SET @STRING = 'SELECT * FROM ##CATEGORY ORDER BY ROW_ID';
					
					EXEC(@STRING)
					
					SET @STRING = 'DROP TABLE ##CATEGORY';	
					
					EXEC(@STRING)
				
			
		END
		ELSE IF @SUMMARY='3' --------FOR GROUPBY DEPARTMENT---------------------------
			BEGIN 
					SET @STRING = ' SELECT 0 AS FLAG, ROW_NUMBER() OVER (ORDER BY PT.DEPARTMENT) AS ROW_ID,PT.DEPARTMENT AS DEPARTMENT,COUNT(EMP_ID) AS TOTAL_EMP,DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.LEGAL_WORKING_HOURS)),0)) AS LEGAL_WORKING_HOURS,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.NIGHT_SHIFT_HOUR)),0)) AS NIGHT_SHIFT_HOUR,DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.OVERTIME_HOUR)),0)) AS OVERTIME_HOUR,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.RESERVERD_HOLIDAY)),0)) AS RESERVERD_HOLIDAY,DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.UNPAID_HOLIDAY)),0)) AS UNPAID_HOLIDAY,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.SICKNESS)),0)) AS SICKNESS,SUM(PT.EXTRA_PAYMENT) AS EXTRA_PAYMENT,SUM(PT.WAGES) AS WAGES,
									SUM(PT.SERVICE_CHARGES_TO_CONTRACTOR) AS SERVICE_CHARGES_TO_CONTRACTOR' + @SUM_OF_ALLOWNACES_EARNING + ' ' + @SUM_OF_ALLOWNACES_DEDUCT + ',
									SUM(PT.LEAVE_LIABILITY) AS LEAVE_LIABILITY,(COUNT(EMP_ID)*80) AS WC_POLICY,SUM(CTC) AS CTC,SUM(CTC_EURO) AS CTC_EURO,SUM(CTC_EURO_HOUR) AS CTC_EURO_HOUR'  

					
					SET @STRING = @STRING + ' INTO ##DEPARTMENT FROM #PAYMENTMAST PT GROUP BY DEPARTMENT'+ @STRING_2 +''+ @STRING_3 +''--WHERE SAL_CAL_DAY <> 0
					
					EXEC(@STRING)				
							
				
				
					SET @STRING = ' INSERT INTO ##DEPARTMENT SELECT 0 AS FLAG,(ISNULL(MAX(ROW_ID),0)+1),''TOTAL'''+ @STRING_2 +', SUM(TOTAL_EMP),DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(LEGAL_WORKING_HOURS)),0)) AS LEGAL_WORKING_HOURS,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(NIGHT_SHIFT_HOUR)),0)) AS NIGHT_SHIFT_HOUR,DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(OVERTIME_HOUR)),0)) AS OVERTIME_HOUR,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(RESERVERD_HOLIDAY)),0)) AS RESERVERD_HOLIDAY,DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(UNPAID_HOLIDAY)),0)) AS UNPAID_HOLIDAY,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(SICKNESS)),0)) AS SICKNESS,SUM(EXTRA_PAYMENT) AS EXTRA_PAYMENT,SUM(WAGES) AS WAGES,
									SUM(SERVICE_CHARGES_TO_CONTRACTOR) AS SERVICE_CHARGES_TO_CONTRACTOR' + @SUM_OF_ALLOWNACES_EARNING + ' ' + @SUM_OF_ALLOWNACES_DEDUCT + ',
									SUM(LEAVE_LIABILITY) AS LEAVE_LIABILITY,(SUM(TOTAL_EMP)*80) AS WC_POLICY,SUM(CTC) AS CTC,SUM(CTC_EURO) AS CTC_EURO,SUM(CTC_EURO_HOUR) AS CTC_EURO_HOUR FROM ##DEPARTMENT';
					
					EXEC(@STRING)
					
					SET @STRING = 'SELECT * FROM ##DEPARTMENT ORDER BY ROW_ID';
					
					EXEC(@STRING)
					
					SET @STRING = 'DROP TABLE ##DEPARTMENT';	
					
					EXEC(@STRING)
				
			
		END
		ELSE IF @SUMMARY='4' --------FOR GROUPBY DESIGNATION---------------------------
			BEGIN 
					SET @STRING = ' SELECT 0 AS FLAG, ROW_NUMBER() OVER (ORDER BY PT.DESIGNATION) AS ROW_ID,PT.DESIGNATION AS DESIGNATION,COUNT(EMP_ID) AS TOTAL_EMP,DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.LEGAL_WORKING_HOURS)),0)) AS LEGAL_WORKING_HOURS,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.NIGHT_SHIFT_HOUR)),0)) AS NIGHT_SHIFT_HOUR,DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.OVERTIME_HOUR)),0)) AS OVERTIME_HOUR,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.RESERVERD_HOLIDAY)),0)) AS RESERVERD_HOLIDAY,DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.UNPAID_HOLIDAY)),0)) AS UNPAID_HOLIDAY,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.SICKNESS)),0)) AS SICKNESS,SUM(PT.EXTRA_PAYMENT) AS EXTRA_PAYMENT,SUM(PT.WAGES) AS WAGES,
									SUM(PT.SERVICE_CHARGES_TO_CONTRACTOR) AS SERVICE_CHARGES_TO_CONTRACTOR' + @SUM_OF_ALLOWNACES_EARNING + ' ' + @SUM_OF_ALLOWNACES_DEDUCT + ',
									SUM(PT.LEAVE_LIABILITY) AS LEAVE_LIABILITY,(COUNT(EMP_ID)*80) AS WC_POLICY,SUM(CTC) AS CTC,SUM(CTC_EURO) AS CTC_EURO,SUM(CTC_EURO_HOUR) AS CTC_EURO_HOUR'  

					
					SET @STRING = @STRING + ' INTO ##DESIGNATION FROM #PAYMENTMAST PT GROUP BY DESIGNATION'+ @STRING_2 +''+ @STRING_3 +''--WHERE SAL_CAL_DAY <> 0
					
					EXEC(@STRING)				
							
				
				
					SET @STRING = ' INSERT INTO ##DESIGNATION SELECT 0 AS FLAG,(ISNULL(MAX(ROW_ID),0)+1),''TOTAL'''+ @STRING_2 +', SUM(TOTAL_EMP),DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(LEGAL_WORKING_HOURS)),0)) AS LEGAL_WORKING_HOURS,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(NIGHT_SHIFT_HOUR)),0)) AS NIGHT_SHIFT_HOUR,DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(OVERTIME_HOUR)),0)) AS OVERTIME_HOUR,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(RESERVERD_HOLIDAY)),0)) AS RESERVERD_HOLIDAY,DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(UNPAID_HOLIDAY)),0)) AS UNPAID_HOLIDAY,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(SICKNESS)),0)) AS SICKNESS,SUM(EXTRA_PAYMENT) AS EXTRA_PAYMENT,SUM(WAGES) AS WAGES,
									SUM(SERVICE_CHARGES_TO_CONTRACTOR) AS SERVICE_CHARGES_TO_CONTRACTOR' + @SUM_OF_ALLOWNACES_EARNING + ' ' + @SUM_OF_ALLOWNACES_DEDUCT + ',
									SUM(LEAVE_LIABILITY) AS LEAVE_LIABILITY,(SUM(TOTAL_EMP)*80) AS WC_POLICY,SUM(CTC) AS CTC,SUM(CTC_EURO) AS CTC_EURO,SUM(CTC_EURO_HOUR) AS CTC_EURO_HOUR FROM ##DESIGNATION';
					
					EXEC(@STRING)
					
					SET @STRING = 'SELECT * FROM ##DESIGNATION ORDER BY ROW_ID';
					
					EXEC(@STRING)
					
					SET @STRING = 'DROP TABLE ##DESIGNATION';	
					
					EXEC(@STRING)
				
			
		END
		ELSE IF @SUMMARY='5' --------FOR GROUPBY TYPENAME---------------------------
			BEGIN 
					SET @STRING = ' SELECT 0 AS FLAG, ROW_NUMBER() OVER (ORDER BY PT.TYPENAME) AS ROW_ID,PT.TYPENAME AS TYPENAME,COUNT(EMP_ID) AS TOTAL_EMP,DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.LEGAL_WORKING_HOURS)),0)) AS LEGAL_WORKING_HOURS,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.NIGHT_SHIFT_HOUR)),0)) AS NIGHT_SHIFT_HOUR,DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.OVERTIME_HOUR)),0)) AS OVERTIME_HOUR,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.RESERVERD_HOLIDAY)),0)) AS RESERVERD_HOLIDAY,DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.UNPAID_HOLIDAY)),0)) AS UNPAID_HOLIDAY,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.SICKNESS)),0)) AS SICKNESS,SUM(PT.EXTRA_PAYMENT) AS EXTRA_PAYMENT,SUM(PT.WAGES) AS WAGES,
									SUM(PT.SERVICE_CHARGES_TO_CONTRACTOR) AS SERVICE_CHARGES_TO_CONTRACTOR' + @SUM_OF_ALLOWNACES_EARNING + ' ' + @SUM_OF_ALLOWNACES_DEDUCT + ',
									SUM(PT.LEAVE_LIABILITY) AS LEAVE_LIABILITY,(COUNT(EMP_ID)*80) AS WC_POLICY,SUM(CTC) AS CTC,SUM(CTC_EURO) AS CTC_EURO,SUM(CTC_EURO_HOUR) AS CTC_EURO_HOUR'  

					
					SET @STRING = @STRING + ' INTO ##TYPENAME FROM #PAYMENTMAST PT GROUP BY TYPENAME'+ @STRING_2 +''+ @STRING_3 +''--WHERE SAL_CAL_DAY <> 0
					
					EXEC(@STRING)				
							
				
				
					SET @STRING = ' INSERT INTO ##TYPENAME SELECT 0 AS FLAG,(ISNULL(MAX(ROW_ID),0)+1),''TOTAL'''+ @STRING_2 +', SUM(TOTAL_EMP),DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(LEGAL_WORKING_HOURS)),0)) AS LEGAL_WORKING_HOURS,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(NIGHT_SHIFT_HOUR)),0)) AS NIGHT_SHIFT_HOUR,DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(OVERTIME_HOUR)),0)) AS OVERTIME_HOUR,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(RESERVERD_HOLIDAY)),0)) AS RESERVERD_HOLIDAY,DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(UNPAID_HOLIDAY)),0)) AS UNPAID_HOLIDAY,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(SICKNESS)),0)) AS SICKNESS,SUM(EXTRA_PAYMENT) AS EXTRA_PAYMENT,SUM(WAGES) AS WAGES,
									SUM(SERVICE_CHARGES_TO_CONTRACTOR) AS SERVICE_CHARGES_TO_CONTRACTOR' + @SUM_OF_ALLOWNACES_EARNING + ' ' + @SUM_OF_ALLOWNACES_DEDUCT + ',
									SUM(LEAVE_LIABILITY) AS LEAVE_LIABILITY,(SUM(TOTAL_EMP)*80) AS WC_POLICY,SUM(CTC) AS CTC,SUM(CTC_EURO) AS CTC_EURO,SUM(CTC_EURO_HOUR) AS CTC_EURO_HOUR FROM ##TYPENAME';
					
					EXEC(@STRING)
					
					SET @STRING = 'SELECT * FROM ##TYPENAME ORDER BY ROW_ID';
					
					EXEC(@STRING)
					
					SET @STRING = 'DROP TABLE ##TYPENAME';	
					
					EXEC(@STRING)
				
			
		END	
		ELSE IF @SUMMARY='6' --------FOR GROUPBY DIVISION WISE---------------------------
			BEGIN 
					SET @STRING = ' SELECT 0 AS FLAG, ROW_NUMBER() OVER (ORDER BY PT.DIVISION) AS ROW_ID,PT.DIVISION AS DIVISION,COUNT(EMP_ID) AS TOTAL_EMP,DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.LEGAL_WORKING_HOURS)),0)) AS LEGAL_WORKING_HOURS,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.NIGHT_SHIFT_HOUR)),0)) AS NIGHT_SHIFT_HOUR,DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.OVERTIME_HOUR)),0)) AS OVERTIME_HOUR,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.RESERVERD_HOLIDAY)),0)) AS RESERVERD_HOLIDAY,DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.UNPAID_HOLIDAY)),0)) AS UNPAID_HOLIDAY,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.SICKNESS)),0)) AS SICKNESS,SUM(PT.EXTRA_PAYMENT) AS EXTRA_PAYMENT,SUM(PT.WAGES) AS WAGES,
									SUM(PT.SERVICE_CHARGES_TO_CONTRACTOR) AS SERVICE_CHARGES_TO_CONTRACTOR' + @SUM_OF_ALLOWNACES_EARNING + ' ' + @SUM_OF_ALLOWNACES_DEDUCT + ',
									SUM(PT.LEAVE_LIABILITY) AS LEAVE_LIABILITY,(COUNT(EMP_ID)*80) AS WC_POLICY,SUM(CTC) AS CTC,SUM(CTC_EURO) AS CTC_EURO,SUM(CTC_EURO_HOUR) AS CTC_EURO_HOUR'  

					
					SET @STRING = @STRING + ' INTO ##DIVISION FROM #PAYMENTMAST PT GROUP BY DIVISION'+ @STRING_2 +''+ @STRING_3 +''--WHERE SAL_CAL_DAY <> 0
					
					EXEC(@STRING)				
							
				
				
					SET @STRING = ' INSERT INTO ##DIVISION SELECT 0 AS FLAG,(ISNULL(MAX(ROW_ID),0)+1),''TOTAL'''+ @STRING_2 +', SUM(TOTAL_EMP),DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(LEGAL_WORKING_HOURS)),0)) AS LEGAL_WORKING_HOURS,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(NIGHT_SHIFT_HOUR)),0)) AS NIGHT_SHIFT_HOUR,DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(OVERTIME_HOUR)),0)) AS OVERTIME_HOUR,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(RESERVERD_HOLIDAY)),0)) AS RESERVERD_HOLIDAY,DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(UNPAID_HOLIDAY)),0)) AS UNPAID_HOLIDAY,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(SICKNESS)),0)) AS SICKNESS,SUM(EXTRA_PAYMENT) AS EXTRA_PAYMENT,SUM(WAGES) AS WAGES,
									SUM(SERVICE_CHARGES_TO_CONTRACTOR) AS SERVICE_CHARGES_TO_CONTRACTOR' + @SUM_OF_ALLOWNACES_EARNING + ' ' + @SUM_OF_ALLOWNACES_DEDUCT + ',
									SUM(LEAVE_LIABILITY) AS LEAVE_LIABILITY,(SUM(TOTAL_EMP)*80) AS WC_POLICY,SUM(CTC) AS CTC,SUM(CTC_EURO) AS CTC_EURO,SUM(CTC_EURO_HOUR) AS CTC_EURO_HOUR FROM ##DIVISION';
					
					EXEC(@STRING)
					
					SET @STRING = 'SELECT * FROM ##DIVISION ORDER BY ROW_ID';
					
					EXEC(@STRING)
					
					SET @STRING = 'DROP TABLE ##DIVISION';	
					
					EXEC(@STRING)
				
			
		END
		ELSE IF @SUMMARY='7' --------FOR GROUPBY VERTICAL WISE---------------------------
			BEGIN 
					SET @STRING = ' SELECT 0 AS FLAG, ROW_NUMBER() OVER (ORDER BY PT.sub_vertical) AS ROW_ID,PT.sub_vertical AS sub_vertical,COUNT(EMP_ID) AS TOTAL_EMP,DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.LEGAL_WORKING_HOURS)),0)) AS LEGAL_WORKING_HOURS,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.NIGHT_SHIFT_HOUR)),0)) AS NIGHT_SHIFT_HOUR,DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.OVERTIME_HOUR)),0)) AS OVERTIME_HOUR,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.RESERVERD_HOLIDAY)),0)) AS RESERVERD_HOLIDAY,DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.UNPAID_HOLIDAY)),0)) AS UNPAID_HOLIDAY,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.SICKNESS)),0)) AS SICKNESS,SUM(PT.EXTRA_PAYMENT) AS EXTRA_PAYMENT,SUM(PT.WAGES) AS WAGES,
									SUM(PT.SERVICE_CHARGES_TO_CONTRACTOR) AS SERVICE_CHARGES_TO_CONTRACTOR' + @SUM_OF_ALLOWNACES_EARNING + ' ' + @SUM_OF_ALLOWNACES_DEDUCT + ',
									SUM(PT.LEAVE_LIABILITY) AS LEAVE_LIABILITY,(COUNT(EMP_ID)*80) AS WC_POLICY,SUM(CTC) AS CTC,SUM(CTC_EURO) AS CTC_EURO,SUM(CTC_EURO_HOUR) AS CTC_EURO_HOUR'  

					
					SET @STRING = @STRING + ' INTO ##subvertical FROM #PAYMENTMAST PT GROUP BY sub_vertical'+ @STRING_2 +''+ @STRING_3 +''--WHERE SAL_CAL_DAY <> 0
					
					EXEC(@STRING)				
							
				
				
					SET @STRING = ' INSERT INTO ##subvertical SELECT 0 AS FLAG,(ISNULL(MAX(ROW_ID),0)+1),''TOTAL'''+ @STRING_2 +', SUM(TOTAL_EMP),DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(LEGAL_WORKING_HOURS)),0)) AS LEGAL_WORKING_HOURS,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(NIGHT_SHIFT_HOUR)),0)) AS NIGHT_SHIFT_HOUR,DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(OVERTIME_HOUR)),0)) AS OVERTIME_HOUR,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(RESERVERD_HOLIDAY)),0)) AS RESERVERD_HOLIDAY,DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(UNPAID_HOLIDAY)),0)) AS UNPAID_HOLIDAY,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(SICKNESS)),0)) AS SICKNESS,SUM(EXTRA_PAYMENT) AS EXTRA_PAYMENT,SUM(WAGES) AS WAGES,
									SUM(SERVICE_CHARGES_TO_CONTRACTOR) AS SERVICE_CHARGES_TO_CONTRACTOR' + @SUM_OF_ALLOWNACES_EARNING + ' ' + @SUM_OF_ALLOWNACES_DEDUCT + ',
									SUM(LEAVE_LIABILITY) AS LEAVE_LIABILITY,(SUM(TOTAL_EMP)*80) AS WC_POLICY,SUM(CTC) AS CTC,SUM(CTC_EURO) AS CTC_EURO,SUM(CTC_EURO_HOUR) AS CTC_EURO_HOUR FROM ##subvertical';
					
					EXEC(@STRING)
					
					SET @STRING = 'SELECT * FROM ##subvertical ORDER BY ROW_ID';
					
					EXEC(@STRING)
					
					SET @STRING = 'DROP TABLE ##subvertical';	
					
					EXEC(@STRING)
				
			
		END
		ELSE IF @SUMMARY='8' --------FOR GROUPBY SUBBRANCH WISE---------------------------
			BEGIN 
					SET @STRING = ' SELECT 0 AS FLAG, ROW_NUMBER() OVER (ORDER BY PT.SUB_BRANCH) AS ROW_ID,PT.SUB_BRANCH AS SUB_BRANCH,COUNT(EMP_ID) AS TOTAL_EMP,DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.LEGAL_WORKING_HOURS)),0)) AS LEGAL_WORKING_HOURS,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.NIGHT_SHIFT_HOUR)),0)) AS NIGHT_SHIFT_HOUR,DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.OVERTIME_HOUR)),0)) AS OVERTIME_HOUR,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.RESERVERD_HOLIDAY)),0)) AS RESERVERD_HOLIDAY,DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.UNPAID_HOLIDAY)),0)) AS UNPAID_HOLIDAY,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.SICKNESS)),0)) AS SICKNESS,SUM(PT.EXTRA_PAYMENT) AS EXTRA_PAYMENT,SUM(PT.WAGES) AS WAGES,
									SUM(PT.SERVICE_CHARGES_TO_CONTRACTOR) AS SERVICE_CHARGES_TO_CONTRACTOR' + @SUM_OF_ALLOWNACES_EARNING + ' ' + @SUM_OF_ALLOWNACES_DEDUCT + ',
									SUM(PT.LEAVE_LIABILITY) AS LEAVE_LIABILITY,(COUNT(EMP_ID)*80) AS WC_POLICY,SUM(CTC) AS CTC,SUM(CTC_EURO) AS CTC_EURO,SUM(CTC_EURO_HOUR) AS CTC_EURO_HOUR'  

					
					SET @STRING = @STRING + ' INTO ##SUBBRANCH FROM #PAYMENTMAST PT GROUP BY SUB_BRANCH'+ @STRING_2 +''+ @STRING_3 +''--WHERE SAL_CAL_DAY <> 0
					
					EXEC(@STRING)				
							
				
				
					SET @STRING = ' INSERT INTO ##SUBBRANCH SELECT 0 AS FLAG,(ISNULL(MAX(ROW_ID),0)+1),''TOTAL'''+ @STRING_2 +', SUM(TOTAL_EMP),DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(LEGAL_WORKING_HOURS)),0)) AS LEGAL_WORKING_HOURS,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(NIGHT_SHIFT_HOUR)),0)) AS NIGHT_SHIFT_HOUR,DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(OVERTIME_HOUR)),0)) AS OVERTIME_HOUR,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(RESERVERD_HOLIDAY)),0)) AS RESERVERD_HOLIDAY,DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(UNPAID_HOLIDAY)),0)) AS UNPAID_HOLIDAY,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(SICKNESS)),0)) AS SICKNESS,SUM(EXTRA_PAYMENT) AS EXTRA_PAYMENT,SUM(WAGES) AS WAGES,
									SUM(SERVICE_CHARGES_TO_CONTRACTOR) AS SERVICE_CHARGES_TO_CONTRACTOR' + @SUM_OF_ALLOWNACES_EARNING + ' ' + @SUM_OF_ALLOWNACES_DEDUCT + ',
									SUM(LEAVE_LIABILITY) AS LEAVE_LIABILITY,(SUM(TOTAL_EMP)*80) AS WC_POLICY,SUM(CTC) AS CTC,SUM(CTC_EURO) AS CTC_EURO,SUM(CTC_EURO_HOUR) AS CTC_EURO_HOUR FROM ##SUBBRANCH';
					
					EXEC(@STRING)
					
					SET @STRING = 'SELECT * FROM ##SUBBRANCH ORDER BY ROW_ID';
					
					EXEC(@STRING)
					
					SET @STRING = 'DROP TABLE ##SUBBRANCH';	
					
					EXEC(@STRING)
				
			
		END
		ELSE IF @SUMMARY='9' --------FOR GROUPBY SEGMENT_NAME WISE---------------------------
			BEGIN 
					SET @STRING = ' SELECT 0 AS FLAG, ROW_NUMBER() OVER (ORDER BY PT.SEGMENT_NAME) AS ROW_ID,PT.SEGMENT_NAME AS SEGMENT_NAME,COUNT(EMP_ID) AS TOTAL_EMP,DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.LEGAL_WORKING_HOURS)),0)) AS LEGAL_WORKING_HOURS,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.NIGHT_SHIFT_HOUR)),0)) AS NIGHT_SHIFT_HOUR,DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.OVERTIME_HOUR)),0)) AS OVERTIME_HOUR,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.RESERVERD_HOLIDAY)),0)) AS RESERVERD_HOLIDAY,DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.UNPAID_HOLIDAY)),0)) AS UNPAID_HOLIDAY,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.SICKNESS)),0)) AS SICKNESS,SUM(PT.EXTRA_PAYMENT) AS EXTRA_PAYMENT,SUM(PT.WAGES) AS WAGES,
									SUM(PT.SERVICE_CHARGES_TO_CONTRACTOR) AS SERVICE_CHARGES_TO_CONTRACTOR' + @SUM_OF_ALLOWNACES_EARNING + ' ' + @SUM_OF_ALLOWNACES_DEDUCT + ',
									SUM(PT.LEAVE_LIABILITY) AS LEAVE_LIABILITY,(COUNT(EMP_ID)*80) AS WC_POLICY,SUM(CTC) AS CTC,SUM(CTC_EURO) AS CTC_EURO,SUM(CTC_EURO_HOUR) AS CTC_EURO_HOUR'  

					
					SET @STRING = @STRING + ' INTO ##SEGMENTNAME FROM #PAYMENTMAST PT GROUP BY SEGMENT_NAME'+ @STRING_2 +''+ @STRING_3 +''--WHERE SAL_CAL_DAY <> 0
					
					EXEC(@STRING)				
							
				
				
					SET @STRING = ' INSERT INTO ##SEGMENTNAME SELECT 0 AS FLAG,(ISNULL(MAX(ROW_ID),0)+1),''TOTAL'''+ @STRING_2 +', SUM(TOTAL_EMP),DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(LEGAL_WORKING_HOURS)),0)) AS LEGAL_WORKING_HOURS,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(NIGHT_SHIFT_HOUR)),0)) AS NIGHT_SHIFT_HOUR,DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(OVERTIME_HOUR)),0)) AS OVERTIME_HOUR,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(RESERVERD_HOLIDAY)),0)) AS RESERVERD_HOLIDAY,DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(UNPAID_HOLIDAY)),0)) AS UNPAID_HOLIDAY,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(SICKNESS)),0)) AS SICKNESS,SUM(EXTRA_PAYMENT) AS EXTRA_PAYMENT,SUM(WAGES) AS WAGES,
									SUM(SERVICE_CHARGES_TO_CONTRACTOR) AS SERVICE_CHARGES_TO_CONTRACTOR' + @SUM_OF_ALLOWNACES_EARNING + ' ' + @SUM_OF_ALLOWNACES_DEDUCT + ',
									SUM(LEAVE_LIABILITY) AS LEAVE_LIABILITY,(SUM(TOTAL_EMP)*80) AS WC_POLICY,SUM(CTC) AS CTC,SUM(CTC_EURO) AS CTC_EURO,SUM(CTC_EURO_HOUR) AS CTC_EURO_HOUR FROM ##SEGMENTNAME';
					
					EXEC(@STRING)
					
					SET @STRING = 'SELECT * FROM ##SEGMENTNAME ORDER BY ROW_ID';
					
					EXEC(@STRING)
					
					SET @STRING = 'DROP TABLE ##SEGMENTNAME';	
					
					EXEC(@STRING)
				
			
		END
		ELSE IF @SUMMARY='10' --------FOR GROUPBY CENTER_CODE WISE---------------------------
			BEGIN 
					SET @STRING = ' SELECT 0 AS FLAG, ROW_NUMBER() OVER (ORDER BY PT.CENTER_CODE) AS ROW_ID,PT.CENTER_CODE AS CENTER_CODE,COUNT(EMP_ID) AS TOTAL_EMP,DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.LEGAL_WORKING_HOURS)),0)) AS LEGAL_WORKING_HOURS,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.NIGHT_SHIFT_HOUR)),0)) AS NIGHT_SHIFT_HOUR,DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.OVERTIME_HOUR)),0)) AS OVERTIME_HOUR,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.RESERVERD_HOLIDAY)),0)) AS RESERVERD_HOLIDAY,DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.UNPAID_HOLIDAY)),0)) AS UNPAID_HOLIDAY,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(PT.SICKNESS)),0)) AS SICKNESS,SUM(PT.EXTRA_PAYMENT) AS EXTRA_PAYMENT,SUM(PT.WAGES) AS WAGES,
									SUM(PT.SERVICE_CHARGES_TO_CONTRACTOR) AS SERVICE_CHARGES_TO_CONTRACTOR' + @SUM_OF_ALLOWNACES_EARNING + ' ' + @SUM_OF_ALLOWNACES_DEDUCT + ',
									SUM(PT.LEAVE_LIABILITY) AS LEAVE_LIABILITY,(COUNT(EMP_ID)*80) AS WC_POLICY,SUM(CTC) AS CTC,SUM(CTC_EURO) AS CTC_EURO,SUM(CTC_EURO_HOUR) AS CTC_EURO_HOUR'  

					
					SET @STRING = @STRING + ' INTO ##CENTERCODE FROM #PAYMENTMAST PT GROUP BY CENTER_CODE'+ @STRING_2 +''+ @STRING_3 +''--WHERE SAL_CAL_DAY <> 0
					
					EXEC(@STRING)				
							
				
				
					SET @STRING = ' INSERT INTO ##CENTERCODE SELECT 0 AS FLAG,(ISNULL(MAX(ROW_ID),0)+1),''TOTAL'''+ @STRING_2 +', SUM(TOTAL_EMP),DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(LEGAL_WORKING_HOURS)),0)) AS LEGAL_WORKING_HOURS,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(NIGHT_SHIFT_HOUR)),0)) AS NIGHT_SHIFT_HOUR,DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(OVERTIME_HOUR)),0)) AS OVERTIME_HOUR,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(RESERVERD_HOLIDAY)),0)) AS RESERVERD_HOLIDAY,DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(UNPAID_HOLIDAY)),0)) AS UNPAID_HOLIDAY,
									DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(SICKNESS)),0)) AS SICKNESS,SUM(EXTRA_PAYMENT) AS EXTRA_PAYMENT,SUM(WAGES) AS WAGES,
									SUM(SERVICE_CHARGES_TO_CONTRACTOR) AS SERVICE_CHARGES_TO_CONTRACTOR' + @SUM_OF_ALLOWNACES_EARNING + ' ' + @SUM_OF_ALLOWNACES_DEDUCT + ',
									SUM(LEAVE_LIABILITY) AS LEAVE_LIABILITY,(SUM(TOTAL_EMP)*80) AS WC_POLICY,SUM(CTC) AS CTC,SUM(CTC_EURO) AS CTC_EURO,SUM(CTC_EURO_HOUR) AS CTC_EURO_HOUR FROM ##CENTERCODE';
					
					EXEC(@STRING)
					
					SET @STRING = 'SELECT * FROM ##CENTERCODE ORDER BY ROW_ID';
					
					EXEC(@STRING)
					
					SET @STRING = 'DROP TABLE ##CENTERCODE';	
					
					EXEC(@STRING)
				
			
		END
		----------------------Ended------------------------
		
		
	
	--SELEct * FROM #LEAVE
	--SELEct * FROM #DATA
	--SELECT * FROM #PAYMENTMAST
