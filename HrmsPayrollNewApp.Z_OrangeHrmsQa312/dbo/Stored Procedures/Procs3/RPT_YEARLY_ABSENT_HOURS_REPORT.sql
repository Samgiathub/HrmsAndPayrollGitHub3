

------------------------------------------------------
-------ADDED BY JIMIT 25062018-------------------------
-----FOR ENPAY REPORT OF  YEARLY_ABSENT_HOURS_REPORT---
---28/1/2021 (EDIT BY MEHUL ) (SP WITH NOLOCK)---
-------------------------------------------------------
CREATE PROCEDURE [dbo].[RPT_YEARLY_ABSENT_HOURS_REPORT]  
	 @CMP_ID	NUMERIC  
	,@FROM_DATE		DATETIME
	,@TO_DATE 		DATETIME
	,@BRANCH_ID		NUMERIC	
	,@GRD_ID 		NUMERIC
	,@TYPE_ID 		NUMERIC
	,@DEPT_ID 		NUMERIC
	,@DESIG_ID 		NUMERIC
	,@EMP_ID 		NUMERIC
	,@CONSTRAINT	VARCHAR(MAX)
	,@CAT_ID        NUMERIC = 0	
	,@SEGMENT_ID	NUMERIC = 0 
	,@VERTICAL		NUMERIC = 0 
	,@SUBVERTICAL	NUMERIC = 0 
	,@SUBBRANCH		NUMERIC = 0 
	,@SUMMARY		VARCHAR(MAX)=''
	,@SUMMARY2		VARCHAR(MAX)=''
	,@SUMMARY3		VARCHAR(MAX)=''	
	--,@ORDER_BY		VARCHAR(30) = 'CODE' 
	 
AS  
SET NOCOUNT ON 
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
SET ARITHABORT ON

	
			CREATE TABLE #EMP_CONS 
			(
				EMP_ID	NUMERIC ,     
				BRANCH_ID NUMERIC,
				INCREMENT_ID NUMERIC 
			)
	
		EXEC SP_RPT_FILL_EMP_CONS	@CMP_ID,@FROM_DATE,@TO_DATE,@BRANCH_ID,@CAT_ID,@GRD_ID,@TYPE_ID,@DEPT_ID,@DESIG_ID,@EMP_ID,
								@CONSTRAINT,0,0,0,0,0,0,0,0,0,0,0,0   
	
	
	
					IF OBJECT_ID('DBO.TEMPDB..#MONTHNAME') IS NOT NULL
						DROP TABLE #MONTHNAME
					
					CREATE TABLE #MONTHNAME(ID INT,[MONTH] VARCHAR(15),FOR_DATE DATETIME) 

					IF day(@FROM_DATE) = 1 
						BEGIN
							INSERT 
							INTO	#MONTHNAME
							SELECT  ROW_NUMBER() OVER(ORDER BY NUMBER) ROW_ID,
									DATENAME(MONTH, DATEADD(MONTH, X.NUMBER, @FROM_DATE)) AS MONTHNAME,
									DATEADD(MONTH,NUMBER,@FROM_DATE)
							FROM    MASTER.DBO.SPT_VALUES X 				
							WHERE   X.TYPE = 'P'        
							AND     X.NUMBER <= DATEDIFF(MONTH, @FROM_DATE, @TO_DATE);
						END
					ELse
						BEGIN								
							INSERT 
							INTO	#MONTHNAME
							SELECT  ROW_NUMBER() OVER(ORDER BY NUMBER) ROW_ID,	
									DATENAME(MONTH, DATEADD(MONTH, X.NUMBER + 1, @FROM_DATE)) AS MONTHNAME,								
									DATEADD(MONTH,NUMBER + 1,@FROM_DATE)
							FROM    MASTER.DBO.SPT_VALUES X 				
							WHERE   X.TYPE = 'P' AND  X.NUMBER < DATEDIFF(MONTH, @FROM_DATE, @TO_DATE);		
						END
		

					CREATE TABLE #ABSENTHOUR
						(
							ID		NUMERIC,
							EMP_ID	NUMERIC,
							[MONTH] VARCHAR(10),
							[DATE]  DATETIME						
						)	
			
			
							
					INSERT INTO #ABSENTHOUR(ID,EMP_ID,[MONTH],[DATE])		
					SELECT	ID,EC.EMP_ID,MONTH,FOR_DATE
					FROM	#EMP_CONS EC CROSS APPLY
							#MONTHNAME
			
					
					
					DECLARE @VAL NVARCHAR(MAX)
					SET @VAL = ''
					SET @VAL = @VAL + ' ALTER TABLE  #ABSENTHOUR ADD EMP_CODE VARCHAR(10) DEFAULT '''';
									ALTER TABLE  #ABSENTHOUR ADD ALPHA_EMP_CODE VARCHAR(50) DEFAULT '''';
									ALTER TABLE  #ABSENTHOUR ADD EMP_FULL_NAME VARCHAR(50) DEFAULT '''';
									ALTER TABLE  #ABSENTHOUR ADD DEPARTMENT VARCHAR(50) DEFAULT '''';
									ALTER TABLE  #ABSENTHOUR ADD BRANCH_NAME VARCHAR(50) DEFAULT '''';
									ALTER TABLE  #ABSENTHOUR ADD DESIGNATION VARCHAR(50) DEFAULT '''';
									ALTER TABLE  #ABSENTHOUR ADD GRADE VARCHAR(50) DEFAULT '''';
									ALTER TABLE  #ABSENTHOUR ADD TYPENAME VARCHAR(50) DEFAULT '''';						
									ALTER TABLE  #ABSENTHOUR ADD CATEGORY VARCHAR(50) DEFAULT '''';
									ALTER TABLE  #ABSENTHOUR ADD DIVISION VARCHAR(50) DEFAULT '''';
									ALTER TABLE  #ABSENTHOUR ADD SUB_VERTICAL VARCHAR(50) DEFAULT '''';
									ALTER TABLE  #ABSENTHOUR ADD SUB_BRANCH VARCHAR(50) DEFAULT '''';
									ALTER TABLE  #ABSENTHOUR ADD SEGMENT_NAME VARCHAR(50) DEFAULT '''';
									ALTER TABLE  #ABSENTHOUR ADD CENTER_CODE VARCHAR(50) DEFAULT '''';'
					
						EXEC (@VAL);								
						
						
						UPDATE  AH
						SET		AH.EMP_CODE = Q.EMP_CODE,AH.ALPHA_EMP_CODE = Q.ALPHA_EMP_CODE,AH.EMP_FULL_NAME = Q.EMP_FULL_NAME,
								AH.DEPARTMENT = Q.DEPT_NAME,AH.BRANCH_NAME = Q.BRANCH_NAME,AH.DESIGNATION = Q.DESIG_NAME,
								AH.GRADE = Q.GRD_NAME,AH.TYPENAME = Q.[TYPE_NAME],AH.CATEGORY = Q.CATEGORY,
								AH.DIVISION = Q.VERTICAL_NAME,AH.SUB_VERTICAL = Q.SUBVERTICAL_NAME,AH.SUB_BRANCH = Q.SUBBRANCH_NAME,
								AH.SEGMENT_NAME = Q.SEGMENT_NAME,AH.CENTER_CODE = Q.CENTER_CODE								
						FROM    #ABSENTHOUR AH INNER JOIN
								(
									SELECT		E.CMP_ID,E.EMP_ID,E.EMP_CODE,E.ALPHA_EMP_CODE,ISNULL(E.EMPNAME_ALIAS_SALARY,E.EMP_FULL_NAME) AS EMP_FULL_NAME,
												DM.DEPT_NAME,BM.BRANCH_ID,BM.BRANCH_NAME,
												DNM.DESIG_NAME,GA.GRD_NAME,TM.TYPE_NAME,CT.CAT_NAME AS CATEGORY,VT.VERTICAL_NAME,ST.SUBVERTICAL_NAME,SB.SUBBRANCH_NAME,
												BSG.SEGMENT_NAME,CC.CENTER_CODE
									FROM		T0080_EMP_MASTER E	WITH (NOLOCK) INNER JOIN
												( 
													SELECT	I.EMP_ID,I.BASIC_SALARY,I.CTC,I.INC_BANK_AC_NO,PAYMENT_MODE,I.BRANCH_ID,I.GRD_ID,I.DEPT_ID,
															I.DESIG_ID,I.TYPE_ID,I.CAT_ID,I.VERTICAL_ID,I.SUBVERTICAL_ID,I.SUBBRANCH_ID,I.SEGMENT_ID,I.CENTER_ID 
													FROM	T0095_INCREMENT I WITH (NOLOCK) INNER JOIN 
															( 
																SELECT	MAX(INCREMENT_ID) AS INCREMENT_ID , EMP_ID 
																FROM	T0095_INCREMENT WITH (NOLOCK)
																WHERE	INCREMENT_EFFECTIVE_DATE <= @TO_DATE AND CMP_ID = @CMP_ID
																GROUP BY EMP_ID 
															 ) QRY ON	I.EMP_ID = QRY.EMP_ID	AND I.INCREMENT_ID = QRY.INCREMENT_ID 
												 )INC_QRY ON E.EMP_ID = INC_QRY.EMP_ID INNER JOIN 
												 #EMP_CONS EC ON E.EMP_ID = EC.EMP_ID LEFT OUTER JOIN 
												 T0030_BRANCH_MASTER BM WITH (NOLOCK) ON INC_QRY.BRANCH_ID = BM.BRANCH_ID	LEFT OUTER JOIN 
												 T0040_DEPARTMENT_MASTER DM WITH (NOLOCK) ON INC_QRY.DEPT_ID = DM.DEPT_ID	LEFT OUTER JOIN 
												 T0040_DESIGNATION_MASTER DNM WITH (NOLOCK) ON INC_QRY.DESIG_ID = DNM.DESIG_ID LEFT OUTER JOIN 
												 T0040_TYPE_MASTER TM WITH (NOLOCK) ON INC_QRY.TYPE_ID = TM.TYPE_ID LEFT OUTER JOIN 
												 T0030_CATEGORY_MASTER CT WITH (NOLOCK) ON CT.CAT_ID=INC_QRY.CAT_ID LEFT OUTER JOIN 
												 T0040_VERTICAL_SEGMENT VT WITH (NOLOCK) ON VT.VERTICAL_ID=INC_QRY.VERTICAL_ID LEFT OUTER JOIN 
												 T0050_SUBVERTICAL ST WITH (NOLOCK) ON ST.SUBVERTICAL_ID=INC_QRY.SUBVERTICAL_ID LEFT OUTER JOIN 
												 T0050_SUBBRANCH SB WITH (NOLOCK) ON SB.SUBBRANCH_ID=INC_QRY.SUBBRANCH_ID LEFT OUTER JOIN 
												 T0040_BUSINESS_SEGMENT BSG WITH (NOLOCK) ON BSG.SEGMENT_ID=INC_QRY.SEGMENT_ID LEFT OUTER JOIN 
												 T0040_COST_CENTER_MASTER CC WITH (NOLOCK) ON CC.CENTER_ID = INC_QRY.CENTER_ID LEFT OUTER JOIN 
												 T0040_GRADE_MASTER GA WITH (NOLOCK) ON INC_QRY.GRD_ID = GA.GRD_ID
								)Q ON Q.EMP_ID = AH.EMP_ID
						--WHERE  AH.ID = 1	
					
					
					
					SET @VAL = ''
					
					SET @VAL = @VAL + 'ALTER TABLE  #ABSENTHOUR ADD NUMBER_OF_BLUE_COLLOR NUMERIC(18,2) DEFAULT 0;
									   ALTER TABLE  #ABSENTHOUR ADD WORKING_HOURS VARCHAR(10) DEFAULT ''00:00'';
									   ALTER TABLE  #ABSENTHOUR ADD ABSENT_HOURS VARCHAR(10) DEFAULT ''00:00'';
									   ALTER TABLE  #ABSENTHOUR ADD OVERTIME VARCHAR(10) DEFAULT ''00:00'';'	
							
					EXEC(@VAL);
					
					
					CREATE TABLE #DATA         
							(         
							   EMP_ID   NUMERIC ,         
							   FOR_DATE DATETIME,        
							   DURATION_IN_SEC NUMERIC,        
							   SHIFT_ID NUMERIC ,        
							   SHIFT_TYPE NUMERIC ,        
							   EMP_OT  NUMERIC ,        
							   EMP_OT_MIN_LIMIT NUMERIC,        
							   EMP_OT_MAX_LIMIT NUMERIC,        
							   P_DAYS  NUMERIC(12,3) DEFAULT 0,        
							   OT_SEC  NUMERIC DEFAULT 0  ,
							   IN_TIME DATETIME,
							   SHIFT_START_TIME DATETIME,
							   OT_START_TIME NUMERIC DEFAULT 0,
							   SHIFT_CHANGE TINYINT DEFAULT 0,
							   FLAG INT DEFAULT 0,
							   WEEKOFF_OT_SEC  NUMERIC DEFAULT 0,
							   HOLIDAY_OT_SEC  NUMERIC DEFAULT 0,
							   CHK_BY_SUPERIOR NUMERIC DEFAULT 0,
							   IO_TRAN_ID	   NUMERIC DEFAULT 0, 
							   OUT_TIME DATETIME,
							   SHIFT_END_TIME DATETIME,			
							   OT_END_TIME NUMERIC DEFAULT 0,	
							   WORKING_HRS_ST_TIME TINYINT DEFAULT 0,
							   WORKING_HRS_END_TIME TINYINT DEFAULT 0, 
							   GATEPASS_DEDUCT_DAYS NUMERIC(18,2) DEFAULT 0 
						   )    
						 
						  
						   
						DECLARE @OT_HOURS AS NUMERIC(18,2)
						
						
						DECLARE @TEMP_DATE DATETIME
						DECLARE @TEMPEND_DATE DATETIME
						DECLARE @COUNT NUMERIC 
						DECLARE @MONTH NUMERIC 
						DECLARE @YEAR NUMERIC  
						SET @TEMP_DATE = @FROM_DATE 
						SET @TEMPEND_DATE = DATEADD(MM,1,@FROM_DATE )  -1 
						SET @COUNT = 1 
						
						CREATE TABLE #ATT_MUSTER_EXCEL 
							  (	
									EMP_ID		NUMERIC , 
									CMP_ID		NUMERIC,
									FOR_DATE	DATETIME,
									STATUS		VARCHAR(10) COLLATE SQL_LATIN1_GENERAL_CP1_CI_AS,
									LEAVE_COUNT	NUMERIC(5,2),
									WO_HO		VARCHAR(3) COLLATE SQL_LATIN1_GENERAL_CP1_CI_AS,
									STATUS_2	VARCHAR(20) COLLATE SQL_LATIN1_GENERAL_CP1_CI_AS,
									ROW_ID		NUMERIC ,
									WO_HO_DAY	NUMERIC(3,2) DEFAULT 0,
									P_DAYS		NUMERIC(5,2) DEFAULT 0,
									A_DAYS		NUMERIC(5,2) DEFAULT 0 ,
									JOIN_DATE	DATETIME DEFAULT NULL,
									LEFT_DATE	DATETIME DEFAULT NULL,
									GATE_PASS_DAYS NUMERIC(18,2) DEFAULT 0,  -- ADDED BY GADRIWALA MUSLIM 07042015
									LATE_DEDUCT_DAYS NUMERIC(18,2) DEFAULT 0, -- ADDED BY GADRIWALA MUSLIM 07042015
									EARLY_DEDUCT_DAYS NUMERIC(18,2) DEFAULT 0, -- ADDED BY GADRIWALA MUSLIM 07042015
									EMP_CODE    VARCHAR(50) COLLATE SQL_LATIN1_GENERAL_CP1_CI_AS,
									EMP_FULL_NAME  VARCHAR(300) COLLATE SQL_LATIN1_GENERAL_CP1_CI_AS,
									BRANCH_ADDRESS VARCHAR(300) COLLATE SQL_LATIN1_GENERAL_CP1_CI_AS,
									COMP_NAME VARCHAR(200) COLLATE SQL_LATIN1_GENERAL_CP1_CI_AS,
									BRANCH_NAME VARCHAR(200) COLLATE SQL_LATIN1_GENERAL_CP1_CI_AS,
									DEPT_NAME  VARCHAR(200) COLLATE SQL_LATIN1_GENERAL_CP1_CI_AS,
									GRD_NAME VARCHAR(200) COLLATE SQL_LATIN1_GENERAL_CP1_CI_AS,
									DESIG_NAME VARCHAR(200) COLLATE SQL_LATIN1_GENERAL_CP1_CI_AS,
									P_FROM_DATE  DATETIME,
									P_TO_DATE DATETIME,
									BRANCH_ID NUMERIC(18,0),
									DESIG_DIS_NO NUMERIC(18,2) DEFAULT 0,          ---ADDED JIMIT 31082015 
									SUBBRANCH_NAME VARCHAR(200) DEFAULT '' COLLATE SQL_LATIN1_GENERAL_CP1_CI_AS
							  )
						  
						CREATE NONCLUSTERED INDEX IX_DATA ON DBO.#ATT_MUSTER_EXCEL
							(	EMP_ID,EMP_CODE,ROW_ID ) 
				
						
						
				WHILE @TEMP_DATE <= @TO_DATE 
					BEGIN
				
						
						SET @MONTH =MONTH(@TEMPEND_DATE)
						SET @YEAR = YEAR(@TEMPEND_DAte)
						
						EXEC SP_CALCULATE_PRESENT_DAYS	@CMP_ID=@CMP_ID,@FROM_DATE=@TEMP_DATE,@TO_DATE = @TEMPEND_DATE,@BRANCH_ID=@BRANCH_ID,@CAT_ID=@CAT_ID,
														@GRD_ID=@GRD_ID,@TYPE_ID=@TYPE_ID,@DEPT_ID=@DEPT_ID,@DESIG_ID=@DESIG_ID,@EMP_ID=@EMP_ID,
														@CONSTRAINT=@CONSTRAINT,@Return_Record_set=4,@Reload_InOut = 0
														
												
						
						  UPDATE	AH
						  SET		AH.OVERTIME = Q.OT_HOUR
						  FROM		#ABSENTHOUR AH INNER JOIN
									(
										SELECT  EMP_ID,DBO.F_RETURN_HOURS(ISNULL(SUM(OT_SEC),0)) AS OT_HOUR
										FROM	#DATA 
										WHERE	MONTH(FOR_DATE) = @MONTH and YEAR(FOR_DATE) = @YEAR																
										GROUP BY EMP_ID
								)Q ON Q.EMP_ID = AH.EMP_ID AND @MONTH = MONTH(AH.[DATE]) AND @YEAR = YEAR(AH.[DATE])
								   
					
					
					UPDATE	AH
					SET		AH.WORKING_HOURS = Q.WORKING_HOUR
					FROM	#ABSENTHOUR AH INNER JOIN
							(
								SELECT  EMP_ID,DBO.F_RETURN_HOURS(ISNULL(SUM(DURATION_IN_SEC),0) - ISNULL(SUM(OT_SEC),0)) WORKING_HOUR,
										DBO.F_RETURN_HOURS(ISNULL(SUM(OT_SEC),0)) AS OT_HOUR																		 	 
										
								FROM	#DATA 
								WHERE	FOR_DATE BETWEEN @FROM_DATE AND @TO_DATE --AND P_DAYS <> 0								
								GROUP BY EMP_ID
						)Q ON Q.EMP_ID = AH.EMP_ID
						
		  
				
					EXEC SP_RPT_EMP_ATTENDANCE_MUSTER_GET	@CMP_ID=@CMP_ID,@FROM_DATE=@TEMP_DATE,@TO_DATE=@TEMPEND_DATE,@BRANCH_ID=@BRANCH_ID,@CAT_ID=@CAT_ID,
															@GRD_ID=@GRD_ID,@TYPE_ID=@TYPE_ID,@DEPT_ID=@DEPT_ID,@DESIG_ID=@DESIG_ID,@EMP_ID=0,@CONSTRAINT=@CONSTRAINT,
															@REPORT_FOR='',@EXPORT_TYPE='EXCEL'
					
				
				
						 --UPDATE	AH
						 --SET	AH.WORKING_HOURS = Q.WORKING_HOUR
						 --FROM	#ABSENTHOUR AH INNER JOIN
							--	(
							--		SELECT  DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(SM.F_Duration)),0)) AS WORKING_HOUR,AL.EMP_ID
							--		FROM	#ATT_MUSTER_EXCEL AL 
							--				CROSS APPLY (SELECT F_Duration 
							--							 FROM	T0040_SHIFT_MASTER SM
							--							 WHERE	SM.SHIFT_ID=dbo.fn_get_Shift_From_Monthly_Rotation(@Cmp_ID,AL.Emp_ID,AL.For_Date)
							--							 ) SM
							--		WHERE	MONTH(FOR_DATE) = @MONTH and YEAR(FOR_DATE) = @YEAR																
							--		GROUP BY EMP_ID													 																							
							--)Q ON Q.EMP_ID = AH.EMP_ID AND @MONTH = MONTH(AH.[DATE]) AND @YEAR = YEAR(AH.[DATE])
						
						
						UPDATE	AH
						SET		AH.ABSENT_HOURS = Q.ABSENT_HOURS				
						FROM	#ABSENTHOUR AH INNER JOIN
								(
									SELECT  DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(SM.F_Duration)),0)) AS ABSENT_HOURS,AL.EMP_ID
									FROM	#ATT_MUSTER_EXCEL AL 
											CROSS APPLY (SELECT F_Duration 
														 FROM	T0040_SHIFT_MASTER SM WITH (NOLOCK)
														 WHERE	SM.SHIFT_ID=dbo.fn_get_Shift_From_Monthly_Rotation(@Cmp_ID,AL.Emp_ID,AL.For_Date)
														 ) SM
									WHERE	MONTH(FOR_DATE) = @MONTH and YEAR(FOR_DATE) = @YEAR	AND AL.A_DAYS = 1															
									GROUP BY EMP_ID	
							)Q ON Q.EMP_ID = AH.EMP_ID AND @MONTH = MONTH(AH.[DATE]) AND @YEAR = YEAR(AH.[DATE])
					
						
				SET @TEMP_DATE = DATEADD(M,1,@TEMP_DATE)
				SET @TEMPEND_DATE = DATEADD(M,1,@TEMPEND_DATE)
				SET @COUNT = @COUNT + 1  
			End
						
				
				DECLARE @STRING AS VARCHAR(MAX)
				DECLARE @STRING_2 AS VARCHAR(MAX)
				DECLARE @STRING_3 AS VARCHAR(MAX)
				SET @STRING=''	
				SET @STRING_2=''	
				SET @STRING_3=''
				
				
				IF @SUMMARY='0' --------FOR GROUPBY BRANCH---------------------------
					BEGIN 
										
						SET @STRING = ' SELECT AH.BRANCH_NAME AS BRANCH_NAME,MONTH,COUNT(EMP_ID) AS TOTAL_EMP,ID,[DATE] as FOR_DATE,
										DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(AH.WORKING_HOURS)),0)) AS WORKING_HOURS,
										DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(AH.ABSENT_HOURS)),0)) AS ABSENT_HOURS,
										DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(AH.OVERTIME)),0)) AS OVERTIME_HOURS'  

						
						SET @STRING = @STRING + ' INTO ##BRANCH FROM #ABSENTHOUR AH GROUP BY BRANCH_NAME,ID,MONTH,[DATE]'+ @STRING_2 +''+ @STRING_3 +''--WHERE SAL_CAL_DAY <> 0
						
						EXEC(@STRING)										
						
						
						
						--SET @STRING = ' INSERT INTO ##BRANCH SELECT 0 AS FLAG,(ISNULL(MAX(ROW_ID),0)+1),''TOTAL'''+ @STRING_2 +', SUM(TOTAL_EMP) ,
						--				DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(WORKING_HOURS)),0)) AS WORKING_HOURS,
						--				DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(OVERTIME_HOURS)),0)) AS OVERTIME_HOURS,
						--				DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(ABSENT_HOURS)),0)) AS ABSENT_HOURS FROM ##BRANCH';
						
						--EXEC(@STRING)
						
						
					
						SET @STRING = 'SELECT Row_Number() Over(ORder By BRANCH_NAME) as SR_NO,Case When ID = 1 Then BRANCH_NAME Else NULL End AS BRANCH_NAME,MONTH,
											  	TOTAL_EMP,REplace(WORKING_HOURS,'':'',''.'')WORKING_HOURS,REplace(OVERTIME_HOURS,'':'',''.'')OVERTIME_HOURS,REplace(ABSENT_HOURS,'':'',''.'')ABSENT_HOURS
										FROM ##BRANCH' --ORDER BY BRANCH_NAME';
						
						EXEC(@STRING)
						
						SET @STRING = 'DROP TABLE ##BRANCH';	
						
						EXEC(@STRING)
					
				
					END
				
				ELSE IF @SUMMARY='1' --------FOR GROUPBY GRADE---------------------------
					BEGIN 
										
						SET @STRING = ' SELECT AH.GRADE AS GRADE,MONTH,COUNT(EMP_ID) AS TOTAL_EMP,ID,[DATE] as FOR_DATE,
										DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(AH.WORKING_HOURS)),0)) AS WORKING_HOURS,
										DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(AH.ABSENT_HOURS)),0)) AS ABSENT_HOURS,
										DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(AH.OVERTIME)),0)) AS OVERTIME_HOURS'  

						
						SET @STRING = @STRING + ' INTO ##GRADE FROM #ABSENTHOUR AH GROUP BY GRADE,ID,MONTH,[DATE]'+ @STRING_2 +''+ @STRING_3 +''--WHERE SAL_CAL_DAY <> 0
						
						EXEC(@STRING)										
						
						
						
						--SET @STRING = ' INSERT INTO ##BRANCH SELECT 0 AS FLAG,(ISNULL(MAX(ROW_ID),0)+1),''TOTAL'''+ @STRING_2 +', SUM(TOTAL_EMP) ,
						--				DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(WORKING_HOURS)),0)) AS WORKING_HOURS,
						--				DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(OVERTIME_HOURS)),0)) AS OVERTIME_HOURS,
						--				DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(ABSENT_HOURS)),0)) AS ABSENT_HOURS FROM ##BRANCH';
						
						--EXEC(@STRING)
						
						
					
						SET @STRING = 'SELECT Row_Number() Over(ORder By GRADE) as SR_NO,case when id = 1 then GRADE else NULL end as GRADE,
										MONTH,TOTAL_EMP,REplace(WORKING_HOURS,'':'',''.'')WORKING_HOURS,REplace(OVERTIME_HOURS,'':'',''.'')OVERTIME_HOURS,REplace(ABSENT_HOURS,'':'',''.'')ABSENT_HOURS
										FROM  ##GRADE'-- ORDER BY GRADE,FOR_DATE';
						
						EXEC(@STRING)
						
						SET @STRING = 'DROP TABLE ##GRADE';	
						
						EXEC(@STRING)
					
				
					END
				
				ELSE IF @SUMMARY='2' --------FOR GROUPBY CATEGORY---------------------------
					BEGIN 
										
						SET @STRING = ' SELECT AH.CATEGORY AS CATEGORY,MONTH,COUNT(EMP_ID) AS TOTAL_EMP,ID,[DATE] as FOR_DATE,
										DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(AH.WORKING_HOURS)),0)) AS WORKING_HOURS,
										DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(AH.ABSENT_HOURS)),0)) AS ABSENT_HOURS,
										DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(AH.OVERTIME)),0)) AS OVERTIME_HOURS'  

						
						SET @STRING = @STRING + ' INTO ##CATEGORY FROM #ABSENTHOUR AH GROUP BY CATEGORY,ID,MONTH,[DATE]'+ @STRING_2 +''+ @STRING_3 +''--WHERE SAL_CAL_DAY <> 0
						
						EXEC(@STRING)										
						
						
						
						--SET @STRING = ' INSERT INTO ##BRANCH SELECT 0 AS FLAG,(ISNULL(MAX(ROW_ID),0)+1),''TOTAL'''+ @STRING_2 +', SUM(TOTAL_EMP) ,
						--				DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(WORKING_HOURS)),0)) AS WORKING_HOURS,
						--				DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(OVERTIME_HOURS)),0)) AS OVERTIME_HOURS,
						--				DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(ABSENT_HOURS)),0)) AS ABSENT_HOURS FROM ##BRANCH';
						
						--EXEC(@STRING)
						
						
					
						SET @STRING = 'SELECT Row_Number() Over(ORder By CATEGORY) as SR_NO,case when id = 1 then CATEGORY else NULL end as CATEGORY,MONTH,TOTAL_EMP,
										REplace(WORKING_HOURS,'':'',''.'')WORKING_HOURS,REplace(OVERTIME_HOURS,'':'',''.'')OVERTIME_HOURS,REplace(ABSENT_HOURS,'':'',''.'')ABSENT_HOURS
										FROM  ##CATEGORY';
						
						EXEC(@STRING)
						
						SET @STRING = 'DROP TABLE ##CATEGORY';	
						
						EXEC(@STRING)
					
				
					END
					
				ELSE IF @SUMMARY='3' --------FOR GROUPBY DEPARTMENT---------------------------
					BEGIN 
										
						SET @STRING = ' SELECT AH.DEPARTMENT AS DEPARTMENT,MONTH,COUNT(EMP_ID) AS TOTAL_EMP,ID,[DATE] as FOR_DATE,
										DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(AH.WORKING_HOURS)),0)) AS WORKING_HOURS,
										DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(AH.ABSENT_HOURS)),0)) AS ABSENT_HOURS,
										DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(AH.OVERTIME)),0)) AS OVERTIME_HOURS'  

						
						SET @STRING = @STRING + ' INTO ##DEPARTMENT FROM #ABSENTHOUR AH GROUP BY DEPARTMENT,ID,MONTH,[DATE]'+ @STRING_2 +''+ @STRING_3 +''--WHERE SAL_CAL_DAY <> 0
						
						EXEC(@STRING)										
						
						
						
						--SET @STRING = ' INSERT INTO ##BRANCH SELECT 0 AS FLAG,(ISNULL(MAX(ROW_ID),0)+1),''TOTAL'''+ @STRING_2 +', SUM(TOTAL_EMP) ,
						--				DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(WORKING_HOURS)),0)) AS WORKING_HOURS,
						--				DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(OVERTIME_HOURS)),0)) AS OVERTIME_HOURS,
						--				DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(ABSENT_HOURS)),0)) AS ABSENT_HOURS FROM ##BRANCH';
						
						--EXEC(@STRING)
						
						
					
						SET @STRING = 'SELECT Row_Number() Over(ORder By DEPARTMENT) as SR_NO,case when id = 1 then DEPARTMENT else NULL end as DEPARTMENT,MONTH,TOTAL_EMP,
											REplace(WORKING_HOURS,'':'',''.'')WORKING_HOURS,REplace(OVERTIME_HOURS,'':'',''.'')OVERTIME_HOURS,REplace(ABSENT_HOURS,'':'',''.'')ABSENT_HOURS
										FROM  ##DEPARTMENT';
						
						EXEC(@STRING)
						
						SET @STRING = 'DROP TABLE ##DEPARTMENT';	
						
						EXEC(@STRING)
					
				
					END		
				
				ELSE IF @SUMMARY='4' --------FOR GROUPBY DESIGNATION---------------------------
					BEGIN 
										
						SET @STRING = ' SELECT AH.DESIGNATION AS DESIGNATION,MONTH,COUNT(EMP_ID) AS TOTAL_EMP,ID,[DATE] as FOR_DATE,
										DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(AH.WORKING_HOURS)),0)) AS WORKING_HOURS,
										DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(AH.ABSENT_HOURS)),0)) AS ABSENT_HOURS,
										DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(AH.OVERTIME)),0)) AS OVERTIME_HOURS'
						
						SET @STRING = @STRING + ' INTO ##DESIGNATION FROM #ABSENTHOUR AH GROUP BY DESIGNATION,ID,MONTH,[DATE]'+ @STRING_2 +''+ @STRING_3 +''--WHERE SAL_CAL_DAY <> 0
						
						EXEC(@STRING)										
						
						
						
						--SET @STRING = ' INSERT INTO ##BRANCH SELECT 0 AS FLAG,(ISNULL(MAX(ROW_ID),0)+1),''TOTAL'''+ @STRING_2 +', SUM(TOTAL_EMP) ,
						--				DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(WORKING_HOURS)),0)) AS WORKING_HOURS,
						--				DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(OVERTIME_HOURS)),0)) AS OVERTIME_HOURS,
						--				DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(ABSENT_HOURS)),0)) AS ABSENT_HOURS FROM ##BRANCH';
						
						--EXEC(@STRING)
						
						
					
						SET @STRING = 'SELECT Row_Number() Over(ORder By DESIGNATION) as SR_NO,case when id = 1 then DESIGNATION else NULL end as DESIGNATION,MONTH,TOTAL_EMP,
												REplace(WORKING_HOURS,'':'',''.'')WORKING_HOURS,REplace(OVERTIME_HOURS,'':'',''.'')OVERTIME_HOURS,REplace(ABSENT_HOURS,'':'',''.'')ABSENT_HOURS
										FROM  ##DESIGNATION';
						
						EXEC(@STRING)
						
						SET @STRING = 'DROP TABLE ##DESIGNATION';	
						
						EXEC(@STRING)
					
				
					END	
					
				 IF @SUMMARY='5' --------FOR GROUPBY TYPENAME---------------------------
					BEGIN 
										
						SET @STRING = ' SELECT AH.TYPENAME AS TYPENAME,MONTH,COUNT(EMP_ID) AS TOTAL_EMP,ID,[DATE] as FOR_DATE,
										DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(AH.WORKING_HOURS)),0)) AS WORKING_HOURS,
										DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(AH.ABSENT_HOURS)),0)) AS ABSENT_HOURS,
										DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(AH.OVERTIME)),0)) AS OVERTIME_HOURS'  

						
						SET @STRING = @STRING + ' INTO ##TYPENAME FROM #ABSENTHOUR AH GROUP BY TYPENAME,ID,MONTH,[DATE]'+ @STRING_2 +''+ @STRING_3 +''--WHERE SAL_CAL_DAY <> 0
						
						EXEC(@STRING)										
						
						
						
						--SET @STRING = ' INSERT INTO ##BRANCH SELECT 0 AS FLAG,(ISNULL(MAX(ROW_ID),0)+1),''TOTAL'''+ @STRING_2 +', SUM(TOTAL_EMP) ,
						--				DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(WORKING_HOURS)),0)) AS WORKING_HOURS,
						--				DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(OVERTIME_HOURS)),0)) AS OVERTIME_HOURS,
						--				DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(ABSENT_HOURS)),0)) AS ABSENT_HOURS FROM ##BRANCH';
						
						--EXEC(@STRING)
						
						
					
						SET @STRING = 'SELECT Row_Number() Over(ORder By TYPENAME) as SR_NO,case when id = 1 then TYPENAME else NULL end as TYPENAME,MONTH,TOTAL_EMP,
												REplace(WORKING_HOURS,'':'',''.'')WORKING_HOURS,REplace(OVERTIME_HOURS,'':'',''.'')OVERTIME_HOURS,REplace(ABSENT_HOURS,'':'',''.'')ABSENT_HOURS
										FROM  ##TYPENAME';
						
						EXEC(@STRING)
						
						SET @STRING = 'DROP TABLE ##TYPENAME';	
						
						EXEC(@STRING)
					
				
					END
				
				ELSE IF @SUMMARY='6' --------FOR GROUPBY DIVISION---------------------------
					BEGIN 
										
						SET @STRING = ' SELECT AH.DIVISION AS DIVISION,MONTH,COUNT(EMP_ID) AS TOTAL_EMP,ID,[DATE] as FOR_DATE,
										DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(AH.WORKING_HOURS)),0)) AS WORKING_HOURS,
										DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(AH.ABSENT_HOURS)),0)) AS ABSENT_HOURS,
										DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(AH.OVERTIME)),0)) AS OVERTIME_HOURS'  

						
						SET @STRING = @STRING + ' INTO ##DIVISION FROM #ABSENTHOUR AH GROUP BY DIVISION,ID,MONTH,[DATE]'+ @STRING_2 +''+ @STRING_3 +''--WHERE SAL_CAL_DAY <> 0
						
						EXEC(@STRING)										
						
						
						
						--SET @STRING = ' INSERT INTO ##BRANCH SELECT 0 AS FLAG,(ISNULL(MAX(ROW_ID),0)+1),''TOTAL'''+ @STRING_2 +', SUM(TOTAL_EMP) ,
						--				DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(WORKING_HOURS)),0)) AS WORKING_HOURS,
						--				DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(OVERTIME_HOURS)),0)) AS OVERTIME_HOURS,
						--				DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(ABSENT_HOURS)),0)) AS ABSENT_HOURS FROM ##BRANCH';
						
						--EXEC(@STRING)
						
						
					
						SET @STRING = 'SELECT Row_Number() Over(ORder By DIVISION) as SR_NO,case when id = 1 then DIVISION else NULL end as DIVISION,MONTH,TOTAL_EMP,
											REplace(WORKING_HOURS,'':'',''.'')WORKING_HOURS,REplace(OVERTIME_HOURS,'':'',''.'')OVERTIME_HOURS,REplace(ABSENT_HOURS,'':'',''.'')ABSENT_HOURS
										FROM  ##DIVISION';
						
						EXEC(@STRING)
						
						SET @STRING = 'DROP TABLE ##DIVISION';	
						
						EXEC(@STRING)
					
				
					END
				
				ELSE IF @SUMMARY='7' --------FOR GROUPBY SUB_VERTICAL---------------------------
					BEGIN 
										
						SET @STRING = ' SELECT AH.SUB_VERTICAL AS SUB_VERTICAL,MONTH,COUNT(EMP_ID) AS TOTAL_EMP,ID,[DATE] as FOR_DATE,
										DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(AH.WORKING_HOURS)),0)) AS WORKING_HOURS,
										DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(AH.ABSENT_HOURS)),0)) AS ABSENT_HOURS,
										DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(AH.OVERTIME)),0)) AS OVERTIME_HOURS'  

						
						SET @STRING = @STRING + ' INTO ##SUB_VERTICAL FROM #ABSENTHOUR AH GROUP BY SUB_VERTICAL,ID,MONTH,[DATE]'+ @STRING_2 +''+ @STRING_3 +''--WHERE SAL_CAL_DAY <> 0
						
						EXEC(@STRING)										
						
						
						
						--SET @STRING = ' INSERT INTO ##BRANCH SELECT 0 AS FLAG,(ISNULL(MAX(ROW_ID),0)+1),''TOTAL'''+ @STRING_2 +', SUM(TOTAL_EMP) ,
						--				DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(WORKING_HOURS)),0)) AS WORKING_HOURS,
						--				DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(OVERTIME_HOURS)),0)) AS OVERTIME_HOURS,
						--				DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(ABSENT_HOURS)),0)) AS ABSENT_HOURS FROM ##BRANCH';
						
						--EXEC(@STRING)
						
						
					
						SET @STRING = 'SELECT Row_Number() Over(ORder By SUB_VERTICAL) as SR_NO,case when id = 1 then SUB_VERTICAL else NULL end as SUB_VERTICAL,MONTH,TOTAL_EMP,
														REplace(WORKING_HOURS,'':'',''.'')WORKING_HOURS,REplace(OVERTIME_HOURS,'':'',''.'')OVERTIME_HOURS,REplace(ABSENT_HOURS,'':'',''.'')ABSENT_HOURS
										FROM  ##SUB_VERTICAL';
						
						EXEC(@STRING)
						
						SET @STRING = 'DROP TABLE ##SUB_VERTICAL';	
						
						EXEC(@STRING)
					
				
					END
					
				ELSE IF @SUMMARY='8' --------FOR GROUPBY SUB_BRANCH---------------------------
					BEGIN 
										
						SET @STRING = ' SELECT AH.SUB_BRANCH AS SUB_BRANCH,MONTH,COUNT(EMP_ID) AS TOTAL_EMP,ID,[DATE] as FOR_DATE,
										DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(AH.WORKING_HOURS)),0)) AS WORKING_HOURS,
										DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(AH.ABSENT_HOURS)),0)) AS ABSENT_HOURS,
										DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(AH.OVERTIME)),0)) AS OVERTIME_HOURS' 

						
						SET @STRING = @STRING + ' INTO ##SUB_BRANCH FROM #ABSENTHOUR AH GROUP BY SUB_BRANCH,ID,MONTH,[DATE]'+ @STRING_2 +''+ @STRING_3 +''--WHERE SAL_CAL_DAY <> 0
						
						EXEC(@STRING)										
						
						
						
						--SET @STRING = ' INSERT INTO ##BRANCH SELECT 0 AS FLAG,(ISNULL(MAX(ROW_ID),0)+1),''TOTAL'''+ @STRING_2 +', SUM(TOTAL_EMP) ,
						--				DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(WORKING_HOURS)),0)) AS WORKING_HOURS,
						--				DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(OVERTIME_HOURS)),0)) AS OVERTIME_HOURS,
						--				DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(ABSENT_HOURS)),0)) AS ABSENT_HOURS FROM ##BRANCH';
						
						--EXEC(@STRING)
						
						
					
						SET @STRING = 'SELECT Row_Number() Over(ORder By SUB_BRANCH) as SR_NO,case when id = 1 then SUB_BRANCH else NULL end as SUB_BRANCH,MONTH,TOTAL_EMP,
											REplace(WORKING_HOURS,'':'',''.'')WORKING_HOURS,REplace(OVERTIME_HOURS,'':'',''.'')OVERTIME_HOURS,REplace(ABSENT_HOURS,'':'',''.'')ABSENT_HOURS
										FROM  ##SUB_BRANCH';
						
						EXEC(@STRING)
						
						SET @STRING = 'DROP TABLE ##SUB_BRANCH';	
						
						EXEC(@STRING)
					
				
					END		
				
				ELSE IF @SUMMARY='9' --------FOR GROUPBY SEGMENT_NAME---------------------------
					BEGIN 
										
						SET @STRING = ' SELECT AH.SEGMENT_NAME AS SEGMENT_NAME,MONTH,COUNT(EMP_ID) AS TOTAL_EMP,ID,[DATE] as FOR_DATE,
										DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(AH.WORKING_HOURS)),0)) AS WORKING_HOURS,
										DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(AH.ABSENT_HOURS)),0)) AS ABSENT_HOURS,
										DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(AH.OVERTIME)),0)) AS OVERTIME_HOURS'  

						
						SET @STRING = @STRING + ' INTO ##SEGMENT_NAME FROM #ABSENTHOUR AH GROUP BY SEGMENT_NAME,ID,MONTH,[DATE]'+ @STRING_2 +''+ @STRING_3 +''--WHERE SAL_CAL_DAY <> 0
						
						EXEC(@STRING)										
						
						
						
						--SET @STRING = ' INSERT INTO ##BRANCH SELECT 0 AS FLAG,(ISNULL(MAX(ROW_ID),0)+1),''TOTAL'''+ @STRING_2 +', SUM(TOTAL_EMP) ,
						--				DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(WORKING_HOURS)),0)) AS WORKING_HOURS,
						--				DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(OVERTIME_HOURS)),0)) AS OVERTIME_HOURS,
						--				DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(ABSENT_HOURS)),0)) AS ABSENT_HOURS FROM ##BRANCH';
						
						--EXEC(@STRING)
						
						
					
						SET @STRING = 'SELECT Row_Number() Over(ORder By SEGMENT_NAME) as SR_NO,case when id = 1 then SEGMENT_NAME else NULL end as SEGMENT_NAME,MONTH,TOTAL_EMP,
											REplace(WORKING_HOURS,'':'',''.'')WORKING_HOURS,REplace(OVERTIME_HOURS,'':'',''.'')OVERTIME_HOURS,REplace(ABSENT_HOURS,'':'',''.'')ABSENT_HOURS
										FROM  ##SEGMENT_NAME';
						
						EXEC(@STRING)
						
						SET @STRING = 'DROP TABLE ##SEGMENT_NAME';	
						
						EXEC(@STRING)
					
				
					END	
				
				ELSE IF @SUMMARY='10' --------FOR GROUPBY CENTER_CODE---------------------------
					BEGIN 
										
						SET @STRING = ' SELECT AH.CENTER_CODE AS CENTER_CODE,MONTH,COUNT(EMP_ID) AS TOTAL_EMP,ID,[DATE] as FOR_DATE,
										DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(AH.WORKING_HOURS)),0)) AS WORKING_HOURS,
										DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(AH.ABSENT_HOURS)),0)) AS ABSENT_HOURS,
										DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(AH.OVERTIME)),0)) AS OVERTIME_HOURS'  

						
						SET @STRING = @STRING + ' INTO ##CENTER_CODE FROM #ABSENTHOUR AH GROUP BY CENTER_CODE,ID,MONTH,[DATE]'+ @STRING_2 +''+ @STRING_3 +''--WHERE SAL_CAL_DAY <> 0
						
						EXEC(@STRING)										
						
						
						
						--SET @STRING = ' INSERT INTO ##BRANCH SELECT 0 AS FLAG,(ISNULL(MAX(ROW_ID),0)+1),''TOTAL'''+ @STRING_2 +', SUM(TOTAL_EMP) ,
						--				DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(WORKING_HOURS)),0)) AS WORKING_HOURS,
						--				DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(OVERTIME_HOURS)),0)) AS OVERTIME_HOURS,
						--				DBO.F_RETURN_HOURS(ISNULL(SUM(DBO.F_RETURN_SEC(ABSENT_HOURS)),0)) AS ABSENT_HOURS FROM ##BRANCH';
						
						--EXEC(@STRING)
						
						
					
						SET @STRING = 'SELECT Row_Number() Over(ORder By CENTER_CODE) as SR_NO,case when id = 1 then CENTER_CODE else NULL end as CENTER_CODE,MONTH,TOTAL_EMP,
										REplace(WORKING_HOURS,'':'',''.'')WORKING_HOURS,REplace(OVERTIME_HOURS,'':'',''.'')OVERTIME_HOURS,REplace(ABSENT_HOURS,'':'',''.'')ABSENT_HOURS
										FROM  ##CENTER_CODE';
						
						EXEC(@STRING)
						
						SET @STRING = 'DROP TABLE ##CENTER_CODE';	
						
						EXEC(@STRING)
					
				
					END			
				
				--SELECT 	* FROM #ABSENTHOUR
				--ORDER	BY EMP_ID,[DATE]
					 
					  
							

