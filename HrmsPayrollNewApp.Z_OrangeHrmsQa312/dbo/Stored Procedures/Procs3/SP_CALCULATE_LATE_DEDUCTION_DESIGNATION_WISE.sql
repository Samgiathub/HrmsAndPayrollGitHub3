

---18/1/2021 (EDIT BY MEHUL ) (SP WITH NOLOCK)---
CREATE PROCEDURE [dbo].[SP_CALCULATE_LATE_DEDUCTION_DESIGNATION_WISE]
	 @EMP_ID			 NUMERIC
	,@CMP_ID	     	 NUMERIC
	,@MONTH_ST_DATE		 DATETIME
	,@MONTH_END_DATE	 DATETIME
	,@INCREMENT_ID		 NUMERIC 
	,@STRWEEKOFF_DATE VARCHAR(MAX)=''
	,@STRHOLIDAY_DATE VARCHAR(MAX)=''
	,@RETURN_RECORD_SET	 NUMERIC =0
	,@RETURN_LATE_DATE_TABLE TINYINT = 0
	,@ABSENT_DATE_STRING	VARCHAR(MAX) =''
	,@SAL_TRAN_ID NUMERIC = 0
	,@TMP_MONTH_ST_DATE DATETIME
	,@TMP_MONTH_END_DATE DATETIME
AS

SET NOCOUNT ON 
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
SET ARITHABORT ON

BEGIN

	
	DECLARE @IN_DATE			DATETIME
	DECLARE @SHIFT_ST_TIME		VARCHAR(10)
	DECLARE @SHIFT_ST_DATETIME	DATETIME
	DECLARE @VAR_SHIFT_ST_DATE	VARCHAR(20)
	DECLARE @EMP_LATE_LIMIT		VARCHAR(10)
	DECLARE @LATE_LIMIT_SEC		NUMERIC
	DECLARE @BRANCH_ID		    NUMERIC 
	DECLARE @EMP_LATE_MARK		INT
	DECLARE @LATE_DEDU_TYPE		VARCHAR(10)
	DECLARE @MONTH				NUMERIC
	DECLARE @VARMONTH			VARCHAR(10)
	DECLARE @LATE_WITH_LEAVE    NUMERIC(1,0)
	DECLARE @YEAR				NUMERIC
	DECLARE @SHIFT_ST_TIME_HALF_DAY 	VARCHAR(10)
	DECLARE @IS_HALF_DAY 	TINYINT
	DECLARE @ROUNDINGVALUE 	NUMERIC(18,2) 
	DECLARE @IS_LATE_CALC_ON_HO_WO TINYINT
	DECLARE @IS_LATEMARK AS TINYINT
	DECLARE @SHIFT_MAX_LATE_TIME DATETIME
	DECLARE @OUT_DATE DATETIME	
	DECLARE @SHIFT_END_TIME VARCHAR(10)
	DECLARE @VAR_SHIFT_END_DATE	VARCHAR(20)
	DECLARE @SHIFT_END_TIME_HALF_DAY VARCHAR(10)
	DECLARE @SHIFT_NAME VARCHAR(200)
	
	
	SET @MONTH	= MONTH(@MONTH_ST_DATE)
	SET @VARMONTH = @MONTH
	SET @VARMONTH = '#' + @VARMONTH + '#'
	SET @ROUNDINGVALUE = 0
	SET @YEAR	= YEAR(@MONTH_ST_DATE)
	SET @IS_LATEMARK = 0
	SET @SHIFT_NAME = ''
	
	DECLARE @LATE_MARK_SCENARIO NUMERIC(5,0)
	DECLARE @GEN_ID NUMERIC(5,0)
	DECLARE @ACTUAL_SHIFT_ST_TIME DATETIME
	DECLARE @ACTUAL_MIN_DIFF NUMERIC(18,0)
	DECLARE @LATE_ADJ_AGAIN_OT NUMERIC(18,0)
	DECLARE @IS_LATE_PERCENTAGE NUMERIC(1,0)
	DECLARE @IS_LATE_CALCULATE_ON NUMERIC(1,0)
	DECLARE @GROSS_SALARY NUMERIC(18,2)
	DECLARE @BASIC_SALARY NUMERIC(18,2)
	DECLARE @SAL_FIX_DAYS NUMERIC(18,2)
	DECLARE @Late_Limit NUMERIC(18,2)
	DECLARE @DESIGNATION_ID NUMERIC(18,0)
	
	SET @LATE_MARK_SCENARIO = 0
	SET @ACTUAL_MIN_DIFF = 0
	SET @GEN_ID = 0
	SET @LATE_ADJ_AGAIN_OT = 0
	SET @IS_LATE_PERCENTAGE = 0
	SET @IS_LATE_CALCULATE_ON = 0
	SET @GROSS_SALARY = 0
	SET @BASIC_SALARY = 0
	SET @SAL_FIX_DAYS = 0
	SET @Late_Limit = 0
	SET @DESIGNATION_ID = 0
	
	
	--SELECT	@EMP_LATE_MARK = ISNULL(EMP_LATE_MARK,0) ,
	--		@EMP_LATE_LIMIT = ISNULL(EMP_LATE_LIMIT,'00:00'),
	--		@BRANCH_ID =BRANCH_ID,
	--		@LATE_DEDU_TYPE = LATE_DEDU_TYPE,
	--		@BASIC_SALARY = I.Basic_Salary,
	--		@DESIGNATION_ID = I.Desig_Id
	--FROM	T0095_INCREMENT I 
	--WHERE	I.EMP_ID = @EMP_ID AND INCREMENT_ID =@INCREMENT_ID	
	
	SELECT 
			@EMP_LATE_MARK = ISNULL(EMP_LATE_MARK,0) ,
			@EMP_LATE_LIMIT = ISNULL(EMP_LATE_LIMIT,'00:00'),
			@BRANCH_ID =BRANCH_ID,
			@LATE_DEDU_TYPE = LATE_DEDU_TYPE,
			@BASIC_SALARY = I.Basic_Salary,
			@DESIGNATION_ID = I.Desig_Id
	FROM T0095_INCREMENT I WITH (NOLOCK)
	WHERE INCREMENT_ID IN 
		(
			 SELECT MAX(TI.INCREMENT_ID) INCREMENT_ID 
			 FROM T0095_INCREMENT TI WITH (NOLOCK) INNER JOIN
				   (
						SELECT MAX(INCREMENT_EFFECTIVE_DATE) AS INCREMENT_EFFECTIVE_DATE 
						FROM T0095_INCREMENT WITH (NOLOCK)
						WHERE INCREMENT_EFFECTIVE_DATE <= @MONTH_END_DATE 
						AND CMP_ID=@CMP_ID AND EMP_ID = @EMP_ID 
					) NEW_INC
				ON TI.INCREMENT_EFFECTIVE_DATE=NEW_INC.INCREMENT_EFFECTIVE_DATE
			 WHERE TI.INCREMENT_EFFECTIVE_DATE <= @MONTH_END_DATE AND EMP_ID = @EMP_ID 
		)
	
	
	SELECT	@LATE_MARK_SCENARIO = ISNULL(LATE_MARK_SCENARIO,0),
			@GEN_ID = ISNULL(GEN_ID,0),
			@LATE_WITH_LEAVE = LATE_WITH_LEAVE,
			@IS_LATE_CALC_ON_HO_WO = IS_LATE_CALC_ON_HO_WO,
			@IS_LATEMARK = IS_LATE_MARK, 
			@ROUNDINGVALUE = ISNULL(EARLY_HOUR_UPPER_ROUNDING,0),
			@LATE_ADJ_AGAIN_OT = ISNULL(LATE_ADJ_AGAIN_OT,0),
			@IS_LATE_PERCENTAGE = ISNULL(IS_LATEMARK_PERCENTAGE,0),
			@SAL_FIX_DAYS = ISNULL(SAL_FIX_DAYS,0),
			@Late_Limit = dbo.F_Return_Sec(Late_Limit),
			@IS_LATE_CALCULATE_ON = ISNULL(IS_LATEMARK_CAL_ON,0)
	FROM	T0040_GENERAL_SETTING G WITH (NOLOCK)
			INNER JOIN (
							SELECT	MAX(FOR_DATE) AS FOR_DATE 
							FROM	T0040_GENERAL_SETTING WITH (NOLOCK)    
							WHERE	CMP_ID = @CMP_ID AND FOR_DATE <=@MONTH_END_DATE AND BRANCH_ID=@BRANCH_ID
						)  G1 ON G.FOR_DATE=G1.FOR_DATE
	WHERE	CMP_ID = @CMP_ID AND BRANCH_ID =@BRANCH_ID 
	
	
	IF OBJECT_ID('TEMPDB.DBO.#ABSENT_DATES') IS NOT NULL
		DROP TABLE #ABSENT_DATES
	
	CREATE TABLE #ABSENT_DATES  
	(
		ABSENT_DATE DATETIME
	)
	
	IF @ABSENT_DATE_STRING <> ''
		BEGIN
			INSERT INTO #ABSENT_DATES(ABSENT_DATE)
			SELECT DATA FROM DBO.SPLIT(@ABSENT_DATE_STRING,'#')
		END
		
	
	SELECT @LATE_LIMIT_SEC	= DBO.F_RETURN_SEC(@EMP_LATE_LIMIT)
   
    IF OBJECT_ID('TEMPDB.DBO.#LATE_MARK_SLAB') IS NOT NULL
		DROP TABLE #LATE_MARK_SLAB
    
    CREATE TABLE #LATE_MARK_SLAB
    (
		CMP_ID NUMERIC(18,0),
		EMP_ID NUMERIC(18,0),
		TRANS_ID NUMERIC(18,0),
		DESIG_ID NUMERIC(5,0),
		NORMAL_RATE NUMERIC(18,2),
		LUNCH_RATE NUMERIC(18,2),
    )
    
    IF OBJECT_ID ('TEMPDB.DBO.#LATE_MARK_TRANSACTION') IS NOT NULL
		DROP TABLE 	#LATE_MARK_TRANSACTION
		
	CREATE TABLE #LATE_MARK_TRANSACTION
	(
		CMP_ID NUMERIC(18,0),
		EMP_ID NUMERIC(18,0),
		FOR_DATE DATETIME,
		LATE_MIN VARCHAR(50),
		LATE_LUNCH_MIN VARCHAR(50),
		NORMAL_RATE NUMERIC(5,2),
		LUNCH_RATE NUMERIC(18,2),
		LATE_AMOUNT NUMERIC(18,2),
		LUNCH_AMOUNT NUMERIC(18,2),
		LATE_SEC NUMERIC(18,0),
		LATE_LUNCH_SEC NUMERIC(18,0),
		LATE_LIMIT VARCHAR(50),
		SHIFT_ID NUMERIC(18,0),
		SHIFT_NAME VARCHAR(200),
		IN_TIME DATETIME,
		BREAK_OUTTIME DATETIME,
		BREAK_INTIME DATETIME
	)
	
	DECLARE @LATE_NORMAL_RATE NUMERIC(5,2)
	SET @LATE_NORMAL_RATE = 0
	
	DECLARE @DIFF_MINUS NUMERIC
	SET @DIFF_MINUS = 0
	
	
    IF @LATE_MARK_SCENARIO = 3
		BEGIN
			 INSERT INTO #LATE_MARK_SLAB(CMP_ID,EMP_ID,TRANS_ID,DESIG_ID,NORMAL_RATE,LUNCH_RATE)
			 SELECT @CMP_ID,@EMP_ID,TRAN_ID,DESIG_ID,NORMAL_RATE,LUNCH_RATE
			 FROM T0050_LATEMARK_RATE_DESIGNATION WITH (NOLOCK) WHERE CMP_ID = @CMP_ID AND GEN_ID = @GEN_ID 
		END
		
	if Exists(Select 1 From #LATE_MARK_SLAB Where DESIG_ID = @DESIGNATION_ID AND NORMAL_RATE > 0 OR LUNCH_RATE > 0)	
		BEGIN
		  IF  @EMP_LATE_MARK = 1
			BEGIN
			
				DECLARE @HALFDAYDATE VARCHAR(500)								
				EXEC GET_HALFDAY_DATE @CMP_ID,@EMP_ID,@MONTH_ST_DATE,@MONTH_END_DATE,0,@HALFDAYDATE OUTPUT
				
				DECLARE @FOR_DATECURR	DATETIME	
				SET @FOR_DATECURR = NULL
				
				DECLARE @IS_CANCEL_LATE_IN TINYINT
				DECLARE @DIFFERNCE_ROUNDING_LATE_SEC NUMERIC
				DECLARE @SHIFT_ID NUMERIC(18,0);			
				
				DECLARE CURLMARK CURSOR FOR
				SELECT	MIN(CAST(CAST(IN_TIME AS VARCHAR(11)) + ' ' + DBO.F_RETURN_HHMM(IN_TIME) AS DATETIME)),
						MAX(CAST(CAST(OUT_TIME AS VARCHAR(11)) + ' ' + DBO.F_RETURN_HHMM(OUT_TIME) AS DATETIME)),
						EI.FOR_DATE 
				FROM	DBO.T0150_EMP_INOUT_RECORD EI WITH (NOLOCK)	
						LEFT OUTER JOIN #ABSENT_DATES AD ON EI.FOR_DATE = AD.ABSENT_DATE
				WHERE	EMP_ID =@EMP_ID AND FOR_DATE>=@TMP_MONTH_ST_DATE AND FOR_DATE<=@TMP_MONTH_END_DATE  
						AND ISNULL(Is_Cancel_Late_In,0) =0 AND ABSENT_DATE IS NULL 
				GROUP BY FOR_DATE	
				OPEN  CURLMARK
				FETCH NEXT FROM CURLMARK INTO @IN_DATE,@OUT_DATE,@FOR_DATECURR
				WHILE @@FETCH_STATUS = 0
					BEGIN
						
						SET @SHIFT_ID = NULL;
						SET @SHIFT_ID = DBO.FN_GET_SHIFT_FROM_MONTHLY_ROTATION(@CMP_ID, @EMP_ID, @IN_DATE);
						
						
						SELECT	@SHIFT_ST_TIME=SM.SHIFT_ST_TIME,
								@SHIFT_END_TIME=SM.SHIFT_END_TIME,
								@IS_HALF_DAY=ISNULL(SM.IS_HALF_DAY,0),
								@SHIFT_ST_TIME_HALF_DAY = ISNULL(SM.HALF_ST_TIME,'00:00'),
								@SHIFT_END_TIME_HALF_DAY = ISNULL(SM.HALF_END_TIME,'00:00'),
								@SHIFT_NAME = SM.Shift_Name
						FROM	T0040_SHIFT_MASTER SM WITH (NOLOCK)
						WHERE	SM.CMP_ID=@CMP_ID AND SM.SHIFT_ID=@SHIFT_ID
						
						SET @VAR_SHIFT_ST_DATE = CAST(@IN_DATE AS VARCHAR(11)) + ' '  + @SHIFT_ST_TIME  
						SET @VAR_SHIFT_END_DATE = CAST(@OUT_DATE AS VARCHAR(11)) + ' '  + @SHIFT_END_TIME
						
						SET @SHIFT_ST_DATETIME = CAST(@VAR_SHIFT_ST_DATE AS DATETIME)
						SET @SHIFT_ST_DATETIME = DATEADD(S,@LATE_LIMIT_SEC,@SHIFT_ST_DATETIME)
						
						
						IF @IS_LATEMARK = 1
							BEGIN
								IF @IS_LATE_CALC_ON_HO_WO = 0									
									BEGIN
										IF CHARINDEX(CAST(@IN_DATE AS VARCHAR(11)),@STRWEEKOFF_DATE,0) <> 0 OR CHARINDEX(CAST(@IN_DATE AS VARCHAR(11)),@STRHOLIDAY_DATE,0) <> 0 
											SET @IN_DATE = @SHIFT_ST_DATETIME
									END
									
									
											SET		@IS_CANCEL_LATE_IN = 0
											SELECT	TOP 1 @IS_CANCEL_LATE_IN=ISNULL(IS_CANCEL_LATE_IN,0)
											FROM	DBO.T0150_EMP_INOUT_RECORD WITH (NOLOCK)
											WHERE	EMP_ID =@EMP_ID AND FOR_DATE = CONVERT(NVARCHAR,@IN_DATE,106)
													AND ISNULL(LATE_CALC_NOT_APP,0)=0 AND CHK_BY_SUPERIOR <> 0 -- CHANGED BY RAMIZ ON 04/03/2016 FROM CHK_BY_SUPERIOR = 1 TO CHK_BY_SUPERIOR <> 0 AS NOW CHK_BY_SUPERIOR = 2 IS ALSO COMING
											ORDER BY IS_CANCEL_LATE_IN DESC  
											
											IF(CHARINDEX(CONVERT(NVARCHAR(11),@IN_DATE,109),@HALFDAYDATE) > 0) 
												BEGIN
													IF @IS_HALF_DAY = 1
														BEGIN
															SET @VAR_SHIFT_ST_DATE = CAST(@IN_DATE AS VARCHAR(11)) + ' '  + @SHIFT_ST_TIME_HALF_DAY
															SET @VAR_SHIFT_END_DATE = CAST(@OUT_DATE AS VARCHAR(11)) + ' '  + @SHIFT_END_TIME_HALF_DAY												END
													ELSE
														BEGIN
															SET @VAR_SHIFT_ST_DATE = CAST(@IN_DATE AS VARCHAR(11)) + ' '  + @SHIFT_ST_TIME
															SET @VAR_SHIFT_END_DATE = CAST(@OUT_DATE AS VARCHAR(11)) + ' '  + @SHIFT_END_TIME	
														END
												END
											ELSE
												BEGIN
													SET @VAR_SHIFT_ST_DATE = CAST(@IN_DATE AS VARCHAR(11)) + ' '  + @SHIFT_ST_TIME
													SET @VAR_SHIFT_END_DATE = CAST(@OUT_DATE AS VARCHAR(11)) + ' '  + @SHIFT_END_TIME	
												END	
												
											SET @SHIFT_ST_DATETIME = CAST(@VAR_SHIFT_ST_DATE AS DATETIME)
											SET @ACTUAL_SHIFT_ST_TIME = @SHIFT_ST_DATETIME
											SET @SHIFT_ST_DATETIME = DATEADD(S,@LATE_LIMIT_SEC,@SHIFT_ST_DATETIME)
											
											DECLARE @IS_HALF_DAY_LEAVE TINYINT
											DECLARE @IS_FULL_DAY_LEAVE TINYINT
											
											SET @IS_HALF_DAY_LEAVE = 0
											SET @IS_FULL_DAY_LEAVE = 0
											
											DECLARE @FR_DT AS DATETIME
											SET @FR_DT = CAST(CONVERT(NVARCHAR(11),@IN_DATE,106) + ' 00:00:00' AS DATETIME)
											
											IF EXISTS(
														SELECT	LA.LEAVE_APPROVAL_ID 
														FROM	T0120_LEAVE_APPROVAL LA WITH (NOLOCK) INNER JOIN T0130_LEAVE_APPROVAL_DETAIL LAD WITH (NOLOCK) ON LA.LEAVE_APPROVAL_ID = LAD.LEAVE_APPROVAL_ID
														WHERE	EMP_ID = @EMP_ID AND LEAVE_ASSIGN_AS = 'FIRST HALF' 
																AND (
																		ISNULL(HALF_LEAVE_DATE,TO_DATE) = @FR_DT OR 
																		CASE WHEN HALF_LEAVE_DATE = '01-JAN-1900' 
																			THEN TO_DATE 
																		ELSE 
																			HALF_LEAVE_DATE 
																		END = @FR_DT 
													 )AND APPROVAL_STATUS = 'A')
											BEGIN	
												SET @IS_HALF_DAY_LEAVE = 1		
											END
											
											IF EXISTS(
														SELECT	LA.LEAVE_APPROVAL_ID 
														FROM	T0120_LEAVE_APPROVAL LA WITH (NOLOCK) INNER JOIN T0130_LEAVE_APPROVAL_DETAIL LAD WITH (NOLOCK) ON LA.LEAVE_APPROVAL_ID = LAD.LEAVE_APPROVAL_ID
														WHERE	EMP_ID = @EMP_ID AND UPPER(LEAVE_ASSIGN_AS) = 'PART DAY' 
														AND (FROM_DATE= @FR_DT) AND LEAVE_OUT_TIME = @SHIFT_MAX_LATE_TIME AND APPROVAL_STATUS = 'A'
													 )
											BEGIN	
												SET @IS_HALF_DAY_LEAVE = 1		
											END
											
											IF EXISTS(SELECT EMP_ID FROM T0140_LEAVE_TRANSACTION WITH (NOLOCK) WHERE EMP_ID = @EMP_ID AND FOR_DATE = @FR_DT AND ( LEAVE_USED >= 1 OR COMPOFF_USED >= 1 ))	--COMPOFF_USED	--ANKIT 04122015
											BEGIN	
												SET @IS_FULL_DAY_LEAVE = 1		
											END
											
											SET @DIFFERNCE_ROUNDING_LATE_SEC = 0
											
											IF @IN_DATE > @SHIFT_ST_DATETIME AND @IS_CANCEL_LATE_IN = 0  AND @IS_HALF_DAY_LEAVE = 0 AND @IS_FULL_DAY_LEAVE = 0-- MODIFIED BY MITESH ON 08/08/2011
												BEGIN
													/* FOR SHIFT START TIME 12:00 AM & EMPLOYEE IN PUNCH EARLY THEN NOT COUNT LATE MARK (NIRMA CLIENT)  --ANKIT 07112015 */
													IF @ROUNDINGVALUE > 0 
														BEGIN
															IF DATEPART(HH,@SHIFT_ST_DATETIME) = 0 AND @IN_DATE < DATEADD(D,1,@FOR_DATECURR)
																SET @DIFFERNCE_ROUNDING_LATE_SEC = DATEDIFF(S,DATEADD(D,1,@FOR_DATECURR) ,@IN_DATE)
															ELSE
																SET @DIFFERNCE_ROUNDING_LATE_SEC = DATEDIFF(S,CAST(@VAR_SHIFT_ST_DATE AS DATETIME) ,@IN_DATE)
																
															SELECT @DIFFERNCE_ROUNDING_LATE_SEC = DBO.PRO_ROUNDING_SEC_HH_MM(@DIFFERNCE_ROUNDING_LATE_SEC,@ROUNDINGVALUE)
														END	
													ELSE
														BEGIN
															IF DATEPART(HH,@SHIFT_ST_DATETIME) = 0 AND @IN_DATE < DATEADD(D,1,@FOR_DATECURR)
																SET @DIFFERNCE_ROUNDING_LATE_SEC = DATEDIFF(S,DATEADD(D,1,@FOR_DATECURR) ,@IN_DATE)
															ELSE
																SET @DIFFERNCE_ROUNDING_LATE_SEC = DATEDIFF(S,@SHIFT_ST_DATETIME ,@IN_DATE)
														END
													IF @DIFFERNCE_ROUNDING_LATE_SEC > 0	
														BEGIN 
															IF (@IN_DATE > @SHIFT_ST_DATETIME)
															BEGIN
																
																SELECT @ACTUAL_MIN_DIFF = DATEDIFF(MINUTE, @ACTUAL_SHIFT_ST_TIME , @IN_DATE)
																
																IF(@ACTUAL_MIN_DIFF * 60) > @LATE_LIMIT 
																	BEGIN
																		
																		SET @DIFF_MINUS =  (@ACTUAL_MIN_DIFF * 60) - @LATE_LIMIT
																		
																		SELECT @LATE_NORMAL_RATE = ISNULL(NORMAL_RATE,0) FROM #LATE_MARK_SLAB WHERE DESIG_ID = @DESIGNATION_ID
																																		
																		INSERT INTO #LATE_MARK_TRANSACTION(CMP_ID,EMP_ID,FOR_DATE,LATE_MIN,NORMAL_RATE,LUNCH_RATE,LATE_AMOUNT,LATE_SEC,LATE_LIMIT,SHIFT_ID,SHIFT_NAME,IN_TIME)
																		VALUES(@CMP_ID,@EMP_ID,@FR_DT,DBO.F_RETURN_HOURS((@ACTUAL_MIN_DIFF * 60)- @LATE_LIMIT),@LATE_NORMAL_RATE,0,(@LATE_NORMAL_RATE * (@DIFF_MINUS/60)),((@ACTUAL_MIN_DIFF * 60)- @LATE_LIMIT),DBO.F_RETURN_HOURS(@LATE_LIMIT),@SHIFT_ID,@SHIFT_ST_TIME + '- ' + @SHIFT_END_TIME,@IN_DATE)
													
																	END
															END
														END
									END
							END
						FETCH NEXT FROM CURLMARK INTO @IN_DATE,@OUT_DATE,@FOR_DATECURR
					END
				CLOSE curLMark;
				DEALLOCATE curLMark;
			END
		END
		
		if Exists(Select 1 From #LATE_MARK_SLAB Where DESIG_ID = @DESIGNATION_ID AND LUNCH_RATE > 0)
			BEGIN
				IF OBJECT_ID('TEMPDB..#DATA_EIO_DIFF') IS NOT NULL
					BEGIN
						DROP TABLE #DATA_EIO_DIFF
					END
					
					CREATE TABLE #DATA_EIO_DIFF
					(         
					   EMP_ID   NUMERIC ,         
					   FOR_DATE DATETIME,        
					   DIFF_SEC NUMERIC,
					   BREAK_IN DATETIME,
					   BREAK_OUT DATETIME
					)
					--SET @TMP_MONTH_END_DATE = '2017-06-01 00:00:00'
					CREATE NONCLUSTERED INDEX ix_Data_temp1_Diff_Emp_Id_For_date ON #Data_EIO_Diff(Emp_Id,For_Date);

							
					SELECT	ROW_NUMBER() OVER(PARTITION BY EIO1.Emp_ID ORDER BY FOR_DATE,ISNULL(IN_TIME, OUT_TIME)) AS ROW_ID, EIO1.Emp_ID,For_Date,In_Time,Out_Time 
					INTO	#EIO
					FROM	T0150_EMP_INOUT_RECORD EIO1 WITH (NOLOCK)
							LEFT OUTER JOIN #ABSENT_DATES AD ON EIO1.FOR_DATE = AD.ABSENT_DATE
					WHERE	EIO1.cmp_Id= @Cmp_ID  and EIO1.for_Date >=@TMP_MONTH_ST_DATE and EIO1.For_Date <=@TMP_MONTH_END_DATE 
							and EIO1.Emp_ID = @EMP_ID 		

					;WITH Q(ROW_ID,Emp_ID,For_Date,In_Time,Out_Time,LVL, DIFF,DiffSe) AS
					(
						SELECT	ROW_ID, EIO1.Emp_ID,For_Date,In_Time,Out_Time, 'U' AS LVL, CAST(NULL AS DATETIME) AS DIFF ,CAST(0 AS INT) AS DiffSe
						FROM	#EIO EIO1
						WHERE	ROW_ID=1
						UNION ALL
						SELECT	EIO2.ROW_ID,EIO2.Emp_ID,EIO2.For_Date,EIO2.In_Time,EIO2.Out_Time,'D' AS LVL,Q.Out_Time ,CAST(DATEDIFF(S,Q.out_Time,EIO2.In_Time) AS INT) AS DiffSe --CAST(EIO2.In_Time - Q.Out_Time AS DATETIME) AS DIFF
						FROM	#EIO EIO2 INNER JOIN Q ON EIO2.ROW_ID = (Q.ROW_ID + 1) AND Q.Emp_ID=EIO2.Emp_ID
					) 

					INSERT INTO #Data_EIO_Diff
					SELECT	Q.Emp_id,Q.For_Date,Q.DiffSe,Q.DIFF as Break_In,Q.In_Time as Break_Out
					FROM Q	INNER JOIN (SELECT FOR_DATE, EMP_ID FROM Q GROUP BY EMP_ID,FOR_DATE HAVING COUNT(1) >1 ) Q1 ON Q.FOR_DATE=Q1.FOR_DATE AND Q.EMP_ID=Q1.EMP_ID
							INNER JOIN (SELECT MAX(ROW_ID) AS ROW_ID,EMP_ID,FOR_DATE FROM Q GROUP BY FOR_DATE,EMP_ID ) Q2 ON Q.ROW_ID=Q2.ROW_ID and Q2.Emp_ID=Q1.Emp_ID
					WHERE	LVL='D'  
					
					
					 DROP TABLE #EIO
					 
					 DECLARE @BREAK_IN DATETIME
					 DECLARE @BREAK_OUT DATETIME
					 DECLARE @FOR_DATE_BREAK DATETIME
					 DECLARE @DIFF_SEC NUMERIC
					 DECLARE @SHIFT_ID_BREAK NUMERIC;
					 DECLARE @SHIFT_ST_TIME_BREAK VARCHAR(10)
					 DECLARE @SHIFT_END_TIME_BREAK VARCHAR(10)
					 DECLARE @VAR_SHIFT_ST_DATE_BREAK	VARCHAR(20)
					 DECLARE @VAR_SHIFT_END_DATE_BREAK VARCHAR(20)
					 DECLARE @SHIFT_ST_DATETIME_BREAK DATETIME
					 DECLARE @SHIFT_END_DATETIME_BREAK DATETIME
					 DECLARE @IS_CANCEL_LATE_IN_BREAK TINYINT
					 DECLARE @DIFF_ROUNDING_LATE_SEC_BREAK NUMERIC
					 DECLARE @DIFFERNCE_ROUNDING_LATE_SEC_BREAK NUMERIC
					 DECLARE @ACTUAL_SHIFT_ST_TIME_BREAK DATETIME
					 DECLARE @ACTUAL_MIN_DIFF_BREAK NUMERIC(18,0)
					 DECLARE @LATE_LUNCH_RATE NUMERIC(18,2)
					 DECLARE @SHIFT_NAME_BREAK_NAME VARCHAR(100)
					 DECLARE @SHIFT_DURATION_BREAK NUMERIC
					 DECLARE @DIFF_BREAK_MIN VARCHAR(50)
					 DECLARE @SHIFT_ST_TIME_B Varchar(10)
					 DECLARE @SHIFT_END_TIME_B Varchar(10)
					 DECLARE @DEDUCT_BREAK NUMERIC(2,0)
					 
					 SET @BREAK_IN = NULL
					 SET @BREAK_OUT = NULL
					 SET @FOR_DATE_BREAK = NULL
					 SET @DIFF_SEC = 0
					 SET @SHIFT_ID_BREAK = 0
					 SET @SHIFT_ST_TIME_BREAK = NULL
					 SET @SHIFT_END_TIME_BREAK = NULL
					 SET @VAR_SHIFT_ST_DATE_BREAK	= NULL
					 SET @VAR_SHIFT_END_DATE_BREAK = NULL
					 SET @SHIFT_ST_DATETIME_BREAK = NULL
					 SET @SHIFT_END_DATETIME_BREAK = NULL
					 SET @DIFFERNCE_ROUNDING_LATE_SEC_BREAK = 0
					 SET @ACTUAL_SHIFT_ST_TIME_BREAK = NULL
					 SET @ACTUAL_MIN_DIFF_BREAK = 0
					 SET @LATE_LUNCH_RATE = 0
					 SET @SHIFT_DURATION_BREAK = 0
					 SET @DIFF_BREAK_MIN = ''
					 SET @SHIFT_ST_TIME_B = ''
					 SET @SHIFT_END_TIME_B = ''
					 SET @DEDUCT_BREAK = 0
					
					 IF  @EMP_LATE_MARK = 1
						BEGIN
							
							DECLARE CURLATEMARK_BREAK CURSOR FOR
							SELECT	
								  BREAK_IN,
								  BREAK_OUT,
								  FOR_DATE,
								  DIFF_SEC
							FROM #DATA_EIO_DIFF
							
							OPEN CURLATEMARK_BREAK 
							FETCH NEXT FROM CURLATEMARK_BREAK INTO @BREAK_IN,@BREAK_OUT,@FOR_DATE_BREAK,@DIFF_SEC
								WHILE @@FETCH_STATUS = 0
									BEGIN
										SET @SHIFT_ID_BREAK = NULL
										SET @SHIFT_ID_BREAK = DBO.FN_GET_SHIFT_FROM_MONTHLY_ROTATION(@CMP_ID, @EMP_ID, @BREAK_IN);
										
										SELECT	
										@SHIFT_ST_TIME_BREAK = SM.S_St_Time,
										@SHIFT_END_TIME_BREAK = SM.S_END_Time,
										@SHIFT_NAME_BREAK_NAME = SM.Shift_Name,
										@SHIFT_DURATION_BREAK = dbo.F_Return_Sec(SM.S_Duration), 
										@SHIFT_ST_TIME_B = SM.Shift_St_Time,
										@SHIFT_END_TIME_B = SM.Shift_END_Time,
										@DEDUCT_BREAK = SM.DeduHour_SecondBreak
										FROM	T0040_SHIFT_MASTER SM WITH (NOLOCK)
										WHERE	SM.CMP_ID=@CMP_ID AND SM.SHIFT_ID=@SHIFT_ID
										
										SET @VAR_SHIFT_ST_DATE_BREAK = CAST(@BREAK_IN AS VARCHAR(11)) + ' '  + @SHIFT_ST_TIME_BREAK  
										SET @VAR_SHIFT_END_DATE_BREAK = CAST(@BREAK_OUT AS VARCHAR(11)) + ' '  + @SHIFT_END_TIME_BREAK
										
										SET @SHIFT_ST_DATETIME_BREAK = CAST(@VAR_SHIFT_ST_DATE_BREAK AS DATETIME)
										SET @ACTUAL_SHIFT_ST_TIME = @SHIFT_ST_DATETIME_BREAK
										--SET @SHIFT_END_DATETIME_BREAK = DATEADD(S,@LATE_LIMIT_SEC,@SHIFT_ST_DATETIME_BREAK)
										SET @SHIFT_END_DATETIME_BREAK = CAST(@VAR_SHIFT_END_DATE_BREAK AS DATETIME)
										
										IF @IS_LATEMARK = 1 AND @DEDUCT_BREAK = 1
											BEGIN
												
												SET		@IS_CANCEL_LATE_IN_BREAK = 0
												SELECT	TOP 1 @IS_CANCEL_LATE_IN_BREAK = ISNULL(IS_CANCEL_LATE_IN,0)
												FROM	DBO.T0150_EMP_INOUT_RECORD WITH (NOLOCK)
												WHERE	EMP_ID =@EMP_ID AND FOR_DATE = CONVERT(NVARCHAR,@IN_DATE,106)
														AND ISNULL(LATE_CALC_NOT_APP,0)=0 AND CHK_BY_SUPERIOR <> 0 
												ORDER BY IS_CANCEL_LATE_IN DESC
												
												/*
												IF @BREAK_OUT > @SHIFT_END_DATETIME_BREAK AND @IS_CANCEL_LATE_IN_BREAK = 0
													BEGIN
														IF @ROUNDINGVALUE > 0 
														BEGIN
															IF DATEPART(HH,@SHIFT_END_DATETIME_BREAK) = 0 AND @BREAK_OUT < DATEADD(D,1,@FOR_DATE_BREAK)
																SET @DIFFERNCE_ROUNDING_LATE_SEC_BREAK = DATEDIFF(S,DATEADD(D,1,@FOR_DATE_BREAK) ,@BREAK_OUT)
															ELSE
																SET @DIFFERNCE_ROUNDING_LATE_SEC_BREAK = DATEDIFF(S,CAST(@VAR_SHIFT_END_DATE_BREAK AS DATETIME) ,@BREAK_OUT)
																
															SELECT @DIFFERNCE_ROUNDING_LATE_SEC = DBO.PRO_ROUNDING_SEC_HH_MM(@DIFFERNCE_ROUNDING_LATE_SEC_BREAK,@ROUNDINGVALUE)
														END	
													ELSE
														BEGIN
															IF DATEPART(HH,@SHIFT_END_DATETIME_BREAK) = 0 AND @BREAK_OUT < DATEADD(D,1,@FOR_DATE_BREAK)
																SET @DIFFERNCE_ROUNDING_LATE_SEC_BREAK = DATEDIFF(S,DATEADD(D,1,@FOR_DATE_BREAK) ,@BREAK_OUT)
															ELSE
																SET @DIFFERNCE_ROUNDING_LATE_SEC_BREAK = DATEDIFF(S,@SHIFT_END_DATETIME_BREAK ,@BREAK_OUT)
														END
													END
												ELSE
													BEGIN
														IF DATEPART(HH,@SHIFT_END_DATETIME_BREAK) = 0 AND @BREAK_OUT < DATEADD(D,1,@FOR_DATE_BREAK)
															SET @DIFFERNCE_ROUNDING_LATE_SEC_BREAK = DATEDIFF(S,DATEADD(D,1,@FOR_DATE_BREAK) ,@BREAK_OUT)
														ELSE
															SET @DIFFERNCE_ROUNDING_LATE_SEC_BREAK = DATEDIFF(S,@SHIFT_ST_DATETIME_BREAK ,@BREAK_OUT)
													END
												*/	
												
												IF (@BREAK_OUT > @SHIFT_END_DATETIME_BREAK)
													BEGIN
														SELECT @ACTUAL_MIN_DIFF_BREAK = DATEDIFF(MINUTE, @SHIFT_ST_DATETIME_BREAK , @BREAK_OUT)	
														
														IF(@ACTUAL_MIN_DIFF_BREAK * 60) > @SHIFT_DURATION_BREAK
															BEGIN
																SET @DIFF_BREAK_MIN = (@ACTUAL_MIN_DIFF_BREAK * 60) - @SHIFT_DURATION_BREAK
																SELECT @LATE_LUNCH_RATE = ISNULL(LUNCH_RATE,0) FROM #LATE_MARK_SLAB WHERE DESIG_ID = @DESIGNATION_ID
																
																IF EXISTS(SELECT 1 FROM #LATE_MARK_TRANSACTION WHERE FOR_DATE = @FOR_DATE_BREAK AND EMP_ID = @EMP_ID)
																	BEGIN
																		UPDATE #LATE_MARK_TRANSACTION 
																			SET 
																			   LATE_LUNCH_MIN = DBO.F_RETURN_HOURS(@DIFF_BREAK_MIN),
																			   LUNCH_RATE = @LATE_LUNCH_RATE,
																			   LUNCH_AMOUNT = (@LATE_LUNCH_RATE * (@DIFF_BREAK_MIN/60)),
																			   LATE_LUNCH_SEC = @DIFF_BREAK_MIN,
																			   BREAK_OUTTIME = @BREAK_IN,
																			   BREAK_INTIME = @BREAK_OUT
																		WHERE FOR_DATE = @FOR_DATE_BREAK AND EMP_ID = @EMP_ID
																	END
																ELSE	
																	BEGIN
																		INSERT INTO #LATE_MARK_TRANSACTION(CMP_ID,EMP_ID,FOR_DATE,LATE_LUNCH_MIN,NORMAL_RATE,LUNCH_RATE,LUNCH_AMOUNT,LATE_LUNCH_SEC,SHIFT_ID,SHIFT_NAME,BREAK_OUTTIME,BREAK_INTIME)
																		VALUES(@CMP_ID,@EMP_ID,@FOR_DATE_BREAK,DBO.F_RETURN_HOURS(@DIFF_BREAK_MIN),0,@LATE_LUNCH_RATE,(@LATE_LUNCH_RATE * (@DIFF_BREAK_MIN/60)),(@DIFF_BREAK_MIN),@SHIFT_ID_BREAK,@SHIFT_ST_TIME_B + '- ' + @SHIFT_END_TIME_B,@BREAK_IN,@BREAK_OUT)
																	END
															END
													END
											END
										FETCH NEXT FROM CURLATEMARK_BREAK INTO @BREAK_IN,@BREAK_OUT,@FOR_DATE_BREAK,@DIFF_SEC
									END
							CLOSE CURLATEMARK_BREAK
							DEALLOCATE CURLATEMARK_BREAK
						END
			END
		
		DECLARE @TRAN_ID NUMERIC
		SET @TRAN_ID = 0
		
		--SELECT * FROM #LATE_MARK_TRANSACTION
		--RETURN
		
		SELECT @TRAN_ID = ISNULL(MAX(TRAN_ID),0)  FROM T0140_MONTHLY_LATEMARK_DESIGNATION  WITH (NOLOCK)
		
		INSERT INTO T0140_MONTHLY_LATEMARK_DESIGNATION(TRAN_ID,SAL_TRAN_ID,CMP_ID,EMP_ID,LATE_MIN,LATE_LUNCH_MIN,LATE_SEC,LATE_LUNCH_SEC,FOR_DATE,NORMAL_RATE,LUNCH_RATE,LATE_AMOUNT,LUNCH_AMOUNT,LATE_LIMIT,SHIFT_ID,SHIFT_NAME,IN_TIME,BREAK_OUT,BREAK_IN)
		SELECT (@TRAN_ID + ROW_NUMBER() OVER ( ORDER BY EMP_ID )) as row_id,@SAL_TRAN_ID,
				CMP_ID,EMP_ID,LATE_MIN,LATE_LUNCH_MIN,LATE_SEC,LATE_LUNCH_SEC,FOR_DATE,NORMAL_RATE,LUNCH_RATE,LATE_AMOUNT,LUNCH_AMOUNT,LATE_LIMIT,SHIFT_ID,SHIFT_NAME,IN_TIME,BREAK_OUTTIME,BREAK_INTIME
		FROM #LATE_MARK_TRANSACTION
		
END

