

---30/1/2021 (EDIT BY MEHUL ) (SP WITH NOLOCK)---
CREATE PROCEDURE [dbo].[AX_ERP_REPORT_CLAIM]
	  @Cmp_Id		numeric output
	 ,@From_Date	datetime
	 ,@To_Date		datetime
	 ,@Flag			varchar(10) = 'C'
AS
SET NOCOUNT ON 
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
SET ARITHABORT ON
	
DECLARE @AX TABLE
(
	DOCDT				DATETIME,
	COCODE				VARCHAR(50),
	EMP_ID				Numeric(18,0),
	EMPNAME				VARCHAR(500),
	BUSIUNIT			VARCHAR(50),	
	COSTCENT			VARCHAR(50),				
	ACCODE1				VARCHAR(50),				
	AMOUNT				NUMERIC(18,2),
	TRANSACTION_TEXT	NVARCHAR(500)	,									
	CMP_ID				NUMERIC(18,0),
	CC_ID				NUMERIC(18,0),
	AD_FLAG				CHAR(1),
	VENDER_CODE			VARCHAR(50),
	SORTING_NO			NUMERIC(18,0),
	OTHER_ACCOUNT		VARCHAR(100),
	ACCOUNT_TYPE		VARCHAR(100),
	CLAIM_ID			NUMERIC(18,0)
)


DECLARE @DOC_DT	DATETIME
SET @DOC_DT = @TO_DATE
				
				
					
				INSERT INTO @AX
				SELECT @DOC_DT ,AX_HEAD.CMP_CODE,GROUP1.Emp_ID , GROUP1.Emp_Full_Name, GROUP1.SEGMENT_CODE,GROUP1.CENTER_CODE,AX_HEAD.ACCOUNT,0,AX_HEAD.Narration,
					@CMP_ID,GROUP1.CENTER_ID,AX_HEAD.AD_FLAG,GROUP1.VENDER_CODE, AX_HEAD.SORTING_NO , AX_HEAD.OTHER_ACCOUNT ,AX_HEAD.ACCOUNT_TYPE, AX_HEAD.Claim_ID
				FROM
					(
						SELECT  AX.AD_ID, SORTING_NO, ACCOUNT, NARRATION ,'C' AS AD_FLAG,
								CM.CMP_ACCOUNT_NO , CM.CMP_CODE , 
								AX.OTHER_ACCOUNT ,AX.Type as ACCOUNT_TYPE, Claim_ID
						FROM   T9999_AX_MAPPING AX WITH (NOLOCK)
						LEFT JOIN T0010_COMPANY_MASTER CM WITH (NOLOCK) ON AX.CMP_ID = CM.CMP_ID 
						WHERE AX.CMP_ID = @CMP_ID AND AX.TYPE = 'CLAIM'
					) AS AX_HEAD

				CROSS JOIN  

				(
					SELECT   DISTINCT EM.EMP_ID ,EM.Emp_Full_Name, CCM.CENTER_CODE, ISNULL(CCM.CENTER_ID,0) AS CENTER_ID , 
					ISNULL(BS.SEGMENT_CODE,'') AS SEGMENT_CODE , ISNULL(EM.DEALER_CODE,'') AS VENDER_CODE
					FROM T0080_EMP_MASTER EM WITH (NOLOCK)
							INNER JOIN
								(
									SELECT I.INCREMENT_ID, I.EMP_ID,I.CENTER_ID , I.SEGMENT_ID , I.Cmp_ID FROM T0095_INCREMENT I WITH (NOLOCK)
									INNER JOIN T0080_EMP_MASTER E WITH (NOLOCK) ON I.EMP_ID = E.EMP_ID 
									INNER JOIN (	
													SELECT MAX(INCREMENT_ID) AS INCREMENT_ID, EMP_ID FROM T0095_INCREMENT WITH (NOLOCK)
													WHERE INCREMENT_EFFECTIVE_DATE <= @TO_DATE
													AND CMP_ID = @CMP_ID
													GROUP BY EMP_ID
												) QRY ON
									I.EMP_ID = QRY.EMP_ID	AND I.INCREMENT_ID = QRY.INCREMENT_ID
								) AS INC ON INC.EMP_ID = EM.EMP_ID	
							LEFT OUTER JOIN T0040_COST_CENTER_MASTER CCM WITH (NOLOCK) ON CCM.CENTER_ID = INC.CENTER_ID AND CCm.Cmp_ID = INC.Cmp_ID
							LEFT OUTER JOIN T0040_BUSINESS_SEGMENT BS WITH (NOLOCK) ON BS.SEGMENT_ID = INC.SEGMENT_ID
						WHERE  EM.CMP_ID = @CMP_ID 
				) AS GROUP1
				WHERE GROUP1.CENTER_CODE IS NOT NULL
				ORDER BY  GROUP1.CENTER_CODE,AX_HEAD.Claim_ID,AX_HEAD.SORTING_NO
	
	UPDATE	AX
	SET		AMOUNT = T.AMOUNT
	FROM	@AX AS AX 
			INNER JOIN 
				(
					SELECT	SUM(Claim_Apr_Amount) AS AMOUNT, CAL.EMP_ID, CAL.CLAIM_ID , CAL.CMP_ID
					FROM	T0130_CLAIM_APPROVAL_DETAIL CAL WITH (NOLOCK)
					WHERE	(CAL.Claim_Apr_Date BETWEEN  @FROM_DATE AND @TO_DATE)
					GROUP BY CAL.EMP_ID, CAL.CLAIM_ID , CAL.CMP_ID
				 ) T ON AX.EMP_ID=T.EMP_ID AND AX.CLAIM_ID=T.CLAIM_ID AND AX.CMP_ID = T.CMP_ID
	
	
	
--DECLARE @CUR_CMP_ID AS NUMERIC(18,0)
	--DECLARE @CUR_CENTER_ID AS NVARCHAR(50)
	--DECLARE @CUR_CLAIM_ID AS NUMERIC(18,0)
	--DECLARE @CUR_BUS_AREA AS NVARCHAR(50)
	--DECLARE @VENDOR_CODE AS VARCHAR(50)

	--DECLARE CUR_AX CURSOR FOR
	--	SELECT CMP_ID,CC_ID,CLAIM_ID,BUSIUNIT,VENDER_CODE FROM @AX WHERE ACCOUNT_TYPE = 'CLAIM'
	--OPEN CUR_AX
	--FETCH NEXT FROM CUR_AX INTO @CUR_CMP_ID, @CUR_CENTER_ID,@CUR_CLAIM_ID,@CUR_BUS_AREA,@VENDOR_CODE
	--WHILE @@FETCH_STATUS = 0
	--	BEGIN
			
	--		DECLARE @SUM_AMT AS NUMERIC(18,2) 
	--		SET @SUM_AMT = 0	
				
	--				SELECT @SUM_AMT = isnull(SUM(CAD.Claim_Apr_Amount),0)
	--				FROM T0130_CLAIM_APPROVAL_DETAIL CAD 
	--					INNER JOIN (
	--								SELECT I.EMP_ID,I.CENTER_ID ,E.DEALER_CODE FROM T0095_INCREMENT I 
	--								INNER JOIN T0080_EMP_MASTER E ON I.EMP_ID = E.EMP_ID 
	--								INNER JOIN 
	--									( 
	--										SELECT MAX(Increment_Id) AS Increment_Id , EMP_ID FROM T0095_INCREMENT
	--										WHERE INCREMENT_EFFECTIVE_DATE <= @TO_DATE
	--										AND CMP_ID = @CMP_ID 
	--										GROUP BY EMP_ID
	--									) QRY ON I.EMP_ID = QRY.EMP_ID	AND I.Increment_Id = QRY.Increment_Id
	--								) AS INC ON INC.EMP_ID = CAD.Emp_ID
	--					INNER JOIN T0080_EMP_MASTER EM ON CAD.Emp_ID = EM.Emp_ID
	--					WHERE INC.Center_ID = @CUR_CENTER_ID and CLAIM_ID = @CUR_CLAIM_ID and CAD.Claim_Apr_Date < @TO_Date
						

	--				UPDATE @AX SET AMOUNT = @SUM_AMT WHERE CC_ID = @CUR_CENTER_ID AND CLAIM_ID = @CUR_CLAIM_ID and AD_FLAG = 'C'
				
	--		FETCH NEXT FROM CUR_AX INTO @CUR_CMP_ID, @CUR_CENTER_ID,@CUR_CLAIM_ID,@CUR_BUS_AREA,@VENDOR_CODE
	--	END 
	--CLOSE CUR_AX
	--DEALLOCATE CUR_AX

IF @Flag = 'C'
	BEGIN
		SELECT
			ISNULL(VENDER_CODE,0) AS VENDER_CODE,
			REPLACE(CONVERT(VARCHAR(20),DOCDT,105),'-','.') AS [INVOICE DATE] ,
			REPLACE(CONVERT(VARCHAR(20),DOCDT,105),'-','.') AS [REFERENCE] ,
			REPLACE(CONVERT(VARCHAR(20),GETDATE(),105),'-','.') AS [POSTING DATE] ,
			ISNULL(AMOUNT,0) as Amount,
			'' as [Calculate Tax],
			COCODE AS [Bus. Place],
			COCODE as Sectn,
			TRANSACTION_TEXT as [Text],
			ACCODE1 as [G/L acct],
			AMOUNT as [Amount in doc.curr],
			78 as [Tax Code],
			TRANSACTION_TEXT as [Text],
			BUSIUNIT as [Business area],
			COSTCENT as [Cost Center]
			FROM @AX 
		WHERE AMOUNT > 0 and COSTCENT is NOT NULL 
		ORDER BY ACCODE1
	END	
			
	--		REPLACE(CONVERT(VARCHAR(20),GETDATE(),105),'-','.') AS [POSTING DATE],
	--		'INR' as [Currency Key],
	--		40 as [Posting Key],
			
			
	--		COCODE as [Bus. Place],
	--		'EXPS. LINE ITEM FOR THE MONTH OF ' + Upper(dbo.F_GET_MONTH_NAME(MONTH(DOCDT))) + '-' + Cast(YEAR(DOCDT) as varchar(4)) AS [Text],
	--		'' as BLANK,
			
	--		--AMOUNT as Amount, '' as [Calculate Tax],
	--		--COCODE as Sectn,
			
	--		50 as [New Posting Key],
	--		Other_Account as [Additional G/L Account],
	--		AMOUNT as [Amount in doc.curr_1],
	--		COCODE as [Bus. Place_1],
	--		'EXPS. LINE ITEM FOR THE MONTH OF ' + Upper(dbo.F_GET_MONTH_NAME(MONTH(DOCDT))) + '-' + Cast(YEAR(DOCDT) as varchar(4)) AS [Text],
	--		'' as BLANK,
	--		BUSIUNIT as [Business area]			
	--	FROM @AX 
	--WHERE COSTCENT is NOT NULL --AND AMOUNT > 0
	--ORDER BY ACCODE1
	--END

	

RETURN


