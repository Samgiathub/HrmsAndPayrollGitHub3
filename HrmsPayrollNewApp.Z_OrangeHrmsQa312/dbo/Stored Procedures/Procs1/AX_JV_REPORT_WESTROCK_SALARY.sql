CREATE PROCEDURE [dbo].[AX_JV_REPORT_WESTROCK_SALARY]
	  @CMP_ID	NUMERIC OUTPUT	 
	 ,@FROM_DATE  DATETIME
	 ,@TO_DATE  DATETIME
	 ,@FLAG CHAR = 'C'
	 ,@AD_ID_PASS NUMERIC = 0
	 ,@COST_CENTER	VARCHAR(MAX) =''
	 ,@BUSINESS_SEGMENT VARCHAR(MAX) = ''
AS
BEGIN
	
	SET NOCOUNT ON;
	DECLARE @MONTH NUMERIC(18,0)
	DECLARE @YEAR NUMERIC(18,0)

	SET @MONTH = MONTH(@TO_DATE)
	SET @YEAR = YEAR(@TO_DATE)

		IF ISNULL(@COST_CENTER,'') = '' OR ISNULL(@COST_CENTER,'') = '0'
				SELECT	@COST_CENTER=COALESCE(@COST_CENTER + '#','') + CAST(CENTER_ID AS VARCHAR(10))
				FROM	T0040_COST_CENTER_MASTER
				WHERE	CMP_ID=@CMP_ID

			SET @COST_CENTER = @COST_CENTER + '#0'
			
		
		IF ISNULL(@BUSINESS_SEGMENT,'') = '' OR ISNULL(@BUSINESS_SEGMENT,'') = '0'
				SELECT	@BUSINESS_SEGMENT=COALESCE(@BUSINESS_SEGMENT + '#','') + CAST(Segment_ID AS VARCHAR(10))
				FROM	T0040_Business_Segment
				WHERE	CMP_ID=@CMP_ID

			SET @BUSINESS_SEGMENT = @BUSINESS_SEGMENT + '#0'


			CREATE TABLE #TEMP_SALARY_JV_REPORT		
			(
				ROW_ID NUMERIC(18, 0) NULL,		
				AD_ID NUMERIC(18,0) NULL,			
				LABELID NUMERIC(18,0),
				LABEL_NAME NVARCHAR(200) NULL,
				LABEL_VALUE VARCHAR(MAX) NULL,			
				SEGMENT_ID NUMERIC(18,0) DEFAULT 0,
				SEGMENT_NAME VARCHAR(MAX) NULL,
				CENTER_ID NUMERIC(18,0) DEFAULT 0,
				CENTER_NAME VARCHAR(MAX),
				GRAND_TOTAL NUMERIC(18,2) DEFAULT 0
			
			)
	
			DECLARE	@SEGMENT_ID NUMERIC(18,0)
			DECLARE @SEGMENT_NAME VARCHAR(MAX)
			DECLARE @AD_ID NUMERIC(18,0)
			DECLARE @NARRATION VARCHAR(MAX)
			DECLARE @CENTER_ID NUMERIC(18,0)
			DECLARE @CENTER_NAME VARCHAR(MAX)
			DECLARE @ACCOUNT VARCHAR(250)
			DECLARE @TEMPCENTERID NUMERIC(18,0)
			DECLARE @TEMPAD_ID NUMERIC(18,0)
			DECLARE @AMOUNT NUMERIC(18,2)
			DECLARE @LABELID INT
			DECLARE @R_ID INT
			DECLARE @CNT INT
			DECLARE @GTOTAL DECIMAL
			DECLARE @LOAN_ID NUMERIC(18,0)

			SET @AMOUNT = 0
			SET @CNT = 1
			
			

			DELETE E 
			FROM #EMP_CONS E
			WHERE NOT EXISTS ( SELECT * FROM T0200_MONTHLY_SALARY M 
							   WHERE E.EMP_ID=M.EMP_ID AND MONTH(MONTH_END_DATE)=@MONTH AND YEAR(MONTH_END_DATE)=@YEAR)
				
			 --select * from #EMP_CONS

				--select I.Branch_ID,Ec.Emp_ID,I.Segment_ID,I.Center_ID
				--FROM
				--		T0080_EMP_MASTER E  WITH (NOLOCK)INNER JOIN 
				--		#EMP_CONS EC ON EC.EMP_ID = E.EMP_ID INNER JOIN
				--		T0095_INCREMENT I WITH (NOLOCK) ON I.INCREMENT_ID = EC.INCREMENT_ID INNER JOIN
				--		T0200_MONTHLY_SALARY MS WITH (NOLOCK) ON E.EMP_ID=MS.EMP_ID INNER JOIN									 									 
				--		T0040_COST_CENTER_MASTER C WITH (NOLOCK) ON  I.CENTER_ID=C.CENTER_ID INNER JOIN
				--		--T9999_AX_MAPPING AM WITH (NOLOCK) ON  AM.CENTER_ID = C.CENTER_ID INNER JOIN
				--		T0040_BUSINESS_SEGMENT B WITH (NOLOCK) ON B.SEGMENT_ID = I.SEGMENT_ID
				--WHERE  E.CMP_ID  = @CMP_ID AND MONTH(MS.MONTH_END_DATE) = @MONTH  AND YEAR(MS.MONTH_END_DATE) = @YEAR 
				--		--AND I.SEGMENT_ID=112 AND I.CENTER_ID in (55,56)	

			DECLARE SALARY_DETAIL CURSOR FOR
				SELECT B.SEGMENT_ID,SEGMENT_NAME,A.AD_ID,A.ACCOUNT,A.NARRATION,A.CENTER_ID,CENTER_NAME,LOAN_ID 
				FROM T0040_BUSINESS_SEGMENT B WITH (NOLOCK) INNER JOIN
					(	SELECT CAST(DATA AS NUMERIC) AS SEGMENT_ID
						FROM	dbo.Split(@BUSINESS_SEGMENT, '#') T
						Where	Data <> ''
					) T1  ON IsNull(B.SEGMENT_ID,0)=T1.SEGMENT_ID CROSS JOIN
					 T9999_AX_MAPPING A WITH (NOLOCK) INNER JOIN
					 T0040_COST_CENTER_MASTER C WITH (NOLOCK) ON C.CENTER_ID = A.CENTER_ID  INNER JOIN
					 (  SELECT CAST(DATA AS NUMERIC) AS Center_ID
						FROM	dbo.Split(@Cost_Center, '#') T
						Where	Data <> ''
					 ) T  ON IsNull(A.Center_ID,0)=T.Center_ID
				WHERE A.CMP_ID = @CMP_ID 
				--AND  B.SEGMENT_ID IN (112,113)
				ORDER BY A.CENTER_ID,Sorting_no
			OPEN SALARY_DETAIL
			FETCH NEXT FROM SALARY_DETAIL INTO @SEGMENT_ID,@SEGMENT_NAME,@AD_ID,@ACCOUNT,@NARRATION,@CENTER_ID,@CENTER_NAME,@LOAN_ID 
			WHILE @@FETCH_STATUS = 0
			BEGIN
					--select @SEGMENT_ID,@SEGMENT_NAME,@AD_ID,@ACCOUNT,@NARRATION,@CENTER_ID,@CENTER_NAME 
					
					IF @TEMPCENTERID <> @CENTER_ID
						BEGIN					
							SET @CNT = @CNT+1
						END

						
						INSERT INTO #TEMP_SALARY_JV_REPORT (ROW_ID,AD_ID,LABELID,LABEL_NAME,LABEL_VALUE,SEGMENT_ID,SEGMENT_NAME,CENTER_ID,CENTER_NAME)
						select isnull(@R_ID,0),@Ad_id,1,'GL_Code'+ '_' + convert(varchar,@Cnt),@Account,@Segment_ID,@Segment_Name,@Center_ID,@Center_Name
						--SELECT ISNULL(@R_ID,0),@AD_ID,1,'GL_Code',@ACCOUNT,@SEGMENT_ID,@SEGMENT_NAME,@CENTER_ID,@CENTER_NAME

						Insert into #Temp_Salary_JV_Report (Row_id,AD_ID,LabelId,Label_Name,Label_Value,Segment_ID,Segment_Name,Center_ID,Center_Name)
						select isnull(@R_ID,0),@Ad_id,2,'Employee_Classification'+ '_' + convert(varchar,@Cnt),@Narration,@Segment_ID,@Segment_Name,@Center_ID,@Center_Name
						----SELECT ISNULL(@R_ID,0),@AD_ID,2,'Employee_Classification',@NARRATION,@SEGMENT_ID,@SEGMENT_NAME,@CENTER_ID,@CENTER_NAME
							
						IF @AD_ID IN (1003,1002,2003,1015,1030,1006,1001,1020)
							BEGIN
							
									SELECT @AMOUNT = CASE WHEN @Ad_ID = 1003 THEN  -- Net Salary
															ISNULL(SUM(Ms.Net_Amount),0)
														  WHEN @AD_ID = 1002 THEN  -- Gross
															ISNULL(SUM(MS.Gross_Salary),0) 
														  WHEN @AD_ID = 2003 THEN  -- Basic
															ISNULL(SUM(MS.Salary_Amount),0) 
														  WHEN @AD_ID = 1015 THEN   --Advance
															ISNULL(SUM(MS.ADVANCE_AMOUNT),0)
														  WHEN @AD_ID = 1030 THEN  --Leave Encashment
															ISNULL(SUM(MS.LEAVE_SALARY_AMOUNT),0)
														  WHEN @AD_ID = 1006 THEN  -- LWF
															ISNULL(SUM(MS.LWF_AMOUNT),0)
														  WHEN @AD_ID = 1001 THEN  -- PT
															ISNULL(SUM(MS.PT_Amount),0)
														  WHEN @AD_ID = 1020 THEN  -- Notice Recovery
															ISNULL(SUM(MS.Short_Fall_Dedu_Amount),0)
														 ELSE 0 END
									FROM
										 T0080_EMP_MASTER E  WITH (NOLOCK)INNER JOIN 
										 #EMP_CONS EC ON EC.EMP_ID = E.EMP_ID INNER JOIN
										 T0095_INCREMENT I WITH (NOLOCK) ON I.INCREMENT_ID = EC.INCREMENT_ID INNER JOIN
										 T0200_MONTHLY_SALARY MS WITH (NOLOCK) ON E.EMP_ID=MS.EMP_ID INNER JOIN									 									 
										 T0040_COST_CENTER_MASTER C WITH (NOLOCK) ON  I.CENTER_ID=C.CENTER_ID INNER JOIN
										 --T9999_AX_MAPPING AM WITH (NOLOCK) ON  AM.CENTER_ID = C.CENTER_ID INNER JOIN
										 T0040_BUSINESS_SEGMENT B WITH (NOLOCK) ON B.SEGMENT_ID = I.SEGMENT_ID
									WHERE  E.CMP_ID  = @CMP_ID AND MONTH(MS.MONTH_END_DATE) = @MONTH  AND YEAR(MS.MONTH_END_DATE) = @YEAR 
										  AND I.SEGMENT_ID=@SEGMENT_ID AND I.CENTER_ID=@CENTER_ID					
										  --AND AM.AD_ID  IN (1003,1002,2003)

							END
						Else IF @AD_ID = 0 and @LOAN_ID <> 0  -- Loan
							BEGIN
								
								SELECT @AMOUNT = ROUND(SUM(ISNULL(MSA.Loan_Amount,0) - ISNULL(AP.Adv_Amount,0)) ,0) 
									FROM
										 T0080_EMP_MASTER E  WITH (NOLOCK)INNER JOIN 
										 #EMP_CONS EC ON EC.EMP_ID = E.EMP_ID INNER JOIN
										 T0095_INCREMENT I WITH (NOLOCK) ON I.INCREMENT_ID = EC.INCREMENT_ID INNER JOIN
										 --T0210_MONTHLY_AD_DETAIL MS WITH (NOLOCK) ON EC.EMP_ID=MS.EMP_ID INNER JOIN										
										 T0040_COST_CENTER_MASTER C WITH (NOLOCK) ON I.CENTER_ID=C.CENTER_ID INNER JOIN
										 T0040_BUSINESS_SEGMENT B WITH (NOLOCK) ON B.SEGMENT_ID = I.SEGMENT_ID INNER JOIN
										 T0200_MONTHLY_SALARY MSA WITH (NOLOCK) ON MSA.Emp_ID = EC.EMP_ID INNER JOIN
										 T0140_LOAN_TRANSACTION LT WITH (NOLOCK) ON LT.Emp_ID = MSA.Emp_ID and LT.For_Date = MSA.MONTH_END_DATE LEFT OUTER JOIN
										 T0100_ADVANCE_PAYMENT AP WITH (NOLOCK) ON AP.Emp_ID = EC.Emp_ID and AP.For_Date = DATEADD(DAY , 1 , @TO_date)
									WHERE  E.CMP_ID  = @CMP_ID AND MONTH(MSA.MONTH_END_DATE) = @MONTH  AND YEAR(MSA.MONTH_END_DATE) = @YEAR 
										 AND I.SEGMENT_ID=@SEGMENT_ID AND I.CENTER_ID=@CENTER_ID	
										 
								
							END
						ELSE
							BEGIN
									SELECT @AMOUNT = ISNULL(SUM(M_AD_AMOUNT),0) 
									FROM
										 T0080_EMP_MASTER E  WITH (NOLOCK)INNER JOIN 
										 #EMP_CONS EC ON EC.EMP_ID = E.EMP_ID INNER JOIN
										 T0095_INCREMENT I WITH (NOLOCK) ON I.INCREMENT_ID = EC.INCREMENT_ID INNER JOIN
										 T0210_MONTHLY_AD_DETAIL MS WITH (NOLOCK) ON EC.EMP_ID=MS.EMP_ID INNER JOIN										
										 T0040_COST_CENTER_MASTER C WITH (NOLOCK) ON I.CENTER_ID=C.CENTER_ID INNER JOIN
										 T0040_BUSINESS_SEGMENT B WITH (NOLOCK) ON B.SEGMENT_ID = I.SEGMENT_ID
									WHERE  E.CMP_ID  = @CMP_ID AND MONTH(MS.TO_DATE) = @MONTH  AND YEAR(MS.TO_DATE) = @YEAR AND MS.AD_ID =@AD_ID 
										 AND I.SEGMENT_ID=@SEGMENT_ID AND I.CENTER_ID=@CENTER_ID		
										 
										  --T0050_AD_MASTER A WITH (NOLOCK) ON A.AD_ID = MS.AD_ID INNER JOIN
										 --T9999_AX_MAPPING AM WITH (NOLOCK) ON MS.AD_ID = AM.AD_ID INNER JOIN
							END
						--select @Amount,@Ad_id,@Segment_ID,@Center_ID

						INSERT INTO #TEMP_SALARY_JV_REPORT (ROW_ID,AD_ID,LABELID,LABEL_NAME,LABEL_VALUE,SEGMENT_ID,SEGMENT_NAME,CENTER_ID,CENTER_NAME)
						select isnull(@R_ID,0),@Ad_id,3,@Center_Name+'_'+convert(varchar,@Cnt),isnull(@Amount,0),@Segment_ID,@Segment_Name,@Center_ID,@Center_Name
						--SELECT ISNULL(@R_ID,0),@AD_ID,3,@CENTER_NAME,ISNULL(@AMOUNT,0),@SEGMENT_ID,@SEGMENT_NAME,@CENTER_ID,@CENTER_NAME
						
					SET @AMOUNT=0						
					SET @TEMPCENTERID = @CENTER_ID
					
					FETCH NEXT FROM SALARY_DETAIL INTO  @SEGMENT_ID,@SEGMENT_NAME,@AD_ID,@ACCOUNT,@NARRATION,@CENTER_ID,@CENTER_NAME,@LOAN_ID 
				END
			CLOSE SALARY_DETAIL
			DEALLOCATE SALARY_DETAIL

			
			--select * from #TEMP_SALARY_JV_REPORT
			--return
			--select Row_Number() Over(order by ad_id asc),* from #Temp_Salary_JV_Report
			--return

			SET @R_ID = 0
			DECLARE SALARY_UPDATEROWID CURSOR FOR
				SELECT AD_ID,LABELID FROM #TEMP_SALARY_JV_REPORT ORDER BY AD_ID
				OPEN SALARY_UPDATEROWID
			FETCH NEXT FROM SALARY_UPDATEROWID INTO @AD_ID,@LABELID
			WHILE @@FETCH_STATUS = 0
			BEGIN
				IF @TEMPAD_ID <> @AD_ID
				BEGIN
					SET @R_ID = @R_ID+1				
				END
				UPDATE #TEMP_SALARY_JV_REPORT 
					SET ROW_ID = @R_ID
				WHERE AD_ID = @AD_ID
							
				SELECT @GTOTAL = SUM((CASE WHEN ISNUMERIC(LABEL_VALUE)=1 THEN CONVERT(MONEY,LABEL_VALUE) ELSE 0 END)) 
				FROM #TEMP_SALARY_JV_REPORT 
				WHERE AD_ID = @AD_ID AND LABELID=3
				
				UPDATE #TEMP_SALARY_JV_REPORT 
					SET GRAND_TOTAL = @GTOTAL 
				WHERE AD_ID = @AD_ID AND LABELID=3

				SET @TEMPAD_ID = @AD_ID

				FETCH NEXT FROM SALARY_UPDATEROWID INTO @AD_ID,@LABELID
			END
			CLOSE SALARY_UPDATEROWID
			DEALLOCATE SALARY_UPDATEROWID

			
			--select * from #Temp_Salary_JV_Report --where ad_id=2003
				
			DECLARE @SQL VARCHAR(MAX)
			DECLARE @COLS VARCHAR(MAX)
			DECLARE @SQL1 VARCHAR(MAX)

			SELECT	 @COLS = COALESCE(@COLS + ',','')  + '[' + LABEL_NAME + '\' + SEGMENT_NAME  + ']' 
			FROM	(
						SELECT	ROW_NUMBER() OVER(PARTITION BY LABELID ORDER BY LABELID,SEGMENT_ID,CENTER_ID,ROW_ID ASC) AS ROW_ID,LABEL_NAME,SEGMENT_NAME,LABELID										
						FROM	#TEMP_SALARY_JV_REPORT	
								
					) PL
			GROUP BY SEGMENT_NAME,LABEL_NAME
			ORDER BY MAX(ROW_ID),MAX(LABELID)		
				--select @COLS

			DECLARE @ALTER_COLS VARCHAR(MAX)
			DECLARE @SUM_COLS VARCHAR(MAX)
					
					
			SELECT	@ALTER_COLS = ISNULL(@ALTER_COLS + ';', '') + 'ALTER TABLE #SALARY_JV_REPORT ADD ' + DATA + ' VARCHAR(50)'
			FROM	DBO.SPLIT(@COLS, ',') T							

			CREATE TABLE #SALARY_JV_REPORT
			(
				--ROW_ID NUMERIC(18,0),
				DR_CR VARCHAR(10),
				PAYOUT_PROVISION VARCHAR(250),
				AD_ID NUMERIC(18,0)
						
			)
			EXEC(@ALTER_COLS);
			ALTER TABLE #SALARY_JV_REPORT ADD GRAND_TOTAL NUMERIC(18,2)

			SET @SQL1 = 'INSERT INTO #SALARY_JV_REPORT
						SELECT	DR_CR,PAYOUT_PROVISION,AD_ID,' + @COLS + ', 0 AS GRAND_TOTAL
						FROM	 
							(								
								SELECT DISTINCT Case when T.Ad_ID In (2003,1030) THEN ''Dr''
													 when T.Ad_Id In (0,1015,1006,1001,1020) THEN ''Cr'' ELSE '''' END AS DR_CR,
										Case when T.Ad_ID In (2003,1030) THEN ''Payout''
													 when T.Ad_Id In (0,1015,1006,1001,1020) THEN ''Deduction'' ELSE '''' END AS PAYOUT_PROVISION,
										T.AD_ID,(LABEL_NAME+''\''+SEGMENT_NAME) AS LABEL_NAME,LABEL_VALUE,ROW_ID
								FROM #TEMP_SALARY_JV_REPORT T 												
										INNER JOIN T9999_AX_MAPPING AM WITH (NOLOCK) ON AM.AD_ID = T.AD_ID	
								WHERE T.AD_ID IN (1003,1002,2003,1015,1030,1006,1001,1020,0)
							) YS 
							PIVOT 
							(
								MAX(LABEL_VALUE) FOR LABEL_NAME IN (' + @COLS + ')
							) PVT'
							
			PRINT @SQL1					
			EXEC (@SQL1)
					

							
			SET @SQL = 'INSERT INTO #SALARY_JV_REPORT
						SELECT	DR_CR,PAYOUT_PROVISION,AD_ID,' + @COLS + ', 0 AS GRAND_TOTAL
						FROM	 
							(								
								SELECT DISTINCT CASE WHEN AD_FLAG = ''I'' and A.AD_NOT_EFFECT_SALARY=0 THEN ''Dr''
													 WHEN AD_FLAG = ''I'' and A.AD_NOT_EFFECT_SALARY=1 THEN ''Cr''
													 WHEN AD_FLAG = ''D''  THEN ''Cr''
													  END AS DR_CR,
										CASE WHEN AD_FLAG = ''I'' aND A.AD_NOT_EFFECT_SALARY=0 THEN ''Payout'' 
											 WHEN AD_FLAG = ''I'' aND A.AD_NOT_EFFECT_SALARY=1 THEN ''Provision'' 
											 WHEN AD_FLAG = ''D''  THEN ''Deduction'' 
										 END AS PAYOUT_PROVISION,
										T.AD_ID,(LABEL_NAME+''\''+SEGMENT_NAME) AS LABEL_NAME,LABEL_VALUE,ROW_ID
								FROM #TEMP_SALARY_JV_REPORT T 
										INNER JOIN T0050_AD_MASTER A WITH (NOLOCK) ON T.AD_ID = A.AD_ID
										INNER JOIN T9999_AX_MAPPING AM WITH (NOLOCK) ON AM.AD_ID = A.AD_ID				
							) YS 
							PIVOT 
							(
								MAX(LABEL_VALUE) FOR LABEL_NAME IN (' + @COLS + ')
							) PVT'
							
							
			PRINT @SQL					
			EXEC (@SQL)		

			UPDATE S SET S.GRAND_TOTAL =T.GRAND_TOTAL
			FROM #SALARY_JV_REPORT S INNER JOIN
			(
					SELECT DISTINCT S.AD_ID,T.GRAND_TOTAL 
					FROM #SALARY_JV_REPORT S INNER JOIN 
							#TEMP_SALARY_JV_REPORT T ON S.AD_ID = T.AD_ID AND T.LABELID=3
			) AS T ON T.AD_ID = S.AD_ID

			


			SELECT Distinct A.Sorting_no,JV.* FROM #SALARY_JV_REPORT JV inner join T9999_AX_MAPPING A on JV.AD_ID = A.Ad_ID
			--where Jv.Ad_id In (2003,4,6,8)
			ORDER BY Sorting_no  ASC
				
				


END
return
