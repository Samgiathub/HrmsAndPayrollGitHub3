

-- =============================================
-- AUTHOR:		<AUTHOR,,GADRIWALA MUSLIM>
-- CREATE DATE: <CREATE DATE,,24112016>
-- DESCRIPTION:	<DESCRIPTION,,TRAINING YEARLY PLAN,EXECUTION DATA>
---25/1/2021 (EDIT BY MEHUL ) (SP WITH NOLOCK)---
-- =============================================
CREATE PROCEDURE [dbo].[HRMS_TRAINING_YEARLY_PLAN_EXECUTION] 
	@CMP_ID NUMERIC(18,0)
   ,@REPORT TINYINT = 0
AS

BEGIN
	-- SET NOCOUNT ON ADDED TO PREVENT EXTRA RESULT SETS FROM
	-- INTERFERING WITH SELECT STATEMENTS.
SET NOCOUNT ON 
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
SET ARITHABORT ON
	
	
CREATE TABLE #HRMS_TRAINING_EXECUTE 
(
	FOR_DATE DATETIME
  ,TRAINING_ID NUMERIC(18,0)
)
DECLARE @CUR_ST_DATE DATETIME
DECLARE @CUR_END_DATE DATETIME
DECLARE @CUR_TRAINING_ID NUMERIC(18,0)
DECLARE @CUR_For_Date DATETIME
		DECLARE CURTRAINGDATE CURSOR FOR SELECT HTS.FROM_DATE AS ST_DATE,HTS.TO_DATE AS END_DATE,HTA.TRAINING_ID 
		FROM T0120_HRMS_TRAINING_SCHEDULE HTS WITH (NOLOCK) INNER JOIN T0120_HRMS_TRAINING_APPROVAL HTA WITH (NOLOCK) ON HTS.TRAINING_APP_ID = HTA.TRAINING_APP_ID
			WHERE HTS.CMP_ID = @CMP_ID 
		OPEN CURTRAINGDATE
				FETCH NEXT FROM CURTRAINGDATE INTO @CUR_ST_DATE,@CUR_END_DATE,@CUR_TRAINING_ID		
				WHILE @@FETCH_STATUS = 0
					BEGIN
									SET @CUR_FOR_DATE = @CUR_ST_DATE
									
									WHILE  @CUR_FOR_DATE <= @CUR_END_DATE
										BEGIN
											INSERT INTO #HRMS_TRAINING_EXECUTE(FOR_DATE,TRAINING_ID)
											SELECT 	@CUR_FOR_DATE,@CUR_TRAINING_ID
											
											SET @CUR_FOR_DATE	= DATEADD(D,1,@CUR_FOR_DATE)							
										END
					
							FETCH NEXT FROM CURTRAINGDATE INTO @CUR_ST_DATE,@CUR_END_DATE,@CUR_TRAINING_ID		
					END
		CLOSE CURTRAINGDATE
		deallocate CURTRAINGDATE

		
	IF @REPORT = 1
		BEGIN
			SELECT  CM.Cmp_Name,CM.Cmp_Address,TY.TRAINING_DATE AS TRAINING_DATE ,TM.TRAINING_NAME,
			CASE WHEN ISNULL(HTC.TRAINING_ID,0) = TY.TRAINING_ID AND HTC.FOR_DATE = TY.TRAINING_DATE  
			THEN 'On scheduled event' ELSE CASE WHEN  TY.TRAINING_DATE > GETDATE() THEN 'Upcoming event' ELSE 'Cancelled event' END  END  AS STATUS
			FROM T0052_HRMS_TRAINING_EVENT_CALENDER_YEARLY TY WITH (NOLOCK)
			INNER JOIN T0040_HRMS_TRAINING_MASTER TM WITH (NOLOCK) ON TY.TRAINING_ID = TM.TRAINING_ID 
			LEFT OUTER JOIN T0030_HRMS_TRAINING_CATEGORY TC WITH (NOLOCK) ON TC.TRAINING_CATEGORY_ID = TM.TRAINING_CATEGORY_ID
			INNER JOIN T0010_COMPANY_MASTER CM WITH (NOLOCK) ON CM.CMP_ID = TM.CMP_ID
			LEFT OUTER JOIN #HRMS_TRAINING_EXECUTE HTC ON HTC.TRAINING_ID = TY.TRAINING_ID AND HTC.FOR_DATE = TY.TRAINING_DATE
			WHERE TY.CMP_ID = @CMP_ID
			UNION 
			SELECT  CM.Cmp_Name,CM.Cmp_Address,HTC.FOR_DATE AS TRAINING_DATE  ,TM.TRAINING_NAME ,
			CASE WHEN ISNULL(HTC.TRAINING_ID,0) = TY.TRAINING_ID AND HTC.FOR_DATE = TY.TRAINING_DATE  
			THEN 'On scheduled event'  ELSE 'UnPlanned/Rescheduled event'  END AS STATUS  
			FROM #HRMS_TRAINING_EXECUTE HTC 
			INNER JOIN T0040_HRMS_TRAINING_MASTER TM WITH (NOLOCK) ON HTC.TRAINING_ID = TM.TRAINING_ID 
			LEFT OUTER JOIN T0030_HRMS_TRAINING_CATEGORY TC WITH (NOLOCK) ON TC.TRAINING_CATEGORY_ID = TM.TRAINING_CATEGORY_ID
			LEFT OUTER JOIN T0052_HRMS_TRAINING_EVENT_CALENDER_YEARLY TY WITH (NOLOCK)  ON HTC.TRAINING_ID = TY.TRAINING_ID AND HTC.FOR_DATE = TY.TRAINING_DATE
			INNER JOIN T0010_COMPANY_MASTER CM WITH (NOLOCK) ON CM.CMP_ID = TM.CMP_ID
			WHERE TM.CMP_ID = @CMP_ID  and FOR_DATE  <= GETDATE()
			ORDER BY TY.TRAINING_DATE
		END		
	ELSE
		BEGIN
			-- INSERT STATEMENTS FOR PROCEDURE HERE
			SELECT TY.EVENT_ID,TY.TRAINING_ID,TY.TRAINING_DATE ,TM.TRAINING_NAME,
			CASE WHEN ISNULL(HTC.TRAINING_ID,0) = TY.TRAINING_ID AND HTC.FOR_DATE = TY.TRAINING_DATE  
			THEN 1 ELSE 0 END  AS IS_EXECUTE  
			FROM T0052_HRMS_TRAINING_EVENT_CALENDER_YEARLY TY  WITH (NOLOCK)
			INNER JOIN T0040_HRMS_TRAINING_MASTER TM WITH (NOLOCK) ON TY.TRAINING_ID = TM.TRAINING_ID 
			INNER JOIN T0030_HRMS_TRAINING_CATEGORY TC WITH (NOLOCK) ON TC.TRAINING_CATEGORY_ID = TM.TRAINING_CATEGORY_ID
			LEFT OUTER JOIN #HRMS_TRAINING_EXECUTE HTC WITH (NOLOCK) ON HTC.TRAINING_ID = TY.TRAINING_ID AND HTC.FOR_DATE = TY.TRAINING_DATE
			WHERE TY.CMP_ID = @CMP_ID
			UNION 
			SELECT ISNULL(TY.EVENT_ID,0) AS EVENT_ID,HTC.TRAINING_ID,HTC.FOR_DATE AS TRAINING_DATE ,TM.TRAINING_NAME,
			CASE WHEN ISNULL(HTC.TRAINING_ID,0) = TY.TRAINING_ID AND HTC.FOR_DATE = TY.TRAINING_DATE  
			THEN 1  ELSE 2 END  AS IS_EXECUTE  
			FROM #HRMS_TRAINING_EXECUTE HTC 
			INNER JOIN T0040_HRMS_TRAINING_MASTER TM WITH (NOLOCK) ON HTC.TRAINING_ID = TM.TRAINING_ID 
			INNER JOIN T0030_HRMS_TRAINING_CATEGORY TC WITH (NOLOCK) ON TC.TRAINING_CATEGORY_ID = TM.TRAINING_CATEGORY_ID
			LEFT OUTER JOIN T0052_HRMS_TRAINING_EVENT_CALENDER_YEARLY TY WITH (NOLOCK) ON HTC.TRAINING_ID = TY.TRAINING_ID AND HTC.FOR_DATE = TY.TRAINING_DATE
			WHERE TM.CMP_ID = @CMP_ID and FOR_DATE  <= GETDATE()
			ORDER BY TY.TRAINING_DATE	
	  END
END

