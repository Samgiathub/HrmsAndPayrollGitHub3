

-----------------------------------------------

--ADDED JIMIT 30062018------
---Overtime Register ENPAY---
---29/1/2021 (EDIT BY MEHUL ) (SP WITH NOLOCK)---
---------------------------------------------
CREATE PROCEDURE [dbo].[P_RPT_EMP_OVERTIME_REGISTER]      
     @COMPANY_ID	NUMERIC  
	,@FROM_DATE		DATETIME
	,@TO_DATE 		DATETIME
	,@BRANCH_ID		NUMERIC	
	,@GRADE_ID 		NUMERIC
	,@TYPE_ID 		NUMERIC
	,@DEPT_ID 		NUMERIC
	,@DESIG_ID 		NUMERIC
	,@EMP_ID 		NUMERIC
	,@CONSTRAINT	VARCHAR(MAX)
	,@CAT_ID        NUMERIC = 0	
	,@SEGMENT_ID NUMERIC = 0 
	,@VERTICAL NUMERIC = 0 
	,@SUBVERTICAL NUMERIC = 0 
	,@SUBBRANCH NUMERIC = 0 
	,@SUMMARY VARCHAR(MAX)=''
	,@PBRANCH_ID VARCHAR(200) = '0'
	--,@ORDER_BY   VARCHAR(30) = 'CODE'     
    
    
AS
SET NOCOUNT ON 
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
SET ARITHABORT ON
	
	CREATE TABLE #EMP_CONS 
	(      
		EMP_ID NUMERIC ,     
		BRANCH_ID NUMERIC,
		INCREMENT_ID NUMERIC
	)	
	EXEC SP_RPT_FILL_EMP_CONS	@COMPANY_ID,@FROM_DATE,@TO_DATE,@BRANCH_ID,@CAT_ID,@GRADE_ID,@TYPE_ID,@DEPT_ID,
								@DESIG_ID,@EMP_ID,@CONSTRAINT,0,0,0,0,0,0,0,0,0,0,0,0  
								
	
	
	CREATE TABLE #OVERTIME_REGISTER
	(
		
	    CMP_ID			NUMERIC(18,0)
	   ,EMP_ID			NUMERIC(18,0) PRIMARY KEY
	   ,CENTER_CODE		NVARCHAR(100)
	   ,EMP_CODE	VARCHAR(50)
	   ,EMP_FULL_NAME	VARCHAR(250)	   
	   ,DEPARTMENT		NVARCHAR(100)	   
	   ,BRANCH_ID       NUMERIC(18,0)
	   ,BRANCH_NAME	    VARCHAR(250)	   
	   ,DESIGNATION		NVARCHAR(100)
	   ,GRADE			NVARCHAR(100)
	   ,TYPENAME		NVARCHAR(100)
	   ,CATEGORY		NVARCHAR(100)
	   ,DIVISION		NVARCHAR(100)
	   ,SUB_VERTICAL	NVARCHAR(100)
	   ,SUB_BRANCH		NVARCHAR(100)
	   ,SEGMENT_NAME	NVARCHAR(100)
	   
	)
	
	
	INSERT INTO #OVERTIME_REGISTER 
	SELECT		E.CMP_ID,E.EMP_ID,CC.CENTER_CODE,E.ALPHA_EMP_CODE AS EMP_CODE ,ISNULL(E.EMPNAME_ALIAS_SALARY,E.EMP_FULL_NAME),
				DM.DEPT_NAME,BM.BRANCH_ID,BM.BRANCH_NAME,
				DNM.DESIG_NAME,GA.GRD_NAME,TM.TYPE_NAME,CT.CAT_NAME AS CATEGORY,VT.VERTICAL_NAME,ST.SUBVERTICAL_NAME,SB.SUBBRANCH_NAME,
				BSG.SEGMENT_NAME
	FROM		T0080_EMP_MASTER E WITH (NOLOCK)	INNER JOIN
				( 
					SELECT	I.EMP_ID,I.BASIC_SALARY,I.CTC,I.INC_BANK_AC_NO,PAYMENT_MODE,I.BRANCH_ID,I.GRD_ID,I.DEPT_ID,
							I.DESIG_ID,I.TYPE_ID,I.CAT_ID,I.VERTICAL_ID,I.SUBVERTICAL_ID,I.SUBBRANCH_ID,I.SEGMENT_ID,I.CENTER_ID 
					FROM	T0095_INCREMENT I WITH (NOLOCK) INNER JOIN 
							( 
								SELECT	MAX(INCREMENT_ID) AS INCREMENT_ID , EMP_ID 
								FROM	T0095_INCREMENT WITH (NOLOCK)
								WHERE	INCREMENT_EFFECTIVE_DATE <= @TO_DATE AND CMP_ID = @COMPANY_ID
								GROUP BY EMP_ID 
							 ) QRY ON	I.EMP_ID = QRY.EMP_ID	AND I.INCREMENT_ID = QRY.INCREMENT_ID 
				 )INC_QRY ON E.EMP_ID = INC_QRY.EMP_ID INNER JOIN 
				 #EMP_CONS EC ON E.EMP_ID = EC.EMP_ID LEFT OUTER JOIN 
				 T0030_BRANCH_MASTER BM WITH (NOLOCK) ON INC_QRY.BRANCH_ID = BM.BRANCH_ID	LEFT OUTER JOIN 
				 T0040_DEPARTMENT_MASTER DM WITH (NOLOCK) ON INC_QRY.DEPT_ID = DM.DEPT_ID	left outer join 
				 T0040_DESIGNATION_MASTER dnm WITH (NOLOCK) on Inc_Qry.Desig_Id = dnm.Desig_ID left outer join 
				 T0040_TYPE_MASTER tm WITH (NOLOCK) on Inc_Qry.Type_ID = tm.Type_ID LEFT OUTER JOIN 
				 T0030_CATEGORY_MASTER CT WITH (NOLOCK) on CT.Cat_ID=Inc_Qry.Cat_Id LEFT OUTER JOIN 
				 T0040_VERTICAL_SEGMENT VT WITH (NOLOCK) ON VT.VERTICAL_ID=INC_QRY.VERTICAL_ID LEFT OUTER JOIN 
				 T0050_SUBVERTICAL ST WITH (NOLOCK) ON ST.SUBVERTICAL_ID=INC_QRY.SUBVERTICAL_ID LEFT OUTER JOIN 
				 T0050_SUBBRANCH SB WITH (NOLOCK) ON SB.SUBBRANCH_ID=INC_QRY.SUBBRANCH_ID LEFT OUTER JOIN 
				 T0040_BUSINESS_SEGMENT BSG WITH (NOLOCK) ON BSG.SEGMENT_ID=INC_QRY.SEGMENT_ID LEFT OUTER JOIN 
				 T0040_COST_CENTER_MASTER CC WITH (NOLOCK) ON CC.CENTER_ID = INC_QRY.CENTER_ID LEFT OUTER JOIN 
				 T0040_GRADE_MASTER GA WITH (NOLOCK) ON INC_QRY.GRD_ID = GA.GRD_ID--INNER JOIN 
				 --T0200_MONTHLY_SALARY MS ON MS.EMP_ID = EC.EMP_ID AND MONTH(MONTH_END_DATE) = MONTH(@TO_DATE) AND 
				 --YEAR(MONTH_END_DATE) = YEAR(@TO_DATE) AND ISNULL(IS_FNF,0) = 0
				
				
			----------------------GETTING OT HOURS------------------------
			DECLARE @TEST AS VARCHAR(4000)
			SET @TEST = 'ALTER TABLE  #OVERTIME_REGISTER  ADD ARREAR_OT_HOURS VARCHAR(20) COLLATE SQL_LATIN1_GENERAL_CP1_CI_AS;'			
			EXEC(@TEST)
			
			DECLARE @DURATION AS VARCHAR(MAX)
			DECLARE @FOR_DATE AS VARCHAR(10)
			DECLARE @INSERT_WEEKDAY VARCHAR(MAX)
			DECLARE @VALUE_WEEKDAY VARCHAR(MAX)
			DECLARE @WEEKDAY VARCHAR(2)
				
			DECLARE @CODE AS VARCHAR(20)
			DECLARE @QRY AS VARCHAR(4000)
			DECLARE	@FORDATE AS NUMERIC(18,0)
			
			DECLARE @MONTH  AS VARCHAR(5)
			DECLARE @YEAR	AS VARCHAR(5)
			
			Declare @Temp_to_date dateTime
			set @Temp_to_date = @FROM_DATE
			
			SET @MONTH = MONTH(@FROM_DATE)
			SET @YEAR = YEAR(@FROM_DATE)
			

			SET @INSERT_WEEKDAY = ''
			 SET @VALUE_WEEKDAY = ''
			
							SET @FORDATE = DAy(@FROM_DATE)	
							WHILE @Temp_to_date <= @To_date
								BEGIN								
										SET @FOR_DATE =  @FORDATE 
										
										SET @TEST = 'ALTER TABLE  #OVERTIME_REGISTER ADD [' + @FOR_DATE + '-' + LEFT(DATENAME(MONTH,@Temp_to_date),3) + '] VARCHAR(10) COLLATE SQL_LATIN1_GENERAL_CP1_CI_AS DEFAULT '''' WITH VALUES'
										EXEC(@TEST) 
										--PRINT @TEST              				
										SET @TEST=''
										
										SET @FORDATE = Day(DAteAdd(d,1,@Temp_to_date))
										SET @Temp_to_date = DAteAdd(d,1,@Temp_to_date)
								END
						
						
								
			----------------------------------------ENDED----------------------------------------------------
			SET @TEST = 'ALTER TABLE  #OVERTIME_REGISTER ADD TOTAL_HOURS VARCHAR(20) COLLATE SQL_LATIN1_GENERAL_CP1_CI_AS DEFAULT '''' WITH VALUES;
						 ALTER TABLE  #OVERTIME_REGISTER ADD TOTAL_ARREAR_HOURS VARCHAR(20) COLLATE SQL_LATIN1_GENERAL_CP1_CI_AS DEFAULT '''' WITH VALUES;
						 ALTER TABLE  #OVERTIME_REGISTER ADD PH_HOURS VARCHAR(20) COLLATE SQL_LATIN1_GENERAL_CP1_CI_AS DEFAULT '''' WITH VALUES;
						 ALTER TABLE  #OVERTIME_REGISTER ADD PH_AMOUNT NUMERIC(18,2);
						 ALTER TABLE  #OVERTIME_REGISTER ADD GRAND_TOTAL_HOURS VARCHAR(25) COLLATE SQL_LATIN1_GENERAL_CP1_CI_AS DEFAULT '''' WITH VALUES;
						 ALTER TABLE  #OVERTIME_REGISTER ADD SETOFF_HOURS VARCHAR(20) COLLATE SQL_LATIN1_GENERAL_CP1_CI_AS DEFAULT '''' WITH VALUES;
						 ALTER TABLE  #OVERTIME_REGISTER ADD NET_HOURS_PAYABLE VARCHAR(20) COLLATE SQL_LATIN1_GENERAL_CP1_CI_AS DEFAULT '''' WITH VALUES;
						 ALTER TABLE  #OVERTIME_REGISTER ADD TOTAL_AMOUNT NUMERIC(18,2);
						 ALTER TABLE  #OVERTIME_REGISTER ADD SIGNATURE VARCHAR(20) COLLATE SQL_LATIN1_GENERAL_CP1_CI_AS;'
			
			EXEC(@TEST)
			
			CREATE TABLE #DATA         
			(         
			   EMP_ID   NUMERIC ,         
			   FOR_DATE DATETIME,        
			   DURATION_IN_SEC NUMERIC,        
			   SHIFT_ID NUMERIC ,        
			   SHIFT_TYPE NUMERIC ,        
			   EMP_OT  NUMERIC ,        
			   EMP_OT_MIN_LIMIT NUMERIC,        
			   EMP_OT_MAX_LIMIT NUMERIC,        
			   P_DAYS  NUMERIC(12,3) DEFAULT 0,        
			   OT_SEC  NUMERIC DEFAULT 0  ,
			   IN_TIME DATETIME,
			   SHIFT_START_TIME DATETIME,
			   OT_START_TIME NUMERIC DEFAULT 0,
			   SHIFT_CHANGE TINYINT DEFAULT 0,
			   FLAG INT DEFAULT 0,
			   WEEKOFF_OT_SEC  NUMERIC DEFAULT 0,
			   HOLIDAY_OT_SEC  NUMERIC DEFAULT 0,
			   CHK_BY_SUPERIOR NUMERIC DEFAULT 0,
			   IO_TRAN_ID	   NUMERIC DEFAULT 0, 
			   OUT_TIME DATETIME,
			   SHIFT_END_TIME DATETIME,			
			   OT_END_TIME NUMERIC DEFAULT 0,	
			   WORKING_HRS_ST_TIME TINYINT DEFAULT 0, 
			   WORKING_HRS_END_TIME TINYINT DEFAULT 0, 
			   GATEPASS_DEDUCT_DAYS NUMERIC(18,2) DEFAULT 0 
		   )    
		   
		  
		DECLARE @OT_HOURS	AS NUMERIC(18,2)
		EXEC SP_CALCULATE_PRESENT_DAYS	@COMPANY_ID,@FROM_DATE,@TO_DATE,@BRANCH_ID,@CAT_ID,@GRADE_ID,@TYPE_ID,
										@DEPT_ID,@DESIG_ID,@EMP_ID,@CONSTRAINT,4
			 
		
	IF OBJECT_ID('tempdb..#EMP_GEN_SETTINGS') IS NULL
		BEGIN
			CREATE TABLE #EMP_GEN_SETTINGS
			(
				EMP_ID		NUMERIC PRIMARY KEY,
				BRANCH_ID	NUMERIC,
				Is_Auto_OT	tinyint
			) 
		END

		INSERT INTO #EMP_GEN_SETTINGS
		SELECT  EMP_ID,EC.BRANCH_ID,G.is_OT_Auto_Calc
		FROM	#EMP_CONS EC INNER JOIN
				T0040_GENERAL_SETTING G WITH (NOLOCK) ON EC.BRANCH_ID=G.BRANCH_ID INNER JOIN
				(
					SELECT	MAX(GEN_ID) AS GEN_ID,G1.BRANCH_ID
					FROM	T0040_GENERAL_SETTING G1 WITH (NOLOCK) INNER JOIN 
							(
								SELECT	MAX(FOR_DATE) AS FOR_DATE , BRANCH_ID
								FROM	T0040_GENERAL_SETTING G2 WITH (NOLOCK)
								WHERE	G2.For_Date <= @TO_DATE
								GROUP	BY G2.Branch_ID
							) G2 ON G1.Branch_ID=G2.Branch_ID AND G1.For_Date=G2.FOR_DATE
					GROUP BY G1.Branch_ID
				) G1 ON G.Gen_ID=G1.GEN_ID AND G.Branch_ID=G1.Branch_ID

				
		UPDATE	C
		SET		--C.PH_AMOUNT = Q.M_HO_OT_AMOUNT,			
				C.SETOFF_HOURS = ISNULL(Q.SETOFF_HOURS,'')
		FROM	#OVERTIME_REGISTER C INNER JOIN
				(
					SELECT		ISNULL(M_HO_OT_AMOUNT,0) AS M_HO_OT_AMOUNT,ISNULL(OT_AMOUNT,0) AS OT_AMOUNT,EMP_ID,
								ISNULL(OT_ADJ_AGAINST_ABSENT_HOURS,0) AS SETOFF_HOURS
					FROM 		T0200_MONTHLY_SALARY WITH (NOLOCK)
					WHERE		MONTH(Month_End_Date) = MONTH(@TO_DATE) AND	
								YEAR(Month_End_Date) = YEAR(@TO_DATE)												
				)Q ON Q.EMP_ID = C.EMP_ID
		
		UPDATE	C
		SET		C.TOTAL_AMOUNT = Round(Q.OT_AMOUNT,0)
		FROM	#OVERTIME_REGISTER C INNER JOIN
				(
					SELECT  ISNULL(MS.M_AD_AMOUNT,0) as OT_AMOUNT,C.EMP_ID
					FROM	#OVERTIME_REGISTER C LEFT OUTER JOIN 
							T0210_MONTHLY_AD_DETAIL MS WITH (NOLOCK) ON C.EMP_ID = MS.Emp_ID INNER JOIN 
							T0050_AD_MASTER A WITH (NOLOCK) ON MS.AD_ID = A.AD_ID AND MS.CMP_ID = A.CMP_ID
					WHERE	MS.CMP_ID = @COMPANY_ID AND MONTH(MS.TO_DATE) = MONTH(@TO_DATE) AND YEAR(MS.TO_DATE) = YEAR(@TO_DATE)
							AND AD_ACTIVE = 1 AND ISNULL(MS.M_AD_NOT_EFFECT_SALARY,0) = 1 
							AND MS.S_SAL_TRAN_ID IS NULL  ANd UPPER(A.AD_CALCULATE_ON) = 'TRANSFER OT'					
				)Q ON Q.EMP_ID = C.EMP_ID			
	   
	
		UPDATE	C
		SET		C.TOTAL_HOURS = CASE WHEN CAST(DBO.F_RETURN_HOURS(ISNULL(Q.OT_SEC,0) + ISNULL(Q.WEEKOFF_OT_SEC,0) + ISNULL(Q.HOLIDAY_OT_SEC,0)) AS VARCHAR(20)) <> '00:00' THEN CAST(DBO.F_RETURN_HOURS(ISNULL(Q.OT_SEC,0) + ISNULL(Q.WEEKOFF_OT_SEC,0) + ISNULL(Q.HOLIDAY_OT_SEC,0)) AS VARCHAR(20)) ELSE '' END,
				C.PH_HOURS =	CASE WHEN CAST(DBO.F_RETURN_HOURS(Q.HOLIDAY_OT_SEC) AS VARCHAR(20)) <> '00:00' THEN CAST(DBO.F_RETURN_HOURS(Q.HOLIDAY_OT_SEC) AS VARCHAR(20)) ELSE '' END,
				C.GRAND_TOTAL_HOURS = CASE WHEN CAST(DBO.F_RETURN_HOURS((ISNULL(Q.OT_SEC,0) +  ISNULL(Q.WEEKOFF_OT_SEC,0))) AS VARCHAR(20)) <> '00:00' THEN CAST(DBO.F_RETURN_HOURS((ISNULL(Q.OT_SEC,0) +  ISNULL(Q.WEEKOFF_OT_SEC,0))) AS VARCHAR(20)) ELSE '' END,
				C.NET_HOURS_PAYABLE = CASE WHEN CAST(DBO.F_RETURN_HOURS(((ISNULL(Q.OT_SEC,0) +  ISNULL(Q.WEEKOFF_OT_SEC,0) ) - ISNULL(DBO.F_Return_Sec(C.SETOFF_HOURS),0))) AS VARCHAR(20)) <> '00:00' THEN CAST(DBO.F_RETURN_HOURS(((ISNULL(Q.OT_SEC,0) +  ISNULL(Q.WEEKOFF_OT_SEC,0) ) - ISNULL(DBO.F_Return_Sec(C.SETOFF_HOURS),0))) AS VARCHAR(20)) ELSE '' END
		FROM	#OVERTIME_REGISTER C INNER JOIN
				(
					SELECT		(SUM(OT_SEC)) AS OT_SEC,
								 SUM(WEEKOFF_OT_SEC) AS  WEEKOFF_OT_SEC,								
								(SUM(HOLIDAY_OT_SEC)) AS HOLIDAY_OT_SEC
								,D.EMP_ID
					FROM 		#DATA D Inner JOin
								#EMP_GEN_SETTINGS EGS ON EGs.Emp_Id = D.Emp_Id		
					Where		IS_Auto_OT = 1								
					GROUP BY  	D.EMP_ID
				)Q ON Q.EMP_ID = C.EMP_ID
		
		UPDATE	C
		SET		C.TOTAL_HOURS = CASE WHEN CAST(DBO.F_RETURN_HOURS(ISNULL(Q.OT_SEC,0) + ISNULL(Q.WEEKOFF_OT_SEC,0) + ISNULL(Q.HOLIDAY_OT_SEC,0)) AS VARCHAR(20)) <> '00:00' THEN CAST(DBO.F_RETURN_HOURS(ISNULL(Q.OT_SEC,0) + ISNULL(Q.WEEKOFF_OT_SEC,0) + ISNULL(Q.HOLIDAY_OT_SEC,0)) AS VARCHAR(20)) ELSE '' END,
				C.PH_HOURS =	CASE WHEN CAST(DBO.F_RETURN_HOURS(Q.HOLIDAY_OT_SEC) AS VARCHAR(20)) <> '00:00' THEN CAST(DBO.F_RETURN_HOURS(Q.HOLIDAY_OT_SEC) AS VARCHAR(20)) ELSE '' END,
				C.GRAND_TOTAL_HOURS = CASE WHEN CAST(DBO.F_RETURN_HOURS((ISNULL(Q.OT_SEC,0) +  ISNULL(Q.WEEKOFF_OT_SEC,0))) AS VARCHAR(20)) <> '00:00' THEN CAST(DBO.F_RETURN_HOURS((ISNULL(Q.OT_SEC,0) +  ISNULL(Q.WEEKOFF_OT_SEC,0))) AS VARCHAR(20)) ELSE '' END,
				C.NET_HOURS_PAYABLE = CASE WHEN CAST(DBO.F_RETURN_HOURS(((ISNULL(Q.OT_SEC,0) +  ISNULL(Q.WEEKOFF_OT_SEC,0) ) - ISNULL(DBO.F_Return_Sec(C.SETOFF_HOURS),0))) AS VARCHAR(20)) <> '00:00' THEN CAST(DBO.F_RETURN_HOURS(((ISNULL(Q.OT_SEC,0) +  ISNULL(Q.WEEKOFF_OT_SEC,0) ) - ISNULL(DBO.F_Return_Sec(C.SETOFF_HOURS),0))) AS VARCHAR(20)) ELSE '' END
		FROM	#OVERTIME_REGISTER C INNER JOIN
				(
					SELECT		(SUM(Approved_OT_Sec)) AS OT_SEC,
								 SUM(Approved_WO_OT_Sec) AS  WEEKOFF_OT_SEC,								
								(SUM(Approved_HO_OT_Sec)) AS HOLIDAY_OT_SEC
								,Oa.EMP_ID
					FROM 		t0160_OT_Approval OA WITH (NOLOCK) Inner JOin
								#EMP_GEN_SETTINGS EGS ON EGs.Emp_Id = OA.Emp_Id									
					WHERE		Oa.Is_Approved = 1 and IS_Auto_OT = 0 And OA.For_Date Between @FROM_DATE And @TO_DATE
					GROUP BY  	Oa.EMP_ID
				)Q ON Q.EMP_ID = C.EMP_ID 
		
		
		INSERT INTO #OVERTIME_REGISTER(EMP_ID,EMP_FULL_NAME,TOTAL_HOURS,TOTAL_ARREAR_HOURS,PH_HOURS,PH_AMOUNT,GRAND_TOTAL_HOURS,SETOFF_HOURS,NET_HOURS_PAYABLE,TOTAL_AMOUNT)
		SELECT * FROM (
					SELECT 99999 as EMP_ID,'TOTAL' As EMP_FULL_NAME,dbo.F_Return_Hours(SUM(ISnull(dbo.F_Return_Sec(TOTAL_HOURS),0))) AS TOTAL_HOURS,
								   dbo.F_Return_Hours(SUM(ISnull(dbo.F_Return_Sec(TOTAL_ARREAR_HOURS),0))) AS TOTAL_ARREAR_HOURS,
								   dbo.F_Return_Hours(SUM(ISnull(dbo.F_Return_Sec(PH_HOURS),0))) AS PH_HOURS,
								   SUM(IsNULL(PH_AMOUNT,0)) as PH_AMOUNT,dbo.F_Return_Hours(SUM(ISnull(dbo.F_Return_Sec(GRAND_TOTAL_HOURS),0))) AS GRAND_TOTAL_HOURS,
								   dbo.F_Return_Hours(SUM(ISnull(dbo.F_Return_Sec(SETOFF_HOURS),0))) AS SETOFF_HOURS,
								   dbo.F_Return_Hours(SUM(ISnull(dbo.F_Return_Sec(NET_HOURS_PAYABLE),0))) as NET_HOURS_PAYABLE,SUM(ISNULL(TOTAL_AMOUNT,0)) as TOTAL_AMOUNT
								   
					FROM #OVERTIME_REGISTER
			 )Q
		
		
		set @Temp_to_date = @FROM_DATE	
		SET @FOR_DATE = DAy(@FROM_DATE)
		
		WHILE @Temp_to_date <= @To_date
			BEGIN
											
				--SET @FOR_DATE =  @FORDATE 
				SET @INSERT_WEEKDAY = '[' + @FOR_DATE + '-' +  LEFT(DATENAME(MONTH,@Temp_to_date),3) + ']'
				SET @MONTH = Month(@Temp_to_date)
				SET @YEAR = year(@Temp_to_date)

																							
--WHen Auto OT Approval is set to 1 then take OT hours directly from #Data																							
				SET @QRY = 'UPDATE	C 
							SET	' + @INSERT_WEEKDAY + ' = CASE WHEN Q.DURATION <> ''00:00'' THEN Q.DURATION ELSE '''' END   --Replace(Q.DURATION,''00:00'','''')
							FROM	#OVERTIME_REGISTER C INNER JOIN	
									(
									SELECT	CAST(DBO.F_RETURN_HOURS(ISNULL(OT_SEC,0) + ISNULL(WEEKOFF_OT_SEC,0) + ISNULL(HOLIDAY_OT_SEC,0))AS VARCHAR(20)) 											
											AS DURATION,D.EMP_ID
									FROM	#DATA  D Inner JOin
											#EMP_GEN_SETTINGS EGS ON EGs.Emp_Id = D.Emp_Id											
									WHERE	IS_Auto_OT = 1 and DATEPART(DAY,FOR_DATE) = ' + @FOR_DATE  + '	
											AND MONTH(FOR_DATE) = ' + @MONTH + '
											AND YEAR(FOR_DATE) = ' + @YEAR + '						
									)Q ON Q.EMP_ID = C.EMP_ID'		
									--PRINT @QRY
							EXEC (@QRY)	
							---Ended
							----When Auto OT Approval is set to 0 then take OT hours from OT_approval_Table																						
							SET @QRY = 'UPDATE	C 
										SET	' + @INSERT_WEEKDAY + ' = CASE WHEN Q.DURATION <> ''00:00'' THEN Q.DURATION ELSE '''' END   --Replace(Q.DURATION,''00:00'','''')
										FROM	#OVERTIME_REGISTER C INNER JOIN	
												(
												SELECT	CAST(DBO.F_RETURN_HOURS(ISNULL(APPROVED_OT_SEC,0) + ISNULL(APPROVED_WO_OT_SEC,0) + ISNULL(APPROVED_HO_OT_SEC,0))AS VARCHAR(20)) 
														AS DURATION,OA.EMP_ID
												FROM	t0160_OT_Approval OA WITH (NOLOCK) Inner JOin
														#EMP_GEN_SETTINGS EGS ON EGs.Emp_Id = OA.Emp_Id																		
												WHERE	Oa.Is_Approved = 1 and IS_Auto_OT = 0 and DATEPART(DAY,FOR_DATE) = ' + @FOR_DATE  + '															
											AND MONTH(FOR_DATE) = ' + @MONTH + '
											AND YEAR(FOR_DATE) = ' + @YEAR + '						
									)Q ON Q.EMP_ID = C.EMP_ID'
																
				--REPLACE(dbo.f_return_HOURs(dbo.f_return_sec(format((CAST(Approved_OT_Hours as decimal(10,2))),''00.00'')) + dbo.f_return_sec(format((CAST(Approved_WO_OT_Hours as decimal(10,2))),''00.00'')) + dbo.f_return_sec(format((CAST(Approved_HO_OT_Hours as decimal(10,2))),''00.00''))),'':'',''.'') 
				
				--PRINT @QRY
				EXEC (@QRY)	
				---Ended

				--WHen Auto OT Approval is set to 1 then take OT hours directly from #Data			
	
				SET @QRY = 'UPDATE	C 
							SET	' + @INSERT_WEEKDAY + ' = CASE WHEN Q.DURATION <> ''00:00'' THEN Q.DURATION ELSE '''' END  --Replace(Q.DURATION,''00:00'','''')
							FROM	#OVERTIME_REGISTER C INNER JOIN	
									(
										SELECT	CAST(DBO.F_RETURN_HOURS(SUM(ISNULL(OT_SEC,0)+ ISNULL(WEEKOFF_OT_SEC,0) + ISNULL(HOLIDAY_OT_SEC,0))) AS VARCHAR(20)) AS DURATION
												,MONTH(FOR_DATE) AS Month,YEAR(FOR_DATE) AS YEAR
										FROM	#DATA D Inner JOin
												#EMP_GEN_SETTINGS EGS ON EGs.Emp_Id = D.Emp_Id											
										WHERE	IS_Auto_OT = 1 and DATEPART(DAY,FOR_DATE) = ' + @FOR_DATE  + '											
												AND MONTH(FOR_DATE) = ' + @MONTH + '
												AND YEAR(FOR_DATE) = ' + @YEAR + '
										GROUP BY MONTH(FOR_DATE),YEAR(FOR_DATE)								
									)Q ON Q.Month =' + @MONTH + ' AND Q.Year = ' + @YEAR + '
							WHERE  EMP_Id = 99999'
			--PRINT @QRY
				EXEC (@QRY)	
				---Ended
				----When Auto OT Approval is set to 0 then take OT hours from OT_approval_Table		
				SET @QRY = 'UPDATE	C 
							SET	' + @INSERT_WEEKDAY + ' = CASE WHEN Q.DURATION <> ''00:00'' THEN Q.DURATION ELSE '''' END  --Replace(Q.DURATION,''00:00'','''')
							FROM	#OVERTIME_REGISTER C INNER JOIN	
									(
										SELECT	CAST(DBO.F_RETURN_HOURS(SUM(ISNULL(APPROVED_OT_SEC,0)+ ISNULL(APPROVED_WO_OT_SEC,0) + ISNULL(APPROVED_HO_OT_SEC,0))) AS VARCHAR(20)) AS DURATION
												,MONTH(FOR_DATE) AS Month,YEAR(FOR_DATE) AS YEAR
										FROM	t0160_OT_Approval OA WITH (NOLOCK) Inner JOin
												#EMP_GEN_SETTINGS EGS ON EGs.Emp_Id = OA.Emp_Id																		
										WHERE	Oa.Is_Approved = 1 and IS_Auto_OT = 0 and DATEPART(DAY,FOR_DATE) = ' + @FOR_DATE  + '
												AND MONTH(FOR_DATE) = ' + @MONTH + '
												AND YEAR(FOR_DATE) = ' + @YEAR + '
										GROUP BY MONTH(FOR_DATE),YEAR(FOR_DATE)								
									)Q ON Q.Month =' + @MONTH + ' AND Q.Year = ' + @YEAR + '
							WHERE  EMP_Id = 99999'
				--PRINT @QRY
				EXEC (@QRY)	
				---Ended
				SET	@INSERT_WEEKDAY = ''
				SET @FOR_DATE = Day(DAteAdd(d,1,@Temp_to_date))
				SET @Temp_to_date = DAteAdd(d,1,@Temp_to_date)
				
				
				--SET @FOR_DATE = @FOR_DATE + 1
			END		
			 
			 
			 
			 SELECT ROW_NUMBER() Over(ORDER by Emp_Id) SR_NO,* FROM #OVERTIME_REGISTER
			 Order By EMP_ID
								 
	
	

