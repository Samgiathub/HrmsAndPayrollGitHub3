

-- =============================================
-- AUTHOR:		<AUTHOR,,GADRIWALA MUSLIM>
-- CREATE DATE: <CREATE DATE,, 11/08/2016>
-- DESCRIPTION:	<DESCRIPTION,, BRANCH WISE ATTRITION>
---01/2/2021 (EDIT BY MEHUL ) (SP WITH NOLOCK)---
-- =============================================
CREATE PROCEDURE [dbo].[BRANCH_GRADE_WISE_ATTRITION_GRAPH] 
	 @CMP_ID 		NUMERIC
	,@FROM_DATE 	DATETIME
	,@TO_DATE 		DATETIME
	,@BRANCH_ID 	NUMERIC
	,@CAT_ID 		NUMERIC = 0 --Changed by Gadriwala Muslim 11082016
	,@GRD_ID 		NUMERIC = 0 --Changed by Gadriwala Muslim 11082016
	,@TYPE_ID 		NUMERIC = 0 --Changed by Gadriwala Muslim 11082016
	,@DEPT_ID 		NUMERIC = 0 --Changed by Gadriwala Muslim 11082016
	,@DESIG_ID 		NUMERIC = 0 --Changed by Gadriwala Muslim 11082016
	,@EMP_ID 		NUMERIC = 0 --Changed by Gadriwala Muslim 11082016
	,@CONSTRAINT 	VARCHAR(MAX) = '' --Changed by Gadriwala Muslim 11082016
	,@ATTRITION_TYPE CHAR = 'B' -- ADDED BY GADRIWALA MUSLIM 11082018
	,@PAGE_NO		NUMERIC = 1 -- ADDED BY GADRIWALA MUSLIM 11082018
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
SET NOCOUNT ON 
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
SET ARITHABORT ON


	
	IF @BRANCH_ID = 0  
		SET @BRANCH_ID = NULL
		
	IF @CAT_ID = 0  
		SET @CAT_ID = NULL

	IF @GRD_ID = 0  
		SET @GRD_ID = NULL

	IF @TYPE_ID = 0  
		SET @TYPE_ID = NULL

	IF @DEPT_ID = 0  
		SET @DEPT_ID = NULL

	IF @DESIG_ID = 0  
		SET @DESIG_ID = NULL

	IF @EMP_ID = 0  
		SET @EMP_ID = NULL
		
		CREATE TABLE #ATTRATION_TABLE
		(
			ROW_ID NUMERIC(18,0) DEFAULT 0 ,
			CMP_ID NUMERIC(18,0),
			BRANCH_ID NUMERIC(18,0) DEFAULT 0,
			BRANCH_CODE VARCHAR(15) DEFAULT NULL,
			GRADE_ID NUMERIC(18,0) DEFAULT 0,
			GRADE_CODE VARCHAR(15) DEFAULT NULL,
			NO_OF_EMP_LEFT NUMERIC(18,0) DEFAULT 0,
			HEADCOUNT NUMERIC(18,0) DEFAULT 0,
			ATTRATION_RATE NUMERIC(18,2) DEFAULT 0,
			TOTAL_PAGE NUMERIC(18,0) 
		)
		
		DECLARE @GRADE_ID_CUR NUMERIC
		DECLARE @GRADE_CODE AS VARCHAR(50)
		DECLARE @BRANCH_ID_CUR NUMERIC
		DECLARE @BRANCH_CODE AS VARCHAR(50)
	IF UPPER(@ATTRITION_TYPE) = 'G'
		BEGIN
			DECLARE GRADE_CURSOR CURSOR FOR
				SELECT GRD_ID,GRD_NAME FROM T0040_GRADE_MASTER WITH (NOLOCK) WHERE CMP_ID=@CMP_ID AND GRD_ID = ISNULL(@GRD_ID,GRD_ID)
				OPEN GRADE_CURSOR
					FETCH NEXT FROM GRADE_CURSOR INTO @GRADE_ID_CUR,@GRADE_CODE	
						WHILE @@FETCH_STATUS = 0
							BEGIN
										INSERT INTO #ATTRATION_TABLE(CMP_ID,GRADE_ID,GRADE_CODE)
										SELECT @CMP_ID,@GRADE_ID_CUR,@GRADE_CODE	
										
										UPDATE #ATTRATION_TABLE 
										SET HEADCOUNT = (
												SELECT COUNT(EM.EMP_ID) FROM T0080_EMP_MASTER EM WITH (NOLOCK) INNER JOIN
												 (
														SELECT IE.EMP_ID,GRD_ID from T0095_INCREMENT IE WITH (NOLOCK) INNER JOIN 
														(
																SELECT MAX(INCREMENT_ID) as INCREMENT_ID,IE.EMP_ID FROM T0095_INCREMENT IE WITH (NOLOCK) INNER JOIN
																 (
																	SELECT MAX(IE.INCREMENT_EFFECTIVE_DATE) AS EFFETIVE_DATE,IE.EMP_ID FROM T0095_INCREMENT IE WITH (NOLOCK)
																	WHERE CMP_ID=@CMP_ID  AND  INCREMENT_EFFECTIVE_DATE < @TO_DATE GROUP BY IE.EMP_ID
																 ) IN_QRY ON IN_QRY.EFFETIVE_DATE = IE.INCREMENT_EFFECTIVE_DATE AND IN_QRY.EMP_ID = IE.EMP_ID
																GROUP BY IE.Emp_ID
														)QRY ON QRY.INCREMENT_ID = IE.INCREMENT_ID
												
												)INC_QRY ON INC_QRY.EMP_ID = EM.EMP_ID	WHERE CMP_ID=@CMP_ID  AND  DATE_OF_JOIN < @TO_DATE
												AND INC_QRY.GRD_ID =@GRADE_ID_CUR AND 
												(
													EMP_LEFT ='N' 
													OR 
													(
														EMP_LEFT='Y' AND EMP_LEFT_DATE >= @TO_DATE
													)
												)
											)
							WHERE GRADE_ID =@GRADE_ID_CUR

							UPDATE #ATTRATION_TABLE 
							SET NO_OF_EMP_LEFT = 
										(
											SELECT COUNT(LEFT_DATE) FROM T0110_EMP_LEFT_JOIN_TRAN ET WITH (NOLOCK)	
											INNER JOIN
												 (
														SELECT IE.EMP_ID,GRD_ID FROM T0095_INCREMENT IE  WITH (NOLOCK) INNER JOIN 
														(
																SELECT MAX(INCREMENT_ID) AS INCREMENT_ID,IE.EMP_ID FROM T0095_INCREMENT IE WITH (NOLOCK) INNER JOIN
																 (
																	SELECT MAX(IE.INCREMENT_EFFECTIVE_DATE) AS EFFETIVE_DATE,IE.EMP_ID FROM T0095_INCREMENT IE WITH (NOLOCK)
																	WHERE CMP_ID=@CMP_ID  AND  INCREMENT_EFFECTIVE_DATE < @TO_DATE GROUP BY IE.EMP_ID
																 ) IN_QRY ON IN_QRY.EFFETIVE_DATE = IE.INCREMENT_EFFECTIVE_DATE AND IN_QRY.EMP_ID = IE.EMP_ID
																GROUP BY IE.EMP_ID
														)QRY ON QRY.INCREMENT_ID = IE.INCREMENT_ID
												
												)INC_QRY ON INC_QRY.EMP_ID = ET.EMP_ID
											WHERE LEFT_DATE BETWEEN @FROM_DATE AND @TO_DATE	 
											AND CMP_ID = @CMP_ID AND INC_QRY.GRD_ID = @GRADE_ID_CUR) 
							WHERE GRADE_ID = @GRADE_ID_CUR
							
							UPDATE #ATTRATION_TABLE 
								SET ATTRATION_RATE =  CASE WHEN HEADCOUNT > 0 THEN (NO_OF_EMP_LEFT * 100)/HEADCOUNT ELSE 0 END
							WHERE GRADE_ID =@GRADE_ID_CUR
										
								FETCH NEXT FROM GRADE_CURSOR INTO @GRADE_ID_CUR,@GRADE_CODE 
							END
				CLOSE GRADE_CURSOR	
				DEALLOCATE GRADE_CURSOR
		END
	ELSE
		BEGIN
			DECLARE BRANCH_CURSOR CURSOR FOR
				SELECT BRANCH_ID,BRANCH_CODE FROM T0030_BRANCH_MASTER WITH (NOLOCK) WHERE CMP_ID=@CMP_ID AND BRANCH_ID = ISNULL(@BRANCH_ID,BRANCH_ID)
				OPEN BRANCH_CURSOR
					FETCH NEXT FROM BRANCH_CURSOR INTO @BRANCH_ID_CUR,@BRANCH_CODE 
						WHILE @@FETCH_STATUS = 0
							BEGIN
										INSERT INTO #ATTRATION_TABLE(CMP_ID,BRANCH_ID,BRANCH_CODE)
										SELECT @CMP_ID,@BRANCH_ID_CUR,@BRANCH_CODE	
										
										UPDATE #ATTRATION_TABLE 
										SET HEADCOUNT = (
												SELECT COUNT(EM.EMP_ID) FROM T0080_EMP_MASTER EM WITH (NOLOCK) INNER JOIN
												 (
														SELECT IE.EMP_ID,BRANCH_ID from T0095_INCREMENT IE WITH (NOLOCK) INNER JOIN 
														(
																SELECT MAX(INCREMENT_ID) as INCREMENT_ID,IE.EMP_ID FROM T0095_INCREMENT IE WITH (NOLOCK) INNER JOIN
																 (
																	SELECT MAX(IE.INCREMENT_EFFECTIVE_DATE) AS EFFETIVE_DATE,IE.EMP_ID FROM T0095_INCREMENT IE WITH (NOLOCK)
																	WHERE CMP_ID=@CMP_ID  AND  INCREMENT_EFFECTIVE_DATE < @TO_DATE GROUP BY IE.EMP_ID
																 ) IN_QRY ON IN_QRY.EFFETIVE_DATE = IE.INCREMENT_EFFECTIVE_DATE AND IN_QRY.EMP_ID = IE.EMP_ID
																GROUP BY IE.Emp_ID
														)QRY ON QRY.INCREMENT_ID = IE.INCREMENT_ID
												
												)INC_QRY ON INC_QRY.EMP_ID = EM.EMP_ID	WHERE CMP_ID=@CMP_ID  AND  DATE_OF_JOIN < @TO_DATE
												AND INC_QRY.BRANCH_ID =@BRANCH_ID_CUR AND 
												(
													EMP_LEFT ='N' 
													OR 
													(
														EMP_LEFT='Y' AND EMP_LEFT_DATE >= @TO_DATE
													)
												)
											)
							WHERE BRANCH_ID =@BRANCH_ID_CUR

							UPDATE #ATTRATION_TABLE 
							SET NO_OF_EMP_LEFT = 
										(
											SELECT COUNT(LEFT_DATE) FROM T0110_EMP_LEFT_JOIN_TRAN ET WITH (NOLOCK)	
											INNER JOIN
												 (
														SELECT IE.EMP_ID,BRANCH_ID FROM T0095_INCREMENT IE WITH (NOLOCK) INNER JOIN 
														(
																SELECT MAX(INCREMENT_ID) AS INCREMENT_ID,IE.EMP_ID FROM T0095_INCREMENT IE WITH (NOLOCK) INNER JOIN
																 (
																	SELECT MAX(IE.INCREMENT_EFFECTIVE_DATE) AS EFFETIVE_DATE,IE.EMP_ID FROM T0095_INCREMENT IE WITH (NOLOCK)
																	WHERE CMP_ID=@CMP_ID  AND  INCREMENT_EFFECTIVE_DATE < @TO_DATE GROUP BY IE.EMP_ID
																 ) IN_QRY ON IN_QRY.EFFETIVE_DATE = IE.INCREMENT_EFFECTIVE_DATE AND IN_QRY.EMP_ID = IE.EMP_ID
																GROUP BY IE.EMP_ID
														)QRY ON QRY.INCREMENT_ID = IE.INCREMENT_ID
												
												)INC_QRY ON INC_QRY.EMP_ID = ET.EMP_ID
											WHERE LEFT_DATE BETWEEN @FROM_DATE AND @TO_DATE	 
											AND CMP_ID = @CMP_ID AND INC_QRY.BRANCH_ID = @BRANCH_ID_CUR) 
							WHERE BRANCH_ID = @BRANCH_ID_CUR
							
							UPDATE #ATTRATION_TABLE 
								SET ATTRATION_RATE =  CASE WHEN HEADCOUNT > 0 THEN (NO_OF_EMP_LEFT * 100)/HEADCOUNT ELSE 0 END
							WHERE BRANCH_ID =@BRANCH_ID_CUR
										
								FETCH NEXT FROM BRANCH_CURSOR INTO @BRANCH_ID_CUR,@BRANCH_CODE 
							END
				CLOSE BRANCH_CURSOR	
			DEALLOCATE BRANCH_CURSOR
		END
		
		
		DECLARE @PER_PAGE_ROW AS NUMERIC(18,0)
		DECLARE @FROM_ROW NUMERIC(18,0)
		DECLARE @TO_ROW NUMERIC(18,0)
		
		SET @PER_PAGE_ROW = 15
		
		SET @FROM_ROW = (@PAGE_NO - 1) * @PER_PAGE_ROW
		SET @TO_ROW =	(@PER_PAGE_ROW * @PAGE_NO) 
		
		DELETE FROM #ATTRATION_TABLE WHERE ATTRATION_RATE = 0
		
		IF @ATTRITION_TYPE = 'B'
			BEGIN
				UPDATE #ATTRATION_TABLE SET ROW_ID = QRY.ROW_NUM FROM #ATTRATION_TABLE AT  INNER JOIN
				(
					SELECT ROW_NUMBER() OVER (ORDER BY BRANCH_ID) AS ROW_NUM,BRANCH_ID FROM #ATTRATION_TABLE where ATTRATION_RATE > 0 GROUP BY BRANCH_ID
				) QRY ON AT.BRANCH_ID = QRY.BRANCH_ID
			END
		ELSE
			BEGIN
				
				UPDATE #ATTRATION_TABLE SET ROW_ID = QRY.ROW_NUM FROM #ATTRATION_TABLE AT  INNER JOIN
				(
					SELECT ROW_NUMBER() OVER (ORDER BY GRADE_ID) AS ROW_NUM,GRADE_ID FROM #ATTRATION_TABLE where ATTRATION_RATE > 0 GROUP BY GRADE_ID
				) QRY ON AT.GRADE_ID = QRY.GRADE_ID
			END
		
		UPDATE #ATTRATION_TABLE SET TOTAL_PAGE =  QRY.TOTAL_PAGE FROM 
		(
			SELECT  CASE WHEN COUNT(ROW_ID) > @PER_PAGE_ROW THEN 
						FLOOR(COUNT(ROW_ID) / @PER_PAGE_ROW) + 1 
					ELSE 
						1 
					END AS TOTAL_PAGE 
			FROM #ATTRATION_TABLE where ATTRATION_RATE > 0
		) QRY	
		
		SELECT * FROM #ATTRATION_TABLE WHERE  
		(ROW_ID  BETWEEN @FROM_ROW AND  @TO_ROW  ) AND ATTRATION_RATE > 0  ORDER BY BRANCH_CODE,GRADE_CODE
		
		 --SET @SQLQRY  = 'SELECT ROW_NUMBER OVER (BRANCH_CODE ORDER BY ) * FROM #ATTRATION_TABLE WHERE ORDER BY BRANCH_CODE,GRADE_CODE' 
	END

