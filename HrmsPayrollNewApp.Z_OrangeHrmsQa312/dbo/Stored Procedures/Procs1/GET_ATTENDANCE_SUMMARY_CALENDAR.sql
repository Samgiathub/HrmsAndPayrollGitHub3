


-- =============================================
-- AUTHOR:		<AUTHOR,,GADRIWALA MUSLIM>
-- CREATE DATE: <CREATE DATE,,20/09/2016>
-- DESCRIPTION:	<DESCRIPTION,,SUMMARY CALENDAR OF PRESENT,ABSENT,WEEKOFF,HOLIDAY,LEAVE>
---20/1/2021 (EDIT BY MEHUL ) (SP WITH NOLOCK)---
-- =============================================
CREATE PROCEDURE [dbo].[GET_ATTENDANCE_SUMMARY_CALENDAR]
  @CMP_ID      NUMERIC        
 ,@FROM_DATE   DATETIME        
 ,@TO_DATE     DATETIME         
 ,@BRANCH_ID   NUMERIC	= 0       
 ,@CAT_ID      NUMERIC	= 0         
 ,@GRD_ID      NUMERIC  = 0       
 ,@TYPE_ID     NUMERIC  = 0       
 ,@DEPT_ID     NUMERIC  = 0      
 ,@DESIG_ID    NUMERIC	= 0       
 ,@EMP_ID      NUMERIC  = 0      
 ,@CONSTRAINT  VARCHAR(MAX) = ''       
AS

SET NOCOUNT ON 
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
SET ARITHABORT ON

BEGIN
	-- SET NOCOUNT ON ADDED TO PREVENT EXTRA RESULT SETS FROM
	-- INTERFERING WITH SELECT STATEMENTS.
	
	IF @BRANCH_ID = 0
		SET @BRANCH_ID = NULL
	IF @CAT_ID = 0
		SET @CAT_ID = NULL
	IF @GRD_ID = 0
		SET @GRD_ID = NULL
	IF @TYPE_ID = 0
		SET @TYPE_ID = NULL
	IF @DEPT_ID = 0
		SET @DEPT_ID = NULL
	IF @DESIG_ID = 0
		SET @DESIG_ID = NULL
	IF @EMP_ID = 0
		SET @EMP_ID = NULL
					
	
	CREATE TABLE #DATA         
	(         
	   EMP_ID   NUMERIC ,         
	   FOR_DATE DATETIME,        
	   DURATION_IN_SEC NUMERIC,        
	   SHIFT_ID NUMERIC ,        
	   SHIFT_TYPE NUMERIC ,        
	   EMP_OT  NUMERIC ,        
	   EMP_OT_MIN_LIMIT NUMERIC,        
	   EMP_OT_MAX_LIMIT NUMERIC,        
	   P_DAYS  NUMERIC(12,3) DEFAULT 0,        
	   OT_SEC  NUMERIC DEFAULT 0  ,
	   IN_TIME DATETIME,
	   SHIFT_START_TIME DATETIME,
	   OT_START_TIME NUMERIC DEFAULT 0,
	   SHIFT_CHANGE TINYINT DEFAULT 0,
	   FLAG INT DEFAULT 0,
	   WEEKOFF_OT_SEC  NUMERIC DEFAULT 0,
	   HOLIDAY_OT_SEC  NUMERIC DEFAULT 0,
	   CHK_BY_SUPERIOR NUMERIC DEFAULT 0,
	   IO_TRAN_ID	   NUMERIC DEFAULT 0, -- IO_TRAN_ID IS USED FOR IS_CMP_PURPOSE (T0150_EMP_INOUT)
	   OUT_TIME DATETIME,
	   SHIFT_END_TIME DATETIME,			--ANKIT 16112013
	   OT_END_TIME NUMERIC DEFAULT 0,	--ANKIT 16112013
	   WORKING_HRS_ST_TIME TINYINT DEFAULT 0, --HARDIK 14/02/2014
	   WORKING_HRS_END_TIME TINYINT DEFAULT 0, --HARDIK 14/02/2014
	   GATEPASS_DEDUCT_DAYS NUMERIC(18,2) DEFAULT 0 -- ADD BY GADRIWALA MUSLIM 05012014
   )   
   DECLARE @RETURN_RECORD_SET NUMERIC(18,0)
   SET @RETURN_RECORD_SET = 4
  
   IF OBJECT_ID('tempdb..#Emp_Cons') IS NULL
		BEGIN
			CREATE TABLE #EMP_CONS 
			(      
				EMP_ID NUMERIC ,     
				BRANCH_ID NUMERIC,
				INCREMENT_ID NUMERIC    
			);
			CREATE NONCLUSTERED INDEX IX_EMP_CONS_EMPID ON #EMP_CONS (EMP_ID);
	
	
			IF @CONSTRAINT <> ''        
				BEGIN
					INSERT	INTO #EMP_CONS(EMP_ID)        
					SELECT  CAST(DATA  AS NUMERIC) FROM DBO.SPLIT (@CONSTRAINT,'#') 
					--ADDED BY ROHIT ON 26/11/2015 AS BRANCH_ID AND INCREMENT ID WAS COMING NULL---
					UPDATE	#EMP_CONS 
					SET		BRANCH_ID=I1.BRANCH_ID,
							INCREMENT_ID =I1.INCREMENT_ID
					FROM	#EMP_CONS EC 
							INNER JOIN T0095_INCREMENT I1 ON EC.EMP_ID=I1.EMP_ID
							INNER JOIN (
											SELECT	MAX(I2.INCREMENT_ID) AS INCREMENT_ID,I2.EMP_ID 
											FROM	T0095_INCREMENT I2 WITH (NOLOCK) INNER JOIN #EMP_CONS E ON I2.EMP_ID=E.EMP_ID	-- ANKIT 12092014 FOR SAME DATE INCREMENT --
													INNER JOIN (
																	SELECT MAX(INCREMENT_EFFECTIVE_DATE) AS INCREMENT_EFFECTIVE_DATE, I3.EMP_ID
																	FROM T0095_INCREMENT I3 WITH (NOLOCK) INNER JOIN #EMP_CONS E3 ON I3.EMP_ID=E3.EMP_ID	
																	WHERE I3.INCREMENT_EFFECTIVE_DATE <= @TO_DATE AND I3.CMP_ID =@CMP_ID
																	GROUP BY I3.EMP_ID  
																) I3 ON I2.INCREMENT_EFFECTIVE_DATE=I3.INCREMENT_EFFECTIVE_DATE AND I2.EMP_ID=I3.EMP_ID																																			
											GROUP BY I2.EMP_ID
										) I ON I1.EMP_ID = I.EMP_ID AND I1.INCREMENT_ID=I.INCREMENT_ID
										
										
					--ENDED BY ROHIT ON 26/11/2015 AS BRANCH_ID AND INCREMENT ID WAS COMING NULL---       
				END
			ELSE
				BEGIN
					INSERT	INTO #EMP_CONS      
					SELECT	DISTINCT EMP_ID,BRANCH_ID,INCREMENT_ID 
					FROM	DBO.V_EMP_CONS 
					WHERE	CMP_ID=@CMP_ID AND ISNULL(CAT_ID,0) = ISNULL(@CAT_ID ,ISNULL(CAT_ID,0))      
							AND GRD_ID = ISNULL(@GRD_ID ,GRD_ID)      
							AND ISNULL(DEPT_ID,0) = ISNULL(@DEPT_ID ,ISNULL(DEPT_ID,0))      
							AND ISNULL(TYPE_ID,0) = ISNULL(@TYPE_ID ,ISNULL(TYPE_ID,0))      
							AND ISNULL(DESIG_ID,0) = ISNULL(@DESIG_ID ,ISNULL(DESIG_ID,0)) --ADDED BY JAINA 25-09-2015 
							AND EMP_ID = ISNULL(@EMP_ID ,EMP_ID) AND INCREMENT_EFFECTIVE_DATE <= @TO_DATE 
							AND (
									(@FROM_DATE  >= JOIN_DATE  AND  @FROM_DATE <= LEFT_DATE ) 
									OR ( @TO_DATE  >= JOIN_DATE  AND @TO_DATE <= LEFT_DATE )      
									OR (LEFT_DATE IS NULL AND @TO_DATE >= JOIN_DATE)
									OR (@TO_DATE >= LEFT_DATE  AND  @FROM_DATE <= LEFT_DATE )
								) 
					ORDER BY EMP_ID
							
					
					DELETE E FROM #EMP_CONS E
					WHERE NOT EXISTS (
										SELECT	TOP 1 1
										FROM	T0095_INCREMENT TI WITH (NOLOCK)
												INNER JOIN (
															SELECT	MAX(T0095_INCREMENT.INCREMENT_ID ) AS INCREMENT_ID,T0095_INCREMENT.EMP_ID 
															FROM	T0095_INCREMENT WITH (NOLOCK) INNER JOIN #EMP_CONS E ON T0095_INCREMENT.EMP_ID=E.EMP_ID	-- ANKIT 12092014 FOR SAME DATE INCREMENT
															WHERE	INCREMENT_EFFECTIVE_DATE <= @TO_DATE AND CMP_ID =@CMP_ID 
															GROUP BY T0095_INCREMENT.EMP_ID
															) NEW_INC ON TI.EMP_ID = NEW_INC.EMP_ID AND TI.INCREMENT_ID=NEW_INC.INCREMENT_ID
										WHERE	INCREMENT_EFFECTIVE_DATE <= @TO_DATE AND E.INCREMENT_ID	= TI.INCREMENT_ID
									)


			END        
  	END
   
   
   DECLARE @REQUIRED_EXECUTION BIT;
   SET @REQUIRED_EXECUTION = 0;
	IF OBJECT_ID('tempdb..#Emp_WeekOff') IS NULL
		BEGIN
			CREATE TABLE #Emp_WeekOff
			(
				Row_ID			NUMERIC,
				Emp_ID			NUMERIC,
				For_Date		DATETIME,
				Weekoff_day		VARCHAR(10),
				W_Day			numeric(3,1),
				Is_Cancel		BIT
			)
			CREATE CLUSTERED INDEX IX_Emp_WeekOff_EmpID_ForDate ON #Emp_WeekOff(Emp_ID, For_Date)		
			SET @REQUIRED_EXECUTION = 1;
		END
	
	IF OBJECT_ID('tempdb..#EMP_HOLIDAY') IS NULL
		BEGIN
			CREATE TABLE #EMP_HOLIDAY(EMP_ID NUMERIC, FOR_DATE DATETIME, IS_CANCEL BIT, Is_Half tinyint, Is_P_Comp tinyint, H_DAY numeric(3,1));
			CREATE UNIQUE CLUSTERED INDEX IX_EMP_HOLIDAY_EMPID_FORDATE ON #EMP_HOLIDAY(EMP_ID, FOR_DATE);
			
			SET @REQUIRED_EXECUTION = 1;
		END
	IF OBJECT_ID('tempdb..#Emp_WeekOff_Holiday') IS NULL
		BEGIN
			--Holiday & WeekOff - In colon(;) seperated string (Without Cancel) : Used in SP_CALCULATE_PRESENT_DAYS
			CREATE TABLE #Emp_WeekOff_Holiday
			(
				Emp_ID				NUMERIC,
				WeekOffDate			VARCHAR(Max),
				WeekOffCount		NUMERIC(4,1),
				HolidayDate			VARCHAR(Max),
				HolidayCount		NUMERIC(4,1),
				HalfHolidayDate		VARCHAR(Max),
				HalfHolidayCount	NUMERIC(4,1),
				OptHolidayDate		VARCHAR(Max),
				OptHolidayCount		NUMERIC(4,1)
			);
			SET @Required_Execution  = 1;
		END 
	
	IF OBJECT_ID('tempdb..#EMP_HW_CONS') IS NULL
	BEGIN	
		--Holiday & Weekoff - In colon(;) seperated string (With Cancel) : Used in SP_CALCULATE_PRESENT_DAYS
		CREATE TABLE #EMP_HW_CONS
		(
			Emp_ID				NUMERIC,
			WeekOffDate			Varchar(Max),
			WeekOffCount		NUMERIC(4,1),
			CancelWeekOff		Varchar(Max),
			CancelWeekOffCount	NUMERIC(4,1),
			HolidayDate			Varchar(MAX),
			HolidayCount		NUMERIC(4,1),
			HalfHolidayDate		Varchar(MAX),
			HalfHolidayCount	NUMERIC(4,1),
			CancelHoliday		Varchar(Max),
			CancelHolidayCount	NUMERIC(4,1)
		);
		
		CREATE UNIQUE CLUSTERED INDEX IX_EMP_HW_CONS_EmpID ON #EMP_HW_CONS(Emp_ID)
		
		SET @Required_Execution  =1;		
	END
	
	IF @REQUIRED_EXECUTION = 1
		BEGIN
			DECLARE @ALL_WEEKOFF BIT
			SET @ALL_WEEKOFF = 0;
			
			IF @RETURN_RECORD_SET = 13
				SET @ALL_WEEKOFF = 1;

			EXEC SP_GET_HW_ALL @CONSTRAINT=@CONSTRAINT,@CMP_ID=@CMP_ID, @FROM_DATE=@FROM_DATE, @TO_DATE=@TO_DATE, @ALL_WEEKOFF = @ALL_WEEKOFF, @EXEC_MODE=0		

		END 
		   
	EXEC SP_CALCULATE_PRESENT_DAYS @CMP_ID = @CMP_ID ,@FROM_DATE = @FROM_DATE,@TO_DATE=@TO_DATE,@BRANCH_ID=@BRANCH_ID,@CAT_ID=@CAT_ID,@GRD_ID=@GRD_ID,@TYPE_ID = @TYPE_ID,@DEPT_ID = @DEPT_ID,@DESIG_ID = @DESIG_ID,@EMP_ID = @EMP_ID ,@CONSTRAINT  =@CONSTRAINT  ,@RETURN_RECORD_SET = 4
	
	CREATE TABLE #CALENDAR_ATTENDANCE
	(
		EMP_ID   NUMERIC(18,0),
		FOR_DATE DATETIME,
		PRESENT  NUMERIC(18,2) DEFAULT 0,
		HOLIDAY  NUMERIC(18,2) DEFAULT 0,
		WEEKOFF  NUMERIC(18,2) DEFAULT 0,
		LEAVE    NUMERIC(18,2) DEFAULT 0,
		ABSENT	 NUMERIC(18,2) DEFAULT 0,
		ONDUTY	 numeric(18,2) DEFAULT 0
	)
	
	EXEC GETALLDAYSBETWEENTWODATE @FROM_DATE,@TO_DATE	
	
	INSERT INTO #CALENDAR_ATTENDANCE(EMP_ID,FOR_DATE)
	SELECT  EMP_ID,TEST1 FROM TEST1 CROSS JOIN
	 #EMP_CONS eC
	
	UPDATE #CALENDAR_ATTENDANCE SET PRESENT =  D.P_DAYS  
	FROM #CALENDAR_ATTENDANCE CA INNER JOIN
	#DATA D ON CA.EMP_ID = D.EMP_ID AND CA.FOR_DATE = D.FOR_DATE
	WHERE D.P_DAYS > 0
	

	
	UPDATE #CALENDAR_ATTENDANCE SET  
	LEAVE  = CASE WHEN LM.APPLY_HOURLY = 1 THEN  
					(LEAVE_USED + COMPOFF_USED) / 8 
			 ELSE 
					(LEAVE_USED + COMPOFF_USED) 
			 END
	FROM #CALENDAR_ATTENDANCE CA INNER JOIN
	T0140_LEAVE_TRANSACTION LT  ON CA.FOR_DATE = LT.FOR_DATE AND CA.EMP_ID = LT.EMP_ID
	INNER JOIN T0040_LEAVE_MASTER LM ON LM.LEAVE_ID = LT.LEAVE_ID
	WHERE (LEAVE_USED + COMPOFF_USED) > 0  and isnull(LM.Leave_Type,'') <> 'Company Purpose'
	
	UPDATE #CALENDAR_ATTENDANCE SET  
	ONDUTY  = CASE WHEN LM.APPLY_HOURLY = 1 THEN  
					(LEAVE_USED + COMPOFF_USED) / 8 
			 ELSE 
					(LEAVE_USED + COMPOFF_USED) 
			 END
	FROM #CALENDAR_ATTENDANCE CA INNER JOIN
	T0140_LEAVE_TRANSACTION LT  ON CA.FOR_DATE = LT.FOR_DATE AND CA.EMP_ID = LT.EMP_ID
	INNER JOIN T0040_LEAVE_MASTER LM ON LM.LEAVE_ID = LT.LEAVE_ID
	WHERE (LEAVE_USED + COMPOFF_USED) > 0  and isnull(LM.Leave_Type,'') = 'Company Purpose'
	
	
		
	--DECLARE @CUR_EMP_ID NUMERIC(18,0)
	--DECLARE @CUR_WO_STR NVARCHAR(MAX)
	--DECLARE @CUR_HO_STR NVARCHAR(MAX)
	--SET @CUR_EMP_ID = 0
	--SET @CUR_WO_STR = ''
	--SET @CUR_HO_STR = ''
	
	UPDATE CA SET WEEKOFF = 1 
								FROM #CALENDAR_ATTENDANCE CA INNER JOIN
								#EMP_WEEKOFF EW ON CA.FOR_DATE = EW.FOR_DATE AND CA.EMP_ID = EW.EMP_ID
								
	UPDATE CA SET HOLIDAY = 1 
								FROM #CALENDAR_ATTENDANCE CA INNER JOIN
								#EMP_HOLIDAY EH ON CA.FOR_DATE = EH.FOR_DATE AND CA.EMP_ID = EH.EMP_ID
								
															

	--DECLARE CURHW CURSOR FOR SELECT EMP_ID,WEEKOFFDATE,HOLIDAYDATE FROM #EMP_HW_CONS
	--OPEN CURHW
	--			  FETCH NEXT FROM CURHW INTO @CUR_EMP_ID,@CUR_WO_STR,@CUR_HO_STR
	--		WHILE @@FETCH_sTATUS = 0
	--			BEGIN
	--					IF @CUR_WO_STR	<> ''
	--						BEGIN
							
	--							UPDATE #CALENDAR_ATTENDANCE SET WEEKOFF = 1 
	--							FROM #CALENDAR_ATTENDANCE CA INNER JOIN
	--							 DBO.SPLIT(@CUR_WO_STR,';') SP ON CA.FOR_DATE = SP.DATA 
	--							WHERE DATA <> '' AND CA.EMP_ID = @CUR_EMP_ID
	--						END
	--					IF @CUR_HO_STR <> ''
	--						BEGIN
								
	--							UPDATE #CALENDAR_ATTENDANCE SET HOLIDAY = 1 
	--							FROM #CALENDAR_ATTENDANCE CA INNER JOIN
	--							 DBO.SPLIT(@CUR_HO_STR,';') SP ON CA.FOR_DATE = SP.DATA 
	--							WHERE DATA <> '' AND CA.EMP_ID = @CUR_EMP_ID
	--						END
				 
	--			   FETCH NEXT FROM CURHW INTO @CUR_EMP_ID,@CUR_WO_STR,@CUR_HO_STR
	--			END
	--CLOSE CURHW
	--DEALLOCATE CURHW
	
	UPDATE #CALENDAR_ATTENDANCE 
	SET ABSENT =  CASE WHEN  (1 - (CA.PRESENT + CA.HOLIDAY + CA.WEEKOFF + CA.LEAVE + CA.ONDUTY)) < 0 THEN 
		0 
	ELSE  
		1 - (CA.PRESENT + CA.HOLIDAY + CA.WEEKOFF + CA.LEAVE + CA.ONDUTY) 
	END
	FROM #CALENDAR_ATTENDANCE CA
	
	
	UPDATE #CALENDAR_ATTENDANCE SET LEAVE =0 ,PRESENT = 0  
	WHERE HOLIDAY = 1
	
	-- DAY WISE SUMMARY OF EMPLOYEE'S ATTENDANCE 
    SELECT FOR_DATE,SUM(PRESENT) AS PRESENT,
		SUM(ABSENT) AS ABSENT,SUM(WEEKOFF) AS WEEKOFF,
		SUM(HOLIDAY) AS HOLIDAY,SUM(LEAVE) AS LEAVE,SUM(ONDUTY) as ONDUTY 
    FROM #CALENDAR_ATTENDANCE GROUP BY FOR_DATE 
    ORDER BY FOR_DATE
    
    -- EMPLOYEE'S ATTENDANCE DETAILS 
	--SELECT  EM.ALPHA_EMP_CODE,EM.EMP_FULL_NAME,CA.* FROM #CALENDAR_ATTENDANCE CA 
	--INNER JOIN T0080_EMP_MASTER EM ON CA.EMP_ID = EM.EMP_ID
	
	
END

