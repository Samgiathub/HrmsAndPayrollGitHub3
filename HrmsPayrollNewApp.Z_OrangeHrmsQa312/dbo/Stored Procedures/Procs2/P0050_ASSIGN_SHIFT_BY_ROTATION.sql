

-- =============================================
-- Author:		Nimesh Parmar
-- Create date: 07-Sep-2015
-- Description:	To assign shift to Shift Change Detail table according to given shift in Shift Rotation Master
---13/1/2021 (EDIT BY MEHUL ) (SP WITH NOLOCK)---
-- =============================================
CREATE PROCEDURE [dbo].[P0050_ASSIGN_SHIFT_BY_ROTATION] 
	@Cmp_ID	Numeric,
	@Effective_Date DateTime,
	@Constraint Varchar(Max)
AS

SET NOCOUNT ON 
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
SET ARITHABORT ON

BEGIN

    CREATE TABLE #DATES(FOR_DATE DATETIME);

	DECLARE @CURRENT_DATE DATETIME --= @Effective_Date
	DECLARE @END_OF_YEAR DATETIME --= CAST(CAST(YEAR(@CURRENT_DATE) AS VARCHAR) + '-12-31' AS DATETIME)

	SET @CURRENT_DATE = @Effective_Date  --changed jimit 18042016
	SET @END_OF_YEAR = CAST(CAST(YEAR(@CURRENT_DATE) AS VARCHAR) + '-12-31' AS DATETIME) --changed jimit 18042016

	DECLARE @START_DATE DATETIME --= @CURRENT_DATE
	
	SET @START_DATE = @CURRENT_DATE  --changed jimit 18042016

	INSERT INTO #DATES
	SELECT	DATEADD(d, T.Row_ID, @START_DATE)
	FROM	(SELECT TOP 366 (ROW_NUMBER() OVER(ORDER BY object_id) - 1) AS ROW_ID FROM sys.objects) T
	WHERE	DATEADD(d, T.Row_ID, @START_DATE) <= @END_OF_YEAR
			
	--WHILE (@START_DATE <= @END_OF_YEAR)
	--BEGIN
	--	INSERT INTO #DATES VALUES(@START_DATE);
	--	SET @START_DATE = DATEADD(d, 1, @START_DATE)	
	--END

	CREATE TABLE #WEEK
	(
		DAY_ID		smallint,
		DAY_NAME	varchar(10)
	)

	INSERT INTO #WEEK VALUES (1, 'Sunday');
	INSERT INTO #WEEK VALUES (2, 'Monday');
	INSERT INTO #WEEK VALUES (3, 'Tuesday');
	INSERT INTO #WEEK VALUES (4, 'Wednesday');
	INSERT INTO #WEEK VALUES (5, 'Thursday');
	INSERT INTO #WEEK VALUES (6, 'Friday');
	INSERT INTO #WEEK VALUES (7, 'Saturday');

	CREATE TABLE #ROT
	(
		ROW_ID			bigint,
		EMP_ID			NUMERIC,
		EFFECTIVE_DATE	DATETIME,
		ROT_ID			NUMERIC
	)
	
	/*TAKING EMPLOYEES FROM CONSTRAINT*/	
	CREATE TABLE #Emp_Cons	(Emp_ID numeric)
	
	INSERT	INTO #Emp_Cons(EMP_ID)
	SELECT	CAST(DATA AS NUMERIC) 	
	FROM	dbo.Split(@Constraint, '#') 
	WHERE	IsNull(DATA,'') <> ''
	
	
	/*TAKING LATEST SHIFT ROTATION DETAIL*/		
	INSERT	INTO #ROT
	SELECT	ROW_NUMBER() OVER(ORDER BY ER.Emp_ID, ER.Effective_Date, ER.Rotation_ID) AS ROW_ID, ER.EMP_ID, ER.Effective_Date, ER.Rotation_ID 	
	FROM	V0050_Emp_Monthly_Shift_Rotation ER INNER JOIN #Emp_Cons E ON ER.Emp_ID=E.Emp_ID			
	WHERE	ER.Effective_Date >= isnull((
									SELECT	MAX(Effective_Date) As Effective_Date
									FROM	V0050_Emp_Monthly_Shift_Rotation ER1
									WHERE	ER1.Emp_ID=ER.Emp_ID AND ER1.Effective_Date <= @Effective_Date
								),@Effective_Date)
			AND ER.Cmp_ID=@CMP_ID
	
	
	
	/*TABLE CREATED TO HOLD SHIFT ROTATION DETAIL*/
	CREATE TABLE #SHIFT_ROT
	(
		ROTATION_ID		NUMERIC,
		EMP_ID			NUMERIC,
		CHANGE_MODE		TINYINT,
		CHANGE_ON		TINYINT,
		CHANGE_AFTER	TINYINT,
		SKIP_WEEKOFF	BIT,
		CHANGEON_DAY	TINYINT
	)
	
	
	/*INSERTING RECORDS FROM #ROT TABLE INTO #SHIFT_ROT TABLE*/
	INSERT	INTO #SHIFT_ROT (ROTATION_ID, EMP_ID, CHANGE_MODE, CHANGE_ON, CHANGE_AFTER,SKIP_WEEKOFF,CHANGEON_DAY)
	SELECT	ROT_ID, EMP_ID,RM.Change_Mode, RM.Change_On, RM.Change_After,RM.SKIP_WEEKOFF,ChangeOn_Day
	FROM	#ROT R INNER JOIN T0050_SHIFT_ROTATION_MASTER RM WITH (NOLOCK) ON R.ROT_ID=RM.Tran_ID
	WHERE	RM.Cmp_ID=@CMP_ID
	
	
	
	/*GATHERING INFORMATION OF WHOLE YEAR ON WHICH DATE WHICH ROTATION SHOULD BE AFFECTED*/
	CREATE TABLE #ROT_DETAIL
	(
		ROW_ID			BIGINT,
		EMP_ID			NUMERIC,
		ROTATION_ID		NUMERIC,
		FROM_DATE		DATETIME,
		TO_DATE			DATETIME,
		FOR_DATE		DATETIME,
		CHANGE_MODE		SMALLINT,
		CHANGE_ON		SMALLINT,
		CHANGE_AFTER	SMALLINT,
		IS_WEEKOFF		BIT,
		SKIP_WEEKOFF	BIT,
		CHANGEON_DAY	TINYINT
	)
	
	/*THIS TABLE IS MAIN TABLE. IT WILL BE USED TO INSERT THE SHIFT INTO EMP SHIFT DETAIL TABLE*/
	INSERT	INTO #ROT_DETAIL
	SELECT	ROW_NUMBER() OVER (PARTITION by T.EMP_ID, T.FROM_DATE ORDER BY T.EMP_ID, D.FOR_DATE) AS ROW_ID, 
			T.EMP_ID, T.ROT_ID, T.FROM_DATE, T.TO_DATE, D.FOR_DATE, SR.CHANGE_MODE, SR.CHANGE_ON, 
			(CASE WHEN ISNULL(SR.CHANGE_AFTER,0)	= 0 THEN 1 ELSE SR.CHANGE_AFTER	END) AS CHANGE_AFTER, 
			0 AS IS_WEEKOFF, SR.SKIP_WEEKOFF, CHANGEON_DAY
	FROM	#DATES D INNER JOIN 
				(
					SELECT	R1.ROW_ID, R1.EMP_ID, R1.ROT_ID, R1.EFFECTIVE_DATE AS FROM_DATE, ISNULL(dateadd(d,-1,R2.EFFECTIVE_DATE), @END_OF_YEAR) AS TO_DATE
					FROM	#ROT R1 LEFT OUTER JOIN #ROT R2 ON R1.EMP_ID=R2.EMP_ID AND R1.ROW_ID = R2.ROW_ID -1
				) T ON D.FOR_DATE BETWEEN T.FROM_DATE AND T.TO_DATE
			INNER JOIN #SHIFT_ROT SR ON T.ROT_ID=SR.ROTATION_ID AND T.EMP_ID=SR.EMP_ID
	/*END*/
	
	
	/*UPDATE IS_WEEKOFF FLAG TO TRUE IF FOR_DATE IS WEEKOFF*/
	CREATE TABLE #EMP_WEEKOFF
	(
		EMP_ID		INT,
		FOR_DATE	DATETIME,
		EFF_DATE	DATETIME,
		IS_FIRST	BIT,
		WDAY		VARCHAR(12)
	)

	/*RETRIVING ALL WEEKOFF DATES OF EACH AND EVERY EMPLOYEE FROM SELECTED DATE PERIOD*/	
	INSERT INTO #EMP_WEEKOFF(EMP_ID,FOR_DATE,EFF_DATE,IS_FIRST,WDAY)
	SELECT	R.EMP_ID,R.FOR_DATE, ADJ.For_Date, 0, DATENAME(WEEKDAY,  r.For_Date) AS WDAY
	FROM	(
				SELECT	R.EMP_ID, R.FOR_DATE, ROW_NO = ROW_NUMBER() OVER (PARTITION BY DATEPART(DW,R.FOR_DATE),MONTH(R.FOR_DATE),YEAR(R.FOR_DATE) ORDER BY R.For_Date ), WK.EFFECTIVE_DATE
				FROM	#ROT_DETAIL R INNER	JOIN (
							SELECT	DISTINCT RD.EMP_ID,RD.ROTATION_ID,RD.FOR_DATE,
									(SELECT MAX(FOR_DATE) FROM T0100_WEEKOFF_ADJ WK WITH (NOLOCK) WHERE WK.Emp_ID=RD.EMP_ID AND WK.For_Date <= RD.FOR_DATE) AS EFFECTIVE_DATE
							FROM	#ROT_DETAIL RD INNER JOIN #SHIFT_ROT SR ON RD.ROTATION_ID=SR.ROTATION_ID AND RD.EMP_ID=SR.EMP_ID
						) WK ON R.EMP_ID=R.EMP_ID AND WK.ROTATION_ID=R.ROTATION_ID and WK.FOR_DATE = R.FOR_DATE
			) R
			INNER JOIN T0100_WEEKOFF_ADJ ADJ WITH (NOLOCK) ON ADJ.For_Date=R.EFFECTIVE_DATE AND ADJ.Emp_ID=R.EMP_ID
			INNER JOIN #WEEK W ON DATEPART(DW,R.FOR_DATE)=W.DAY_ID 
					AND (
							CASE 
								WHEN ISNULL(ADJ.Weekoff_Day_Value,'')  = '' THEN 
									CASE WHEN CHARINDEX(W.DAY_NAME, ADJ.WeekOff_Day) > 0 THEN 1 ELSE 0 END
								WHEN ISNULL(ADJ.Weekoff_Day_Value,'')  <> '' AND IsNull(ADJ.Alt_W_Name,'') = '' THEN 
									CASE WHEN CHARINDEX(W.DAY_NAME, ADJ.WeekOff_Day) > 0 THEN 1 ELSE 0 END
								ELSE	
									CASE WHEN (CHARINDEX(CAST(ROW_NO AS VARCHAR), ADJ.Alt_W_Full_Day_Cont) > 0 AND ADJ.Alt_W_Name=W.DAY_NAME) THEN 1 ELSE 0 END
							END
						) = 1
	ORDER BY R.EMP_ID, R.FOR_DATE


	
	/*GETTING FIRST WEEKOFF AFTER EFFECTIVE DATE OF WEEK OFF ADJUSTMENT*/
	/*THIS DATE WILL BE USED TO RESET THE ROTATION IF WEEKOFF HAS BEEN CHANGED*/	
	
	UPDATE	WO
	SET		IS_FIRST = 1
	FROM	#EMP_WEEKOFF WO INNER JOIN 
				(
					SELECT W.EMP_ID
						, CASE WHEN 
								 DATENAME(WEEKDAY, W.EFF_DATE) = T.DAY_NAME THEN W.EFF_DATE 
							ELSE
								 DATEADD(DAY, (DATEDIFF(DAY, ((T.DAY_ID + 5) % 7), W.EFF_DATE) / 7) * 7 + 7, ((T.DAY_ID + 5) % 7)) 
						 END AS NextDay
					FROM #EMP_WEEKOFF W INNER JOIN #WEEK  T ON W.WDAY=T.DAY_NAME	
				) T ON WO.FOR_DATE = T.NextDay AND WO.EMP_ID=T.EMP_ID
	
	
	/*UPDATING FLAG FOR DATE WHERE EMPLOYEE HAS WEEK OFF ON PARTICULAR DATE*/
	UPDATE	#ROT_DETAIL
	SET		IS_WEEKOFF = 1
	FROM	#ROT_DETAIL ROT INNER JOIN #EMP_WEEKOFF EW ON ROT.EMP_ID=EW.EMP_ID AND EW.FOR_DATE=ROT.FOR_DATE

	
	/*RESETING ROW_ID TO SKIP THE WEEKOFF FROM THE ROTATION*/
	UPDATE	R 
	SET		ROW_ID = R1.ROW_ID
	FROM	#ROT_DETAIL R  INNER JOIN 
				(SELECT ROW_NUMBER() OVER (PARTITION by R.EMP_ID,  R.WEEKOFF_DATE  ORDER BY R.EMP_ID, R.FOR_DATE)  AS ROW_ID,R.EMP_ID,R.FOR_DATE,ROTATION_ID,R.IS_WEEKOFF, r.WEEKOFF_DATE
				FROM	(
							SELECT	R.EMP_ID, R.IS_WEEKOFF, R.FOR_DATE, R.ROTATION_ID,
									(SELECT MAX(R1.FOR_DATE) FROM #ROT_DETAIL R1 WHERE R1.EMP_ID=R.EMP_ID AND R1.FOR_DATE <= R.FOR_DATE AND R1.IS_WEEKOFF=1) AS WEEKOFF_DATE
							FROM	#ROT_DETAIL R 
							WHERE	R.SKIP_WEEKOFF = 1 AND IS_WEEKOFF=0
						) R
				) R1 ON R.EMP_ID=R1.EMP_ID AND R.FOR_DATE=R1.FOR_DATE AND R.ROTATION_ID=R1.ROTATION_ID
	WHERE	R.SKIP_WEEKOFF=1

	UPDATE	R
	SET		ROW_ID=0
	FROM	#ROT_DETAIL R
	WHERE	SKIP_WEEKOFF=1 AND IS_WEEKOFF=1
	
	/*END*/
	
	--DECLARE @INTERVAL NUMERIC= 15

	
	
	/*CREATING TEMP TABLE TO HOLD ONLY NECESSORY COLUMN INFORMATION*/
	CREATE TABLE #SHIFT_DETAIL
	(
		ROTATION_ID NUMERIC,
		SHIFT_ID	NUMERIC,
		SORT_ID		NUMERIC
	)
	INSERT	INTO #SHIFT_DETAIL
	SELECT	DISTINCT	RD.ROTATION_ID, SHIFT_ID, SORT_ID
	FROM	T0050_SHIFT_ROTATION_DETAIL RD WITH (NOLOCK)
			INNER JOIN T0050_Emp_Monthly_Shift_Rotation MSR WITH (NOLOCK) ON RD.Rotation_ID=MSR.Rotation_ID
			INNER JOIN  #EMP_CONS E ON MSR.Emp_ID=E.Emp_ID
	WHERE	RD.Cmp_ID=@CMP_ID			
	/*END*/
	
	/*CREATING TEMP TABLE THAT HOLDS THE SHIFT DATA FOR EACH EMPLOYEE AND FOR EACH DATE*/
	CREATE TABLE #EMP_SHIFT
	(
		ROW_ID		BIGINT,
		EMP_ID		NUMERIC,
		ROTATION_ID	NUMERIC,
		FOR_DATE	DATETIME,
		SHIFT_ID	NUMERIC
	)
	
	

	/********************IF CHANGE MODE IS ON EVERY MONTH OF DAY (Employee Weekoff)********************/
	/******I.E. If 3 Shift is assigned then and you have selected 1 in ChangeOn_Day field then the shift will be changed after every 1st of Month******/
	
	/*DELETING OTHER RECORDS for Change On Mode : Every Month of X Day*/
	DELETE RD FROM #ROT_DETAIL RD WHERE CHANGE_ON=9 AND CHANGE_MODE=1 AND CHANGEON_DAY > 0 AND DAY(FOR_DATE) <> CHANGEON_DAY

	INSERT	INTO #EMP_SHIFT
	SELECT	ROW_NUMBER() OVER (PARTITION BY RD.EMP_ID, RD.ROTATION_ID ORDER BY RD.EMP_ID, RD.FOR_DATE) AS ROW_ID, RD.EMP_ID,RD.ROTATION_ID,RD.FOR_DATE,NULL
	FROM	(
				SELECT	RD.ROW_ID,RD.EMP_ID,RD.ROTATION_ID,FROM_DATE,TO_DATE,FOR_DATE,SR.CHANGE_MODE,SR.CHANGE_ON,
						(SELECT MAX(FOR_DATE) FROM T0100_WEEKOFF_ADJ WK WITH (NOLOCK) WHERE WK.Emp_ID=RD.EMP_ID AND WK.For_Date <= RD.FOR_DATE) AS EFFECTIVE_DATE
				FROM	#ROT_DETAIL RD INNER JOIN #SHIFT_ROT SR ON RD.ROTATION_ID=SR.ROTATION_ID AND RD.EMP_ID=SR.EMP_ID
				WHERE	RD.CHANGE_MODE = 1 AND RD.CHANGE_ON=9
			) RD INNER JOIN T0100_WEEKOFF_ADJ WK WITH (NOLOCK) ON RD.EFFECTIVE_DATE=WK.For_Date AND RD.EMP_ID=WK.Emp_ID			
	--WHERE	RD.ROW_ID=1 OR (RD.CHANGE_ON = 9 AND DATEPART(dw, RD.FOR_DATE) = W.DAY_ID)
	ORDER BY RD.FOR_DATE	
	/************************************************END*******************************************/
	
	
	/******IF CHANGE MODE IS AFTER SOME DAYS******/
	/****** I.E. Change Shift After 15 Days ******/	
	INSERT	INTO #EMP_SHIFT
	SELECT	ROW_NUMBER() OVER (PARTITION BY R.EMP_ID, R.ROTATION_ID ORDER BY R.EMP_ID, R.FOR_DATE) AS ROW_ID, R.EMP_ID, R.ROTATION_ID, R.FOR_DATE, NULL
	FROM	#ROT_DETAIL	R 
	WHERE	((ROW_ID - 1) % CHANGE_AFTER) = 0 AND CHANGE_MODE = 0 AND (CASE WHEN R.IS_WEEKOFF = 1 AND R.SKIP_WEEKOFF=1 THEN 1 ELSE 0 END) = 0
	ORDER BY R.FOR_DATE	
	/*******************END**********************/
	
	
	
	/********IF CHANGE MODE IS ON PARTICULAR DAY********/
	/******I.E. Change Shift On Sunday or Saturday******/
	INSERT	INTO #EMP_SHIFT
	SELECT	ROW_NUMBER() OVER (PARTITION BY RD.EMP_ID, RD.ROTATION_ID ORDER BY RD.EMP_ID, RD.FOR_DATE) AS ROW_ID, RD.EMP_ID,RD.ROTATION_ID,RD.FOR_DATE, NULL
	FROM	#ROT_DETAIL RD	--INNER JOIN #SHIFT_ROT SR ON RD.ROT_ID=SR.ROTATION_ID AND RD.EMP_ID=SR.EMP_ID
	WHERE	RD.CHANGE_MODE=1 AND RD.CHANGE_ON < 8 AND  (RD.ROW_ID=1 OR RD.CHANGE_ON = DATEPART(dw, RD.FOR_DATE))  
	ORDER BY RD.FOR_DATE		
	/*************************END***********************/
	
	
	/********************IF CHANGE MODE IS ON PARTICULAR DAY (Employee Weekoff)********************/
	/******I.E. If employee's weekoff is saturday then shift will be changed on each saturday******/
	INSERT	INTO #EMP_SHIFT
	SELECT	ROW_NUMBER() OVER (PARTITION BY RD.EMP_ID, RD.ROTATION_ID ORDER BY RD.EMP_ID, RD.FOR_DATE) AS ROW_ID, RD.EMP_ID,RD.ROTATION_ID,RD.FOR_DATE,NULL
	FROM	(
				SELECT	RD.ROW_ID,RD.EMP_ID,RD.ROTATION_ID,FROM_DATE,TO_DATE,FOR_DATE,SR.CHANGE_MODE,SR.CHANGE_ON,
						(SELECT MAX(FOR_DATE) FROM T0100_WEEKOFF_ADJ WK WITH (NOLOCK) WHERE WK.Emp_ID=RD.EMP_ID AND WK.For_Date <= RD.FOR_DATE) AS EFFECTIVE_DATE
				FROM	#ROT_DETAIL RD INNER JOIN #SHIFT_ROT SR ON RD.ROTATION_ID=SR.ROTATION_ID AND RD.EMP_ID=SR.EMP_ID
				WHERE	RD.CHANGE_MODE = 1 AND RD.CHANGE_ON=8
			) RD INNER JOIN T0100_WEEKOFF_ADJ WK WITH (NOLOCK) ON RD.EFFECTIVE_DATE=WK.For_Date AND RD.EMP_ID=WK.Emp_ID
			INNER JOIN #WEEK W ON WK.Weekoff_Day=W.DAY_NAME
	WHERE	RD.ROW_ID=1 OR (RD.CHANGE_ON = 8 AND DATEPART(dw, RD.FOR_DATE) = W.DAY_ID)
	ORDER BY RD.FOR_DATE	
	/************************************************END*******************************************/

	
	/************************************/
	/**** FINALLY UPDATE ALL SHIFT ID****/	

	--UPDATE	#EMP_SHIFT
	--SET		SHIFT_ID = S.SHIFT_ID
	--FROM	#EMP_SHIFT E INNER JOIN (SELECT ROTATION_ID, COUNT(1) AS CNT FROM #SHIFT_DETAIL SD GROUP BY SD.ROTATION_ID) SD ON E.ROTATION_ID=SD.ROTATION_ID			
	--		INNER JOIN #SHIFT_DETAIL S ON SD.ROTATION_ID=S.ROTATION_ID AND (CASE WHEN E.ROW_ID % SD.CNT = 0 THEN SD.CNT ELSE E.ROW_ID % SD.CNT END) = S.SORT_ID			
	--Select	*
	--FROM	#ROT_DETAIL R 
	--ORDER BY fOR_dATE

	
	
	--sELECT	*
	--FROM	#ROT_DETAIL R LEFT OUTER JOIN
	--		(
	--			SELECT	EMP_ID, ROTATION_ID, ROW_NUMBER() OVER (PARTITION BY EMP_ID, ROTATION_ID ORDER BY ROW_ID) AS RNO, ROW_ID
	--			FROM	(
	--						SELECT	DISTINCT E.EMP_ID, RD.ROTATION_ID, RD.ROW_ID
	--						FROM	#EMP_SHIFT E INNER JOIN (SELECT ROTATION_ID, COUNT(1) AS CNT FROM #SHIFT_DETAIL SD GROUP BY SD.ROTATION_ID) SD ON E.ROTATION_ID=SD.ROTATION_ID			
	--								INNER JOIN #ROT_DETAIL RD ON E.EMP_ID=RD.EMP_ID AND E.FOR_DATE=RD.FOR_DATE
	--								INNER JOIN #SHIFT_DETAIL S ON SD.ROTATION_ID=S.ROTATION_ID AND (CASE WHEN E.ROW_ID % SD.CNT = 0 THEN SD.CNT ELSE E.ROW_ID % SD.CNT END) = S.SORT_ID			
	--						WHERE	SKIP_WEEKOFF = 1				
	--					) T 
	--		) RD ON R.ROW_ID=RD.ROW_ID AND RD.EMP_ID=R.EMP_ID AND RD.ROTATION_ID=R.ROTATION_ID
	--WHERE	R.SKIP_WEEKOFF=1


	--RETURN;

	--UPDATE	R
	--SET		ROW_ID=ISNULL(RD.RNO,0)
	--FROM	#ROT_DETAIL R LEFT OUTER JOIN
	--		(
	--			SELECT	EMP_ID, ROTATION_ID, ROW_NUMBER() OVER (PARTITION BY EMP_ID, ROTATION_ID ORDER BY ROW_ID) AS RNO, ROW_ID
	--			FROM	(
	--						SELECT	DISTINCT E.EMP_ID, RD.ROTATION_ID, RD.ROW_ID
	--						FROM	#EMP_SHIFT E INNER JOIN (SELECT ROTATION_ID, COUNT(1) AS CNT FROM #SHIFT_DETAIL SD GROUP BY SD.ROTATION_ID) SD ON E.ROTATION_ID=SD.ROTATION_ID			
	--								INNER JOIN #ROT_DETAIL RD ON E.EMP_ID=RD.EMP_ID AND E.FOR_DATE=RD.FOR_DATE
	--								INNER JOIN #SHIFT_DETAIL S ON SD.ROTATION_ID=S.ROTATION_ID AND (CASE WHEN E.ROW_ID % SD.CNT = 0 THEN SD.CNT ELSE E.ROW_ID % SD.CNT END) = S.SORT_ID			
	--						WHERE	SKIP_WEEKOFF = 1				
	--					) T 
	--		) RD ON R.ROW_ID=RD.ROW_ID AND RD.EMP_ID=R.EMP_ID AND RD.ROTATION_ID=R.ROTATION_ID
	--WHERE	R.SKIP_WEEKOFF=1
	
	
	UPDATE	E
	SET		ROW_ID = R.ROW_ID
	FROM	#EMP_SHIFT E INNER JOIN #ROT_DETAIL R ON E.EMP_ID=R.EMP_ID AND E.FOR_DATE=R.FOR_DATE 
	WHERE	R.SKIP_WEEKOFF = 1

	SELECT	ROW_NUMBER() OVER (ORDER BY EMP_ID, FOR_DATE) AS RNO, ROW_ID,EMP_ID,ROTATION_ID,FOR_DATE,SHIFT_ID
	INTO	#TMP_ROW
	FROM	#EMP_SHIFT
	
	--;WITH CTE(ROW_ID,EMP_ID,ROTATION_ID,FOR_DATE,SHIFT_ID, RX) 
	--AS
	--(
	--	SELECT	 ROW_ID,EMP_ID,ROTATION_ID,FOR_DATE,SHIFT_ID, CAST(0 AS BIGINT) AS RX
	--	FROM	#EMP_SHIFT E1
	--	WHERE	ROW_ID = 1
	--	UNION ALL
	--	SELECT	E1.ROW_ID,E1.EMP_ID,E1.ROTATION_ID,E1.FOR_DATE,E1.SHIFT_ID, CTE.ROW_ID AS RX
	--	FROM	#EMP_SHIFT E1 
	--			CROSS APPLY (SELECT MAX(FOR_DATE) AS FOR_DATE, EMP_ID FROM #EMP_SHIFT E2 WHERE E2.FOR_DATE < E1.FOR_DATE GROUP BY EMP_ID) T
	--			INNER JOIN CTE ON T.FOR_DATE=CTE.FOR_DATE AND T.EMP_ID =CTE.EMP_ID
	--)
	--SELECT * FROM CTE
	
	UPDATE	#EMP_SHIFT
	SET		SHIFT_ID = S.SHIFT_ID
	FROM	#EMP_SHIFT E INNER JOIN (SELECT ROTATION_ID, COUNT(1) AS CNT FROM #SHIFT_DETAIL SD GROUP BY SD.ROTATION_ID) SD ON E.ROTATION_ID=SD.ROTATION_ID			
			INNER JOIN #ROT_DETAIL RD ON E.EMP_ID=RD.EMP_ID AND E.FOR_DATE=RD.FOR_DATE
			INNER JOIN #SHIFT_DETAIL S ON SD.ROTATION_ID=S.ROTATION_ID AND (CASE WHEN E.ROW_ID % SD.CNT = 0 THEN SD.CNT ELSE E.ROW_ID % SD.CNT END) = S.SORT_ID			
	WHERE	CASE WHEN SKIP_WEEKOFF = 1 AND IS_WEEKOFF=1 THEN 0 ELSE 1 END = 1

	
	
	--WHERE	SKIP_WEEKOFF = 0

	--UPDATE	#EMP_SHIFT
	--SET		SHIFT_ID = S.SHIFT_ID
	--FROM	#EMP_SHIFT E INNER JOIN (SELECT ROTATION_ID, COUNT(1) AS CNT FROM #SHIFT_DETAIL SD GROUP BY SD.ROTATION_ID) SD ON E.ROTATION_ID=SD.ROTATION_ID			
	--		INNER JOIN #ROT_DETAIL RD ON E.EMP_ID=RD.EMP_ID AND E.FOR_DATE=RD.FOR_DATE
	--		INNER JOIN #SHIFT_DETAIL S ON SD.ROTATION_ID=S.ROTATION_ID AND (CASE WHEN E.ROW_ID % SD.CNT = 0 THEN SD.CNT ELSE E.ROW_ID % SD.CNT END) = S.SORT_ID					
	--WHERE	SKIP_WEEKOFF = 1

	--select * from #EMP_SHIFT e inner join #SHIFT_DETAIL s on e.SHIFT_ID=s.SHIFT_ID and e.ROTATION_ID=s.ROTATION_ID
	--	inner join #ROT_DETAIL r on e.emp_id=r.emp_id and e.for_date=r.for_date
	--order by e.for_date
	--Return
	/************************************/

	

	DELETE	D
	FROM	T0100_EMP_SHIFT_DETAIL D INNER JOIN #EMP_SHIFT E ON D.Emp_ID=E.EMP_ID
	WHERE	D.Cmp_ID=@CMP_ID AND D.For_Date >= @Effective_Date
	
	DECLARE @Shift_Tran_ID numeric
	SELECT	@Shift_Tran_ID = ISNULL(MAX(Shift_Tran_ID),0) FROM T0100_EMP_SHIFT_DETAIL WITH (NOLOCK); 
	
	
	INSERT	INTO T0100_EMP_SHIFT_DETAIL (Shift_Tran_ID, Emp_ID, Cmp_ID, Shift_ID, For_Date, Shift_Type, Rotation_ID)
	SELECT	ROW_NUMBER() OVER( ORDER BY EMP_ID, FOR_DATE) + @Shift_Tran_ID, EMP_ID, @CMP_ID, SHIFT_ID, FOR_DATE, 0, ROTATION_ID
	FROM	#EMP_SHIFT
	
	/*Inserting/Updating Record in T0055_EMP_DEFINE_SHIFT table which will be used to get the last shift assigned date*/
	UPDATE	T0055_EMP_DEFINED_SHIFT 
	SET		Last_Execution = T.Last_Execution	
	FROM	T0055_EMP_DEFINED_SHIFT S INNER JOIN (
				SELECT	EMP_ID, MAX(FOR_DATE) As Last_Execution 
				FROM	#EMP_SHIFT E 				
				GROUP BY EMP_ID
			) T ON S.Emp_ID=T.EMP_ID
	WHERE	S.Cmp_ID=@Cmp_ID and S.Last_Execution < T.Last_Execution
	
	INSERT	INTO T0055_EMP_DEFINED_SHIFT (Cmp_ID, Emp_ID, Last_Execution)
	SELECT	@Cmp_ID, Emp_ID, Last_Execution
	FROM	(
				SELECT	EMP_ID, MAX(FOR_DATE) As Last_Execution 
				FROM	#EMP_SHIFT E 
				WHERE	NOT EXISTS(SELECT EMP_ID FROM T0055_EMP_DEFINED_SHIFT S WITH (NOLOCK) WHERE E.EMP_ID=S.Emp_ID AND S.Cmp_ID=@Cmp_ID)
				GROUP BY EMP_ID
			) T	
END

