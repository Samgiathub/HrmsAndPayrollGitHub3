

-- =============================================
-- Author:		SHAIKH RAMIZ
-- Create date: 08-MARCH-2017
-- Description:	FOR DISPLAY ADVANCE AND PRESENT DAYS OF ALL EMPLOYEES
---22/1/2021 (EDIT BY MEHUL ) (SP WITH NOLOCK)---
-- =============================================
CREATE PROCEDURE [dbo].[P0100_ADVANCE_DISPLAY]
	@CMP_ID				NUMERIC,
	@EFFECTIVE_DATE		DATETIME,
	@BRANCH_ID			NUMERIC = 0,
	@GRD_ID				NUMERIC = 0,
	@VERTICAL_ID		NUMERIC = 0,
	@SUBVERTICAL		NUMERIC = 0,
	@EMP_ID				NUMERIC = 0,
	@CONSTRAINT			VARCHAR(MAX) = ''
AS

SET NOCOUNT ON 
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
SET ARITHABORT ON

BEGIN
    
	DECLARE @FROM_DATE DATETIME
	DECLARE @TO_DATE DATETIME
	DECLARE @MONTH_END_DATE DATETIME
	DECLARE @TEMP_CONSTRAINT VARCHAR(MAX);
	DECLARE @OUTOF_DAYS			NUMERIC        
	
	SET @FROM_DATE = dbo.GET_MONTH_ST_DATE(MONTH(@EFFECTIVE_DATE) , YEAR(@EFFECTIVE_DATE))
	SET @TO_DATE = @EFFECTIVE_DATE
	SET @MONTH_END_DATE = dbo.GET_MONTH_END_DATE(MONTH(@EFFECTIVE_DATE) , YEAR(@EFFECTIVE_DATE))
	
	SET @OUTOF_DAYS = DATEDIFF(D,@FROM_DATE,@MONTH_END_DATE) + 1  

	--	THIS LOGIC IS IMPORTANT , THIS WILL BE USED , IF DATA IS TAKING TOO MUCH TO LOAD , ON CLIENT SIDE , THEN WE WILL SAVE THE DATA WHEN LOADED FIRST TIME , THEN IT WILL NOT BE LOADED FOR THAT DATA

	--SELECT	@TEMP_CONSTRAINT = COALESCE(@TEMP_CONSTRAINT + '#','') + CAST(EMP_ID AS VARCHAR(10))
	--FROM	dbo.Split(@CONSTRAINT,'#') T1 LEFT OUTER JOIN T0100_ADVANCE_PRESENT_DAYS T ON T.Emp_ID=Cast(T1.Data As numeric)
	--Where	T1.Data <> '' AND T.Emp_Id Is NUll

	CREATE TABLE #EMP_CONS 
	(      
		EMP_ID NUMERIC ,     
		BRANCH_ID NUMERIC,
		INCREMENT_ID NUMERIC    
	)  

	EXEC SP_RPT_FILL_EMP_CONS  @CMP_ID,@FROM_DATE,@TO_DATE,@BRANCH_ID,0,@GRD_ID,0,0,0,@EMP_ID,@TEMP_CONSTRAINT ,0 ,0 ,0,@VERTICAL_ID,@SUBVERTICAL,0,0,0,0,0,0,0
	
	CREATE NONCLUSTERED INDEX IX_EMPCONS ON #EMP_CONS (EMP_ID)

	CREATE TABLE #DATA         
	(         
		Emp_Id   numeric ,         
		For_date datetime,        
		Duration_in_sec numeric,        
		Shift_ID numeric ,        
		Shift_Type numeric ,        
		Emp_OT  numeric ,        
		Emp_OT_min_Limit numeric,        
		Emp_OT_max_Limit numeric,        
		P_days  numeric(12,3) default 0,        
		OT_Sec  numeric default 0  ,
		In_Time datetime,
		Shift_Start_Time datetime,
		OT_Start_Time numeric default 0,
		Shift_Change tinyint default 0,
		Flag int default 0,
		Weekoff_OT_Sec  numeric default 0,
		Holiday_OT_Sec  numeric default 0,
		Chk_By_Superior numeric default 0,
		IO_Tran_Id	   numeric default 0,
		OUT_Time datetime,
		Shift_End_Time datetime,
		OT_End_Time numeric default 0,
		Working_Hrs_St_Time tinyint default 0,
		Working_Hrs_End_Time tinyint default 0,
		GatePass_Deduct_Days numeric(18,2) default 0
	)    
	CREATE NONCLUSTERED INDEX IX_DATA ON #DATA (EMP_ID, FOR_DATE)

	DECLARE @Required_Execution BIT;
	SET @Required_Execution = 0;

	
	IF OBJECT_ID('tempdb..#EMP_HOLIDAY') IS NULL
		BEGIN
			CREATE TABLE #EMP_HOLIDAY(EMP_ID NUMERIC, FOR_DATE DATETIME, IS_CANCEL BIT, Is_Half tinyint, Is_P_Comp tinyint, H_DAY numeric(4,1));
			CREATE UNIQUE CLUSTERED INDEX IX_EMP_HOLIDAY_EMPID_FORDATE ON #EMP_HOLIDAY(EMP_ID, FOR_DATE);
			SET @Required_Execution = 1
		END

	IF OBJECT_ID('tempdb..#Emp_WeekOff') IS NULL
		BEGIN
			CREATE TABLE #EMP_WEEKOFF
			(
				Row_ID			NUMERIC,
				Emp_ID			NUMERIC,
				For_Date		DATETIME,
				Weekoff_day		VARCHAR(10),
				W_Day			numeric(4,1),
				Is_Cancel		BIT
			)
			CREATE CLUSTERED INDEX IX_Emp_WeekOff_EmpID_ForDate ON #EMP_WEEKOFF(Emp_ID, For_Date)		
			SET @Required_Execution = 1
		END

	--IF @Required_Execution = 1
	--	BEGIN
	--		EXEC SP_GET_HW_ALL @CONSTRAINT=@CONSTRAINT,@CMP_ID=@Cmp_ID, @FROM_DATE=@FROM_DATE, @TO_DATE=@TO_DATE, @All_Weekoff = 0, @Exec_Mode=0
	--	END
	
	CREATE TABLE #EMP_CONS_ALL
	(      
		EMP_ID NUMERIC ,     
		BRANCH_ID NUMERIC,
		INCREMENT_ID NUMERIC    
	) 
	
	INSERT INTO #EMP_CONS_ALL
		SELECT * FROM #EMP_CONS
	
	DECLARE @TMP_BRANCH_ID NUMERIC
	DECLARE @TMP_FROM_DATE DATETIME
	DECLARE @TMP_TO_DATE DATETIME
	
	DECLARE curSalCycle CURSOR FAST_FORWARD FOR
		SELECT	Distinct BRANCH_ID , Sal_St_Date,Sal_End_Date 
		FROM	(SELECT	DISTINCT BRANCH_ID FROM #EMP_CONS_ALL E  ) E 
				CROSS APPLY (SELECT * FROM dbo.F_Get_SalaryDate (@Cmp_id,E.BRANCH_ID,MONTH(@FROM_DATE),YEAR(@FROM_DATE))) B
	OPEN curSalCycle 
	FETCH NEXT FROM curSalCycle INTO @TMP_BRANCH_ID , @TMP_FROM_DATE , @TMP_TO_DATE
	WHILE @@FETCH_STATUS = 0
		BEGIN
			
			TRUNCATE TABLE #EMP_CONS --HERE I HAVE TRUNCATED THIS TABLE , NOW ONE BY ONE BRANCH WISE EMPLOYEES WILL BE FILLED
			
			INSERT INTO #EMP_CONS
			SELECT * FROM #EMP_CONS_ALL WHERE BRANCH_ID = @TMP_BRANCH_ID
		
			EXEC P_GET_EMP_INOUT @Cmp_ID, @TMP_FROM_DATE, @TMP_TO_DATE
			
		FETCH NEXT FROM curSalCycle INTO @TMP_BRANCH_ID , @TMP_FROM_DATE , @TMP_TO_DATE
		END
	CLOSE curSalCycle
	DEALLOCATE curSalCycle
	
	
	SELECT	E.EMP_ID, (E.Alpha_Emp_Code + ' - ' + E.Emp_Full_Name) as Emp_Full_Name, ISNULL(P_COUNT,0) AS PRESENT_COUNT , 
			ISNULL(A.ADVANCE_TILL_DATE,0) AS ADV_CLOSING,
			CASE WHEN INC.Wages_Type = 'Monthly' 
				THEN CAST((( INC.GROSS_SALARY / @OUTOF_DAYS) * D.P_COUNT) AS NUMERIC(18,2)) 
			ELSE CAST((INC.GROSS_SALARY * D.P_COUNT) AS NUMERIC) 
			END AS SALARY
	FROM #EMP_CONS_ALL EC 
		INNER JOIN T0080_EMP_MASTER E WITH (NOLOCK) ON EC.EMP_ID=E.Emp_ID
		LEFT OUTER JOIN (SELECT EMP_ID, SUM(P_days) AS P_COUNT FROM #DATA GROUP BY Emp_Id) D ON EC.EMP_ID = D.Emp_Id
		LEFT OUTER JOIN (SELECT EMP_ID, ADVANCE_TILL_DATE FROM V0140_ADVANCE_SUMMARY) A ON D.Emp_Id = A.Emp_ID
		INNER JOIN T0095_INCREMENT INC WITH (NOLOCK) ON INC.Increment_ID = EC.Increment_ID	
		
		DROP TABLE #EMP_CONS
		DROP TABLE #EMP_CONS_ALL
		
	/*********COMMENTED FOR OPTIMIZATION , NOT TAKING WEEKOFF & HOLIDAYS NOW**********

	--INSERT INTO T0100_ADVANCE_PRESENT_DAYS(EMP_ID , FOR_DATE , PRESENT_COUNT , WEEK_OFF_COUNT , HOLIDAY_COUNT , ADVANCE_AMOUNT)
	SELECT	E.EMP_ID, (E.Alpha_Emp_Code + ' - ' + E.Emp_Full_Name) as Emp_Full_Name, ISNULL(P_COUNT,0) AS PRESENT_COUNT , 
			--ISNULL(W.W_COUNT,0) AS WEEKOFF_COUNT ,  ISNULL(H.H_COUNT,0) AS HOLIDAY_COUNT , 
			ISNULL(A.ADVANCE_TILL_DATE,0) AS ADV_CLOSING,
			CASE WHEN INC.Wages_Type = 'Monthly' THEN CAST((( INC.GROSS_SALARY / @OUTOF_DAYS) * D.P_COUNT) AS NUMERIC(18,2)) ELSE CAST((INC.GROSS_SALARY * D.P_COUNT) AS NUMERIC) END AS SALARY
	FROM #EMP_CONS_ALL EC 
		INNER JOIN T0080_EMP_MASTER E ON EC.EMP_ID=E.Emp_ID
		LEFT OUTER JOIN (SELECT EMP_ID, SUM(P_days) AS P_COUNT FROM #DATA GROUP BY Emp_Id) D ON EC.EMP_ID = D.Emp_Id
		--LEFT OUTER JOIN (SELECT EMP_ID, COUNT(1) AS W_COUNT FROM #EMP_WEEKOFF W WHERE FOR_DATE BETWEEN @FROM_DATE AND @TO_DATE GROUP BY EMP_ID) W ON D.Emp_Id=W.Emp_ID 
		--LEFT OUTER JOIN (SELECT EMP_ID, COUNT(1) AS H_COUNT FROM #EMP_HOLIDAY H WHERE FOR_DATE BETWEEN @FROM_DATE AND @TO_DATE GROUP BY EMP_ID) H ON D.Emp_Id=H.Emp_ID 
		LEFT OUTER JOIN (SELECT EMP_ID, ADVANCE_TILL_DATE FROM V0140_ADVANCE_SUMMARY) A ON D.Emp_Id = A.Emp_ID
		INNER JOIN T0095_INCREMENT INC ON INC.Increment_ID = EC.Increment_ID	
	*/	
		
		
	
END

