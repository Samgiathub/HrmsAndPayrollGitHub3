CREATE TABLE [dbo].[T0210_MONTHLY_BOND_PAYMENT] (
    [Bond_Pay_ID]       NUMERIC (18)    NOT NULL,
    [Bond_Apr_ID]       NUMERIC (18)    NOT NULL,
    [Cmp_ID]            NUMERIC (18)    NOT NULL,
    [Sal_Tran_ID]       NUMERIC (18)    NULL,
    [Bond_Pay_Amount]   NUMERIC (22, 2) NOT NULL,
    [Bond_Pay_Comments] VARCHAR (250)   NOT NULL,
    [Bond_Payment_Date] DATETIME        NOT NULL,
    CONSTRAINT [PK_T0210_MONTHLY_BOND_PAYMENT] PRIMARY KEY CLUSTERED ([Bond_Pay_ID] ASC),
    CONSTRAINT [FK_T0210_MONTHLY_BOND_PAYMENT_T0010_COMPANY_MASTER] FOREIGN KEY ([Cmp_ID]) REFERENCES [dbo].[T0010_COMPANY_MASTER] ([Cmp_Id]),
    CONSTRAINT [FK_T0210_MONTHLY_BOND_PAYMENT_T0120_BOND_APPROVAL] FOREIGN KEY ([Bond_Apr_ID]) REFERENCES [dbo].[T0120_BOND_APPROVAL] ([Bond_Apr_Id])
);


GO



CREATE TRIGGER [DBO].[Tri_T0210_MONTHLY_BOND_PAYMENT]
ON [dbo].[T0210_MONTHLY_BOND_PAYMENT]
FOR INSERT,Delete
AS

	DECLARE @CMP_ID		NUMERIC
	DECLARE @FOR_DATE	DATETIME
	DECLARE @EMP_ID		NUMERIC
	DECLARE @COUNT		NUMERIC
	
	DECLARE @BOND_TRAN_ID	NUMERIC
	DECLARE @BOND_ID		NUMERIC
	DECLARE @BOND_RETURN	NUMERIC(22,2)	
	DECLARE @LAST_CLOSING		NUMERIC(22,2)
	DECLARE @BOND_APR_ID	NUMERIC
	DECLARE @LAST_CLOSING_BALANCE	NUMERIC
	--DECLARE @FIRST_DEDUCTION_PRINCIPAL_AMT	NUMERIC
	--DECLARE @SUM_OF_INTEREST_AMT NUMERIC(18,2)
	DECLARE @BOND_INT_AMOUNT NUMERIC
	--DECLARE @CALCULATED_INTEREST_AMOUNT NUMERIC(18,2)
	--DECLARE @SUBSIDY_AMOUNT NUMERIC(18,2)
	
	
	SET @LAST_CLOSING_BALANCE = 0

	SELECT @BOND_TRAN_ID = ISNULL(MAX(BOND_TRAN_ID),0) + 1 FROM T0140_BOND_TRANSACTION

	IF  UPDATE(BOND_APR_ID) 
		BEGIN
		
				SELECT	@CMP_ID = INS.CMP_ID,@BOND_RETURN = INS.BOND_PAY_AMOUNT,@FOR_DATE = BOND_PAYMENT_DATE,
						@EMP_ID = EMP_ID , @BOND_ID = LA.BOND_ID ,@BOND_APR_ID = INS.BOND_APR_ID, 
						--@FIRST_DEDUCTION_PRINCIPAL_AMT = LM.IS_PRINCIPAL_FIRST_THAN_INT,
						@BOND_INT_AMOUNT = BOND_PAY_AMOUNT
						--@CALCULATED_INTEREST_AMOUNT = CALCULATED_INTEREST_AMOUNT,@SUBSIDY_AMOUNT = INS.SUBSIDY_AMOUNT
				FROM INSERTED INS	
				INNER JOIN T0120_BOND_APPROVAL LA ON INS.BOND_APR_ID = LA.BOND_APR_ID
				INNER JOIN T0040_BOND_MASTER LM ON LM.BOND_ID = LA.BOND_ID
				

				UPDATE T0120_BOND_APPROVAL
				SET BOND_APR_PENDING_AMOUNT = (BOND_APR_PENDING_AMOUNT - @BOND_RETURN) -- - @SUBSIDY_AMOUNT
				WHERE  BOND_APR_ID = @BOND_APR_ID		
		
			IF EXISTS(SELECT * FROM T0140_BOND_TRANSACTION WHERE FOR_DATE = @FOR_DATE AND BOND_ID = @BOND_ID AND CMP_ID = @CMP_ID AND EMP_ID = @EMP_ID)
				BEGIN

						UPDATE	T0140_BOND_TRANSACTION 
						SET		BOND_RETURN = BOND_RETURN + @BOND_RETURN ,
								--SUBSIDY_AMOUNT = SUBSIDY_AMOUNT + @SUBSIDY_AMOUNT,
								BOND_CLOSING = BOND_CLOSING - @BOND_RETURN --- @SUBSIDY_AMOUNT
						WHERE	BOND_ID = @BOND_ID AND FOR_DATE = @FOR_DATE AND CMP_ID = @CMP_ID AND 
								EMP_ID = @EMP_ID --AND IS_BOND_INTEREST_FLAG = 0  
							
				
						UPDATE	T0140_BOND_TRANSACTION 
						SET		BOND_OPENING = BOND_OPENING - @BOND_RETURN , -- - @SUBSIDY_AMOUNT
								BOND_CLOSING = BOND_CLOSING - @BOND_RETURN --- @SUBSIDY_AMOUNT
						WHERE	BOND_ID = @BOND_ID AND FOR_DATE > @FOR_DATE AND CMP_ID = @CMP_ID AND 
								EMP_ID = @EMP_ID --AND IS_BOND_INTEREST_FLAG = 0

				
				
				--IF @FIRST_DEDUCTION_PRINCIPAL_AMT = 1
				--	BEGIN
				--		SELECT @LAST_CLOSING_BALANCE = ISNULL(BOND_CLOSING,0) FROM T0140_BOND_TRANSACTION WHERE FOR_DATE = @FOR_DATE AND BOND_ID = @BOND_ID  AND CMP_ID = @CMP_ID AND EMP_ID = @EMP_ID AND IS_BOND_INTEREST_FLAG = 0
						
				--		IF @LAST_CLOSING_BALANCE = 0 
				--			BEGIN 
				--				IF NOT EXISTS(SELECT * FROM T0140_BOND_TRANSACTION WHERE FOR_DATE < @FOR_DATE AND BOND_ID = @BOND_ID  AND CMP_ID = @CMP_ID AND EMP_ID = @EMP_ID AND IS_BOND_INTEREST_FLAG = 1)
				--					BEGIN
				--						SELECT @SUM_OF_INTEREST_AMT = ISNULL(SUM(INTEREST_AMOUNT),0) FROM T0210_MONTHLY_BOND_PAYMENT WHERE BOND_APR_ID = @BOND_APR_ID AND CMP_ID = @CMP_ID AND IS_BOND_INTEREST_FLAG = 0
										
				--						IF @CALCULATED_INTEREST_AMOUNT <> 0 
				--							BEGIN
				--								SET @SUM_OF_INTEREST_AMT = @SUM_OF_INTEREST_AMT + @CALCULATED_INTEREST_AMOUNT
				--							END
										
				--						INSERT T0140_BOND_TRANSACTION(BOND_TRAN_ID,EMP_ID,BOND_ID,CMP_ID,FOR_DATE,BOND_OPENING,BOND_CLOSING,BOND_RETURN,BOND_ISSUE,IS_BOND_INTEREST_FLAG)
				--						VALUES(@BOND_TRAN_ID,@EMP_ID,@BOND_ID,@CMP_ID,@FOR_DATE,0,@SUM_OF_INTEREST_AMT,0,@SUM_OF_INTEREST_AMT,1)
										
				--						UPDATE T0120_BOND_APPROVAL SET TOTAL_BOND_INT_AMOUNT = @SUM_OF_INTEREST_AMT,BOND_INT_INSTALLMENT_AMOUNT = (CASE WHEN ISNULL(NO_OF_INST_BOND_AMT,0) <> 0 THEN @SUM_OF_INTEREST_AMT/NO_OF_INST_BOND_AMT ELSE 0 END),BOND_APR_PENDING_INT_AMOUNT = @SUM_OF_INTEREST_AMT
				--						WHERE BOND_APR_ID = @BOND_APR_ID AND EMP_ID = @EMP_ID AND BOND_ID = @BOND_ID AND CMP_ID = @CMP_ID
				--					END
				--				ELSE
				--					BEGIN
				--						SET @BOND_RETURN = @BOND_INT_AMOUNT
										
				--						UPDATE T0120_BOND_APPROVAL
				--						SET BOND_APR_PENDING_INT_AMOUNT  = (BOND_APR_PENDING_INT_AMOUNT  - @BOND_RETURN - @SUBSIDY_AMOUNT)
				--						WHERE  BOND_APR_ID = @BOND_APR_ID AND @FIRST_DEDUCTION_PRINCIPAL_AMT = 1
										
				--						UPDATE T0140_BOND_TRANSACTION SET BOND_RETURN = BOND_RETURN + @BOND_RETURN 
				--						,SUBSIDY_AMOUNT = SUBSIDY_AMOUNT + @SUBSIDY_AMOUNT
				--						,BOND_CLOSING = BOND_CLOSING - @BOND_RETURN - @SUBSIDY_AMOUNT
				--						WHERE BOND_ID = @BOND_ID AND FOR_DATE = @FOR_DATE AND CMP_ID = @CMP_ID
				--						AND EMP_ID = @EMP_ID AND IS_BOND_INTEREST_FLAG = 1
									
				--						UPDATE T0140_BOND_TRANSACTION SET BOND_OPENING = BOND_OPENING - @BOND_RETURN - @SUBSIDY_AMOUNT
				--						,BOND_CLOSING = BOND_CLOSING - @BOND_RETURN - @SUBSIDY_AMOUNT
				--						WHERE BOND_ID = @BOND_ID AND FOR_DATE > @FOR_DATE AND CMP_ID = @CMP_ID
				--						AND EMP_ID = @EMP_ID AND IS_BOND_INTEREST_FLAG = 1
				--					END
				--			END 
				--	END
					
					
			END
		ELSE
			BEGIN	    
			
	    			SELECT	@LAST_CLOSING = ISNULL(BOND_CLOSING,0) 
	    			FROM	T0140_BOND_TRANSACTION
	    			WHERE	FOR_DATE = (
	    									SELECT MAX(FOR_DATE) FROM T0140_BOND_TRANSACTION 
	    									WHERE FOR_DATE < @FOR_DATE AND 
	    									BOND_ID = @BOND_ID AND CMP_ID = @CMP_ID AND EMP_ID = @EMP_ID 
	    								) 
	    					AND CMP_ID = @CMP_ID AND BOND_ID = @BOND_ID AND EMP_ID = @EMP_ID
	
					IF @LAST_CLOSING IS NULL 
						SET  @LAST_CLOSING = 0
				

					SELECT	@LAST_CLOSING_BALANCE = ISNULL(BOND_CLOSING,0) 
					FROM	T0140_BOND_TRANSACTION 
					WHERE	FOR_DATE < @FOR_DATE AND BOND_ID = @BOND_ID AND 
							CMP_ID = @CMP_ID AND EMP_ID = @EMP_ID --AND IS_BOND_INTEREST_FLAG = 0
						
						IF @LAST_CLOSING_BALANCE = 0
							BEGIN
								PRINT 11
								--IF @FIRST_DEDUCTION_PRINCIPAL_AMT = 1 
								--	BEGIN
												
								--				SET @BOND_RETURN = @BOND_INT_AMOUNT
										
								--				UPDATE T0120_BOND_APPROVAL
								--				SET BOND_APR_PENDING_INT_AMOUNT = (BOND_APR_PENDING_INT_AMOUNT - @BOND_RETURN - @SUBSIDY_AMOUNT)
								--				WHERE  BOND_APR_ID = @BOND_APR_ID AND @FIRST_DEDUCTION_PRINCIPAL_AMT = 1
												
								--				INSERT T0140_BOND_TRANSACTION(BOND_TRAN_ID,EMP_ID,BOND_ID,CMP_ID,FOR_DATE,BOND_OPENING,
								--					BOND_CLOSING,BOND_RETURN,BOND_ISSUE,IS_BOND_INTEREST_FLAG,SUBSIDY_AMOUNT)
								--				VALUES(@BOND_TRAN_ID,@EMP_ID,@BOND_ID,@CMP_ID,@FOR_DATE,@LAST_CLOSING,
								--					@LAST_CLOSING - @BOND_RETURN,@BOND_RETURN,0,1,@SUBSIDY_AMOUNT)
													
								--				UPDATE T0140_BOND_TRANSACTION SET BOND_OPENING = BOND_OPENING - @BOND_RETURN - @SUBSIDY_AMOUNT
								--				,BOND_CLOSING = BOND_CLOSING - @BOND_RETURN	 - @SUBSIDY_AMOUNT
								--				WHERE BOND_ID = @BOND_ID AND FOR_DATE > @FOR_DATE AND CMP_ID = @CMP_ID
								--				AND EMP_ID = @EMP_ID AND IS_BOND_INTEREST_FLAG = 1
								--	END
							END
						ELSE
							BEGIN 
								
								INSERT	T0140_BOND_TRANSACTION
										(
											BOND_TRAN_ID,
											EMP_ID,
											BOND_ID,
											CMP_ID,
											FOR_DATE,
											BOND_OPENING,
											BOND_CLOSING,
											BOND_RETURN,
											BOND_ISSUE
											--SUBSIDY_AMOUNT
										)
								VALUES	(
											@BOND_TRAN_ID,
											@EMP_ID,
											@BOND_ID,
											@CMP_ID,
											@FOR_DATE,
											@LAST_CLOSING,
											@LAST_CLOSING - @BOND_RETURN,
											@BOND_RETURN,
											0
											--@SUBSIDY_AMOUNT
										)												    		
							
								UPDATE	T0140_BOND_TRANSACTION 
								SET		BOND_OPENING = BOND_OPENING - @BOND_RETURN , --- @SUBSIDY_AMOUNT 
										BOND_CLOSING = BOND_CLOSING - @BOND_RETURN	-- - @SUBSIDY_AMOUNT
								WHERE	BOND_ID = @BOND_ID AND FOR_DATE > @FOR_DATE AND CMP_ID = @CMP_ID AND EMP_ID = @EMP_ID
								
								SELECT	@LAST_CLOSING_BALANCE = ISNULL(BOND_CLOSING,0) 
								FROM	T0140_BOND_TRANSACTION 
								WHERE FOR_DATE = @FOR_DATE AND BOND_ID = @BOND_ID  AND CMP_ID = @CMP_ID AND EMP_ID = @EMP_ID --AND IS_BOND_INTEREST_FLAG = 0
								
								IF @LAST_CLOSING_BALANCE = 0 
									BEGIN
										PRINT 22
										--IF @FIRST_DEDUCTION_PRINCIPAL_AMT = 1
										--BEGIN
										--	IF NOT EXISTS(SELECT * FROM T0140_BOND_TRANSACTION WHERE FOR_DATE = @FOR_DATE AND BOND_ID = @BOND_ID  AND CMP_ID = @CMP_ID AND EMP_ID = @EMP_ID AND IS_BOND_INTEREST_FLAG = 1)
										--		BEGIN 
										--				SELECT @BOND_TRAN_ID = ISNULL(MAX(BOND_TRAN_ID),0)  +1 FROM T0140_BOND_TRANSACTION
										--				SELECT @SUM_OF_INTEREST_AMT = ISNULL(SUM(INTEREST_AMOUNT),0) FROM T0210_MONTHLY_BOND_PAYMENT WHERE BOND_APR_ID = @BOND_APR_ID AND CMP_ID = @CMP_ID
										--				IF @CALCULATED_INTEREST_AMOUNT <> 0 
										--					BEGIN
										--						SET @SUM_OF_INTEREST_AMT = @SUM_OF_INTEREST_AMT + @CALCULATED_INTEREST_AMOUNT
										--					END
										--				INSERT T0140_BOND_TRANSACTION(BOND_TRAN_ID,EMP_ID,BOND_ID,CMP_ID,FOR_DATE,BOND_OPENING,BOND_CLOSING,BOND_RETURN,BOND_ISSUE,IS_BOND_INTEREST_FLAG,SUBSIDY_AMOUNT)
										--				VALUES(@BOND_TRAN_ID,@EMP_ID,@BOND_ID,@CMP_ID,@FOR_DATE,0,@SUM_OF_INTEREST_AMT,0,@SUM_OF_INTEREST_AMT,1,@SUBSIDY_AMOUNT)
														
										--				UPDATE T0120_BOND_APPROVAL SET TOTAL_BOND_INT_AMOUNT = @SUM_OF_INTEREST_AMT,BOND_INT_INSTALLMENT_AMOUNT = (CASE WHEN ISNULL(NO_OF_INST_BOND_AMT,0) <> 0 THEN @SUM_OF_INTEREST_AMT/NO_OF_INST_BOND_AMT ELSE 0 END),BOND_APR_PENDING_INT_AMOUNT = @SUM_OF_INTEREST_AMT
										--				WHERE BOND_APR_ID = @BOND_APR_ID AND EMP_ID = @EMP_ID AND BOND_ID = @BOND_ID AND CMP_ID = @CMP_ID
										--		END
										--END
									END
							End
	    		end	
	    End
	ELSE
		BEGIN
		
		
	
		 	DECLARE CURDEL CURSOR FOR
				
				SELECT		DEL.CMP_ID ,EMP_ID,LA.BOND_ID,DEL.BOND_PAY_AMOUNT ,BOND_PAYMENT_DATE ,
							DEL.BOND_APR_ID --DEL.IS_BOND_INTEREST_FLAG,DEL.INTEREST_AMOUNT,DEL.SUBSIDY_AMOUNT 
				FROM		DELETED DEL
				INNER JOIN	T0120_BOND_APPROVAL LA ON DEL.BOND_APR_ID = LA.BOND_APR_ID
				INNER JOIN	T0040_BOND_MASTER LM ON LM.BOND_ID = LA.BOND_ID
				
				
			OPEN CURDEL
			FETCH NEXT FROM CURDEL INTO @CMP_ID,@EMP_ID,@BOND_ID , @BOND_RETURN ,@FOR_DATE ,@BOND_APR_ID--,@BOND_INT_AMOUNT --@FIRST_DEDUCTION_PRINCIPAL_AMT,@SUBSIDY_AMOUNT
			WHILE @@FETCH_STATUS = 0
			BEGIN 
			
				

				--IF @FIRST_DEDUCTION_PRINCIPAL_AMT = 1 
				--	BEGIN
				--		SET @BOND_RETURN = @BOND_INT_AMOUNT
				--		UPDATE T0120_BOND_APPROVAL
				--			SET BOND_APR_PENDING_INT_AMOUNT = (BOND_APR_PENDING_INT_AMOUNT + @BOND_RETURN + @SUBSIDY_AMOUNT)
				--			WHERE  BOND_APR_ID = @BOND_APR_ID AND @FIRST_DEDUCTION_PRINCIPAL_AMT = 1	
			 
				--		UPDATE T0140_BOND_TRANSACTION SET BOND_RETURN = BOND_RETURN - @BOND_RETURN 
				--		,SUBSIDY_AMOUNT = SUBSIDY_AMOUNT - @SUBSIDY_AMOUNT
				--			,BOND_CLOSING = BOND_CLOSING + @BOND_RETURN
				--		WHERE BOND_ID = @BOND_ID AND EMP_ID = @EMP_ID AND FOR_DATE = @FOR_DATE AND CMP_ID = @CMP_ID	 AND IS_BOND_INTEREST_FLAG = 1
								
				--		UPDATE T0140_BOND_TRANSACTION SET BOND_OPENING = BOND_OPENING + @BOND_RETURN + @SUBSIDY_AMOUNT
				--			,BOND_CLOSING = BOND_CLOSING + @BOND_RETURN + @SUBSIDY_AMOUNT
				--		WHERE BOND_ID = @BOND_ID AND EMP_ID = @EMP_ID AND FOR_DATE > @FOR_DATE AND CMP_ID = @CMP_ID	 AND IS_BOND_INTEREST_FLAG = 1
				--	END
				--ELSE
				--	BEGIN
						UPDATE	T0120_BOND_APPROVAL
						SET		BOND_APR_PENDING_AMOUNT = (BOND_APR_PENDING_AMOUNT + @BOND_RETURN) -- + @SUBSIDY_AMOUNT
						WHERE	BOND_APR_ID = @BOND_APR_ID	
			 
						UPDATE	T0140_BOND_TRANSACTION 
						SET		BOND_RETURN = BOND_RETURN - @BOND_RETURN, 
								--SUBSIDY_AMOUNT = SUBSIDY_AMOUNT - @SUBSIDY_AMOUNT,
								BOND_CLOSING = BOND_CLOSING + @BOND_RETURN-- + @SUBSIDY_AMOUNT
						WHERE	BOND_ID = @BOND_ID AND EMP_ID = @EMP_ID AND FOR_DATE = @FOR_DATE AND CMP_ID = @CMP_ID --AND IS_BOND_INTEREST_FLAG = 0	
								
						UPDATE	T0140_BOND_TRANSACTION 
						SET		BOND_OPENING = BOND_OPENING + @BOND_RETURN,-- + @SUBSIDY_AMOUNT
								BOND_CLOSING = BOND_CLOSING + @BOND_RETURN --+ @SUBSIDY_AMOUNT
						WHERE	BOND_ID = @BOND_ID AND EMP_ID = @EMP_ID AND FOR_DATE > @FOR_DATE AND CMP_ID = @CMP_ID --AND IS_BOND_INTEREST_FLAG = 0	
						
						DELETE FROM T0140_BOND_TRANSACTION WHERE BOND_ID = @BOND_ID AND EMP_ID = @EMP_ID AND FOR_DATE >= @FOR_DATE AND CMP_ID = @CMP_ID	--AND IS_BOND_INTEREST_FLAG = 1
						
						--UPDATE	T0120_BOND_APPROVAL
						--SET		BOND_APR_PENDING_INT_AMOUNT = 0
						--WHERE	BOND_APR_ID = @BOND_APR_ID 
						
					--END
					
					
				FETCH NEXT FROM CURDEL INTO @CMP_ID, @EMP_ID,@BOND_ID , @BOND_RETURN ,@FOR_DATE ,@BOND_APR_ID--,@BOND_INT_AMOUNT
			END				
			CLOSE CURDEL
			DEALLOCATE CURDEL
			
			
		END



/*********************************************
**************FOR GPF BOND********************
*********************************************/
--DECLARE @GPF_TRAN_ID	NUMERIC;
--DECLARE @GPF_CREDIT		NUMERIC(18,4);


--IF EXISTS(SELECT 1 FROM INSERTED I INNER JOIN T0120_BOND_APPROVAL LA ON I.Cmp_ID=LA.Cmp_ID AND I.BOND_Apr_ID=LA.BOND_Apr_ID 
--			INNER JOIN T0040_BOND_MASTER L ON LA.Cmp_ID=L.Cmp_ID AND LA.BOND_ID=L.BOND_ID 
--			WHERE L.Is_GPF = 1)
--	BEGIN
--		SELECT	@Cmp_ID=INS.Cmp_ID,@Emp_Id=L.Emp_ID,@BOND_Id=L.BOND_ID,@GPF_CREDIT=INS.BOND_Pay_Amount,
--					@For_Date=INS.BOND_Payment_Date
--		FROM	INSERTED INS INNER JOIN T0120_BOND_APPROVAL L ON INS.Cmp_ID=L.Cmp_ID AND INS.BOND_Apr_ID=L.BOND_Apr_ID
		
		
--		SELECT	@GPF_TRAN_ID = TRAN_ID 
--		FROM	T0140_EMP_GPF_TRANSACTION GPF
--		WHERE	GPF.CMP_ID=@Cmp_ID AND GPF.EMP_ID=@Emp_Id AND MONTH(GPF.FOR_DATE) = MONTH(@For_Date) AND YEAR(GPF.FOR_DATE) = YEAR(@For_Date)
--				AND GPF.GPF_CREDIT > 0 
		
--		IF @GPF_TRAN_ID  IS NOT NULL
--			BEGIN
--				UPDATE	T0140_EMP_GPF_TRANSACTION 
--				SET		GPF_CREDIT = ISNULL(GPF_CREDIT, 0) + @GPF_CREDIT
--				WHERE	TRAN_ID=@GPF_TRAN_ID
--			END
--		ELSE
--			BEGIN
--				SET @GPF_TRAN_ID = ISNULL((SELECT MAX(TRAN_ID) FROM T0140_EMP_GPF_TRANSACTION), 0) +1
				
--				INSERT	INTO T0140_EMP_GPF_TRANSACTION 
--					(CMP_ID,TRAN_ID,EMP_ID,SAL_TRAN_ID,FOR_DATE,GPF_OPENING,GPF_CREDIT,GPF_DEBIT,GPF_CLOSING,SYSTEM_DATE)
--				VALUES
--					(@Cmp_ID,@GPF_TRAN_ID,@Emp_Id,0,@For_Date, 0,@GPF_CREDIT,0,0, GETDATE())
--			END
		
--		EXEC dbo.P0140_UPDATE_GPF_CLOSING @CMP_ID, @Emp_Id, @For_Date	
--	END
--IF EXISTS(SELECT 1 FROM DELETED D INNER JOIN T0120_BOND_APPROVAL LA ON D.Cmp_ID=LA.Cmp_ID AND D.BOND_Apr_ID=LA.BOND_Apr_ID 
--			INNER JOIN T0040_BOND_MASTER L ON LA.Cmp_ID=L.Cmp_ID AND LA.BOND_ID=L.BOND_ID 
--			WHERE L.Is_GPF = 1)
--	BEGIN
--		SELECT	@Cmp_ID=D.Cmp_ID,@Emp_Id=L.Emp_ID,@For_Date=D.BOND_Payment_Date
--		FROM	DELETED D INNER JOIN T0120_BOND_APPROVAL L ON D.Cmp_ID=L.Cmp_ID AND D.BOND_Apr_ID=L.BOND_Apr_ID
		
--		SELECT	@GPF_TRAN_ID = TRAN_ID 
--		FROM	T0140_EMP_GPF_TRANSACTION GPF
--		WHERE	GPF.CMP_ID=@Cmp_ID AND GPF.EMP_ID=@Emp_Id AND GPF.FOR_DATE = @For_Date
--				AND GPF.GPF_CREDIT > 0 
		
--		IF @GPF_TRAN_ID IS NOT NULL 
--			DELETE FROM T0140_EMP_GPF_TRANSACTION WHERE TRAN_ID=@GPF_TRAN_ID
		
--		EXEC dbo.P0140_UPDATE_GPF_CLOSING @CMP_ID, @Emp_Id, @For_Date	
--	END
/*************END FOR GPF BOND***************/




GO




CREATE TRIGGER [DBO].[Tri_T0210_MONTHLY_BOND_PAYMENT_UPDATE]
ON [dbo].[T0210_MONTHLY_BOND_PAYMENT]
FOR UPDATE
AS
	SET NOCOUNT ON
	

	DECLARE @CMP_ID		NUMERIC
	DECLARE @FOR_DATE	DATETIME
	DECLARE @EMP_ID		NUMERIC
	DECLARE @COUNT		NUMERIC
	DECLARE @BOND_TRAN_ID	NUMERIC
	DECLARE @BOND_ID		NUMERIC
	DECLARE @BOND_RETURN	NUMERIC(18,2)	
	DECLARE @LAST_CLOSING		NUMERIC(18,2)
	DECLARE @BOND_APR_ID	NUMERIC 
	DECLARE @PRE_BOND_PAY_AMOUNT NUMERIC (18,2)
	DECLARE @BOND_PAY_ID NUMERIC 
	--DECLARE @SUBSIDY_AMOUNT NUMERIC(18,2)
		
	
	SELECT @BOND_TRAN_ID = ISNULL(MAX(BOND_TRAN_ID),0)  +1 FROM T0140_BOND_TRANSACTION


	 	DECLARE CURDEL_PAY CURSOR FOR
	 	
				SELECT		DEL.CMP_ID ,EMP_ID,BOND_ID,DEL.BOND_PAY_AMOUNT ,BOND_PAYMENT_DATE ,DEL.BOND_APR_ID--,DEL.SUBSIDY_AMOUNT 
				FROM		DELETED DEL
				INNER JOIN	T0120_BOND_APPROVAL LA ON DEL.BOND_APR_ID = LA.BOND_APR_ID
					
			OPEN CURDEL_PAY
			FETCH NEXT FROM CURDEL_PAY INTO @CMP_ID,@EMP_ID,@BOND_ID , @BOND_RETURN ,@FOR_DATE ,@BOND_APR_ID--,@SUBSIDY_AMOUNT -- 
			WHILE @@FETCH_STATUS = 0
			BEGIN 
				
				UPDATE	T0120_BOND_APPROVAL
				SET		BOND_APR_PENDING_AMOUNT = (BOND_APR_PENDING_AMOUNT + @BOND_RETURN ) --+ @SUBSIDY_AMOUNT
				WHERE	BOND_APR_ID = @BOND_APR_ID	
			
				UPDATE	T0140_BOND_TRANSACTION 
				SET		BOND_RETURN = BOND_RETURN - @BOND_RETURN,
						--SUBSIDY_AMOUNT = SUBSIDY_AMOUNT, --  - @SUBSIDY_AMOUNT
						BOND_CLOSING = BOND_CLOSING + @BOND_RETURN --+ @SUBSIDY_AMOUNT
				WHERE	BOND_ID = @BOND_ID AND EMP_ID = @EMP_ID AND FOR_DATE = @FOR_DATE AND CMP_ID = @CMP_ID	
				
						
				UPDATE	T0140_BOND_TRANSACTION 
				SET		BOND_OPENING = BOND_OPENING + @BOND_RETURN, --+ @SUBSIDY_AMOUNT
						BOND_CLOSING = BOND_CLOSING + @BOND_RETURN --+ @SUBSIDY_AMOUNT
				WHERE	BOND_ID = @BOND_ID AND EMP_ID = @EMP_ID AND FOR_DATE > @FOR_DATE AND CMP_ID = @CMP_ID	
				
				FETCH NEXT FROM CURDEL_PAY INTO @CMP_ID, @EMP_ID,@BOND_ID , @BOND_RETURN ,@FOR_DATE ,@BOND_APR_ID--,@SUBSIDY_AMOUNT
				
			END				
			CLOSE CURDEL_PAY
			DEALLOCATE CURDEL_PAY


		
		SELECT	@BOND_APR_ID = INS.BOND_APR_ID ,
				@CMP_ID = INS.CMP_ID,
				@BOND_RETURN = INS.BOND_PAY_AMOUNT,
				@FOR_DATE = BOND_PAYMENT_DATE,
				@EMP_ID = EMP_ID , 
				@BOND_ID = BOND_ID ,
				@BOND_PAY_ID = BOND_PAY_ID
				--@SUBSIDY_AMOUNT = INS.SUBSIDY_AMOUNT
		FROM	INSERTED INS	
		INNER JOIN T0120_BOND_APPROVAL LA ON INS.BOND_APR_ID = LA.BOND_APR_ID
	
	
	IF ISNULL(@BOND_APR_ID,0) > 0 
		BEGIN
		
	
				UPDATE	T0120_BOND_APPROVAL
				SET		BOND_APR_PENDING_AMOUNT = (BOND_APR_PENDING_AMOUNT - @BOND_RETURN) -- - @SUBSIDY_AMOUNT
				WHERE	BOND_APR_ID = @BOND_APR_ID	
							

				IF EXISTS(SELECT * FROM T0140_BOND_TRANSACTION WHERE FOR_DATE = @FOR_DATE AND BOND_ID = @BOND_ID AND CMP_ID = @CMP_ID AND EMP_ID = @EMP_ID)
					BEGIN
					
				
						UPDATE	T0140_BOND_TRANSACTION 
						SET		BOND_RETURN = BOND_RETURN + @BOND_RETURN,
								--SUBSIDY_AMOUNT = SUBSIDY_AMOUNT + @SUBSIDY_AMOUNT,
								BOND_CLOSING = BOND_CLOSING - @BOND_RETURN --- @SUBSIDY_AMOUNT
						WHERE	BOND_ID = @BOND_ID AND FOR_DATE = @FOR_DATE AND CMP_ID = @CMP_ID AND EMP_ID = @EMP_ID
						
						UPDATE	T0140_BOND_TRANSACTION 
						SET		BOND_OPENING = BOND_OPENING - @BOND_RETURN,-- - @SUBSIDY_AMOUNT
								BOND_CLOSING = BOND_CLOSING - @BOND_RETURN --- @SUBSIDY_AMOUNT
						WHERE	BOND_ID = @BOND_ID AND FOR_DATE > @FOR_DATE AND CMP_ID = @CMP_ID AND EMP_ID = @EMP_ID
							
					END
				ELSE
					BEGIN	    
					
	    				SELECT	@LAST_CLOSING = ISNULL(BOND_CLOSING,0) 
	    				FROM T0140_BOND_TRANSACTION	
	    				WHERE FOR_DATE = (
	    									SELECT MAX(FOR_DATE) FROM T0140_BOND_TRANSACTION 
	    									WHERE FOR_DATE < @FOR_DATE AND 
	    									BOND_ID = @BOND_ID AND CMP_ID = @CMP_ID AND EMP_ID = @EMP_ID 
	    								) 
	    								AND CMP_ID = @CMP_ID AND BOND_ID = @BOND_ID  AND EMP_ID = @EMP_ID
			
							IF @LAST_CLOSING IS NULL 
								SET  @LAST_CLOSING = 0
							
							INSERT T0140_BOND_TRANSACTION
									(
										BOND_TRAN_ID,
										EMP_ID,
										BOND_ID,
										CMP_ID,
										FOR_DATE,
										BOND_OPENING,
										BOND_CLOSING,
										BOND_RETURN,
										BOND_ISSUE
										--SUBSIDY_AMOUNT
									)
							VALUES	(
										@BOND_TRAN_ID,
										@EMP_ID,
										@BOND_ID,
										@CMP_ID,
										@FOR_DATE,
										@LAST_CLOSING,
										@LAST_CLOSING - @BOND_RETURN,
										@BOND_RETURN,
										0
										--@SUBSIDY_AMOUNT
									)												    		
						
							UPDATE	T0140_BOND_TRANSACTION 
							SET		BOND_OPENING = BOND_OPENING - @BOND_RETURN, --- @SUBSIDY_AMOUNT
									BOND_CLOSING = BOND_CLOSING - @BOND_RETURN	--- @SUBSIDY_AMOUNT
							WHERE	BOND_ID = @BOND_ID AND FOR_DATE > @FOR_DATE AND CMP_ID = @CMP_ID AND EMP_ID = @EMP_ID
		 
					END
		END

/*********************************************
**************FOR GPF BOND********************
*********************************************/
--DECLARE @GPF_TRAN_ID	NUMERIC;
--DECLARE @GPF_CREDIT		NUMERIC(18,4);

--IF EXISTS(SELECT 1 FROM INSERTED I INNER JOIN T0120_BOND_APPROVAL LA ON I.Cmp_ID=LA.Cmp_ID AND I.BOND_Apr_ID=LA.BOND_App_ID 
--			INNER JOIN T0040_BOND_MASTER L ON LA.Cmp_ID=L.Cmp_ID AND LA.BOND_ID=L.BOND_ID 
--			WHERE L.Is_GPF = 1)
--	BEGIN
--		SELECT	@Cmp_ID=INS.Cmp_ID,@Emp_Id=L.Emp_ID,@BOND_Id=L.BOND_ID,@GPF_CREDIT=INS.BOND_Pay_Amount,
--					@For_Date=INS.BOND_Payment_Date
--		FROM	INSERTED INS INNER JOIN T0120_BOND_APPROVAL L ON INS.Cmp_ID=L.Cmp_ID AND INS.BOND_Apr_ID=L.BOND_App_ID
		
		
--		SELECT	@GPF_TRAN_ID = TRAN_ID 
--		FROM	T0140_EMP_GPF_TRANSACTION GPF
--		WHERE	GPF.CMP_ID=@Cmp_ID AND GPF.EMP_ID=@Emp_Id AND MONTH(GPF.FOR_DATE) = MONTH(@For_Date) AND YEAR(GPF.FOR_DATE) = YEAR(@For_Date)
--				AND GPF.GPF_CREDIT > 0 
		
--		IF @GPF_TRAN_ID  IS NOT NULL
--			BEGIN
--				UPDATE	T0140_EMP_GPF_TRANSACTION 
--				SET		GPF_CREDIT = @GPF_CREDIT
--				WHERE	TRAN_ID=@GPF_TRAN_ID
--			END
--		ELSE
--			BEGIN
--				SET @GPF_TRAN_ID = ISNULL((SELECT MAX(TRAN_ID) FROM T0140_EMP_GPF_TRANSACTION), 0) +1
				
--				INSERT	INTO T0140_EMP_GPF_TRANSACTION 
--					(CMP_ID,TRAN_ID,EMP_ID,SAL_TRAN_ID,FOR_DATE,GPF_OPENING,GPF_CREDIT,GPF_DEBIT,GPF_CLOSING,SYSTEM_DATE)
--				VALUES
--					(@Cmp_ID,@GPF_TRAN_ID,@Emp_Id,0,@For_Date, 0,@GPF_CREDIT,0,0, GETDATE())
--			END
		
--		EXEC dbo.P0140_UPDATE_GPF_CLOSING @CMP_ID, @Emp_Id, @For_Date	
--	END
/*************END FOR GPF BOND***************/




